{"version":3,"sources":["API.ts","utils/styles.ts","utils/util.ts","pages/chart-panel/line-chart-section/index.tsx","pages/chart-panel/histogram-chart-section/index.tsx","pages/chart-panel/box-chart-section/index.tsx","pages/chart-panel/terrestrial-heatmap-chart/index.tsx","pages/cart-dashboard-panel/analyze-regression-section/two-view-section/index.tsx","pages/cart-dashboard-panel/analyze-regression-section/three-view-section/index.tsx","constants/index.ts","components/Select/index.tsx","components/Button/DashAddon.tsx","pages/cart-dashboard-panel/analyze-regression-section/charts-libs-section/line-chart-section/index.tsx","pages/cart-dashboard-panel/analyze-regression-section/charts-libs-section/histogram-chart-section/index.tsx","pages/cart-dashboard-panel/analyze-regression-section/charts-libs-section/box-chart-section/index.tsx","pages/cart-dashboard-panel/analyze-regression-section/charts-libs-section/selected-chart-section/index.tsx","pages/cart-dashboard-panel/analyze-regression-section/charts-libs-section/index.tsx","pages/cart-dashboard-panel/analyze-regression-section/header-section/index.tsx","components/Button/OptionAddon.tsx","pages/cart-dashboard-panel/analyze-regression-section/index.tsx","pages/cart-dashboard-panel/index.tsx","pages/cart-panel/analyze-regression-section/two-view-section/index.tsx","pages/cart-panel/analyze-regression-section/three-view-section/index.tsx","components/Button/MinusAddon.tsx","components/Button/PlusAddon.tsx","pages/cart-panel/analyze-regression-section/charts-libs-section/selected-chart-section/index.tsx","pages/cart-panel/analyze-regression-section/charts-libs-section/index.tsx","pages/cart-panel/analyze-regression-section/index.tsx","pages/cart-panel/index.tsx","pages/chart-panel/index.tsx","pages/auth-panel/NoMatch.tsx","App.tsx","index.tsx"],"names":["getItems","params","a","axios","get","res","Error","getPlotItems","getCartItems","getSystems","getSystemVersion","getFileId","useStyles","makeStyles","theme","authcard","marginTop","minWidth","padding","spacing","link","paddingRight","color","textDecoration","chartCard","searchSelect","textAlignLast","tooltip","maxWidth","dialogDeep","height","backgroundColor","palette","grey","dashDialogDeep","dialogCloseBtn","position","right","top","zIndex","contentSection","maxHeight","overflow","label","fontSize","dashCard","minHeight","formControl","margin","useWindowSize","useState","width","undefined","windowSize","setWindowSize","useEffect","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","LineChartSection","props","size","data","x","xTraces","y","yTraces","name","type","mode","marker","avgTraces","layout","title","showlegend","legend","orientation","xanchor","font","family","l","b","r","t","pad","xaxis","titlefont","showgrid","zerolinecolor","zerolinewidth","yaxis","config","displayModeBar","HistogramChartSection","split","join","BoxChartSection","INIT_SOURCE","heatmap","intrpl","TerrestrialHeatMap","setMode","source","setSource","then","catch","Grid","container","justify","alignItems","item","md","z","zeroline","range","tickmode","tick0","dtick","lat","lon","mapbox","center","style","zoom","mapboxAccessToken","hoverinfo","Box","borderColor","border","borderRadius","Button","variant","onClick","e","currentTarget","marginRight","TwoViewSection","checked","setChecked","setConfig","plot_rows","surface_rows","unpack","rows","key","map","row","configData","inclination","parseInt","inc","new_plot_rows","filter","new_surface_rows","show_surface","show_scatter","line","dot","autosize","hovermode","yAxisLabel","onHover","event","target","cursor","onUnhover","onDoubleClick","ThreeViewSection","reset","setReset","opacity","alt","value","parseFloat","scene","aspectratio","camera","eye","up","Math","max","zaxis","zAxisLabel","min","MENU_ITEMS","as_needed_handoff","id","dataset","maximum_powee_handoff","Selection","Menu","anchorEl","keepMounted","open","Boolean","onClose","onAnchorEl","Constants","el","MenuItem","onSelected","selected","includes","DashAddon","IconButton","index","onIndex","text","createData","SelectedChartSection","textAlign","Typography","Table","aria-label","TableHead","TableRow","TableCell","TableBody","component","scope","ChartsLibsSection","setSelected","setAnchorEl","setIndex","classes","console","log","idx","dset","dataSet","paddingLeft","Card","className","CardContent","Number","traces","Object","keys","length","HeaderSection","marginLeft","ToggleButtonGroup","onChange","ToggleButton","FormControl","fullWidth","InputLabel","Select","labelId","system","onSystem","disabled","systems","system_name","system_id","version","onVersion","versions","OptionAddon","isOpen","setIsOpen","onViewMethod","Divider","flexItem","Tooltip","gutterBottom","dangerouslySetInnerHTML","__html","placement","viewMethod","resetPlot","INIT_CHECK_STATUS","INIT_FILE_ID","AnalyzeRegressionSection","setViewMethod","setDataSet","setSystems","setVersions","setDot","fileId","setFileId","setTraces","plot_value","dataType","ctype","gaps","durations","avgs","push","prevState","err","altitude","handleClick","user_altitude","points","user_inclination","preventDefault","onDataType","fontWeight","onChecked","equation","maxAltitude","isLegend","isSub","INIT_PARAMS","Transition","React","forwardRef","ref","Slide","direction","CartPanel","setSystem","setVersion","setDataType","isLoading","setIsLoading","setTerrestrial","setMaxAltitude","setCoefficients","setText","metric","terrestrial","coefficients","Dialog","TransitionComponent","paper","CssBaseline","Close","DialogContent","dividers","overflowX","m","selectedItem","MinusAddon","PlusAddon","handleSelected","Fragment","INIT_MENUS","TabPanel","children","other","role","hidden","aria-labelledby","p","a11yProps","ChartPanel","isOpenDash","setIsOpenDash","tab","setTab","useTheme","Container","CardHeader","action","AppBar","Tabs","val","indicatorColor","textColor","Tab","axis","onChangeIndex","NoMatch","to","App","exact","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.92ccc883.chunk.js","sourcesContent":["import axios, { AxiosResponse } from \"axios\";\r\n\r\n// const baseUrl: string = \"http://127.0.0.1:7000\";\r\n\r\nexport const getItems = async (params: any) => {\r\n  try {\r\n    const res: AxiosResponse = await axios.get(\"/get-items\", {\r\n      params,\r\n    });\r\n    return res;\r\n  } catch (error) {\r\n    throw new Error(error);\r\n  }\r\n};\r\n\r\nexport const getPlotItems = async () => {\r\n  try {\r\n    const res: AxiosResponse = await axios.get(\"/get-plot\");\r\n    return res;\r\n  } catch (error) {\r\n    throw new Error(error);\r\n  }\r\n};\r\n\r\nexport const getCartItems = async (params: Object) => {\r\n  try {\r\n    const res: AxiosResponse = await axios.get(\"/get-cart\", {\r\n      params,\r\n    });\r\n    return res;\r\n  } catch (error) {\r\n    throw new Error(error);\r\n  }\r\n};\r\n\r\nexport const getSystems = async () => {\r\n  try {\r\n    const res: AxiosResponse = await axios.get(\"/get-systems\");\r\n    return res;\r\n  } catch (error) {\r\n    throw new Error(error);\r\n  }\r\n};\r\n\r\nexport const getSystemVersion = async (params: Object) => {\r\n  try {\r\n    const res: AxiosResponse = await axios.get(\r\n      \"/get-system-version\",\r\n      { params }\r\n    );\r\n    return res;\r\n  } catch (error) {\r\n    throw new Error(error);\r\n  }\r\n};\r\n\r\nexport const getFileId = async (params: Object) => {\r\n  try {\r\n    const res: AxiosResponse = await axios.get(\"/get-file-id\", {\r\n      params,\r\n    });\r\n    return res;\r\n  } catch (error) {\r\n    throw new Error(error);\r\n  }\r\n};\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\nimport { grey } from \"@material-ui/core/colors\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  authcard: {\r\n    marginTop: \"10vh\",\r\n    minWidth: \"30vw\",\r\n    padding: theme.spacing(3),\r\n  },\r\n\r\n  link: {\r\n    paddingRight: theme.spacing(2),\r\n    color: \"#3385ff\",\r\n    textDecoration: \"none\",\r\n  },\r\n\r\n  chartCard: {\r\n    padding: theme.spacing(3),\r\n  },\r\n\r\n  searchSelect: {\r\n    textAlignLast: \"center\",\r\n  },\r\n\r\n  tooltip: {\r\n    maxWidth: \"500px\",\r\n  },\r\n\r\n  dialogDeep: {\r\n    minWidth: \"43vw !important\",\r\n    height: \"90vh !important\",\r\n    maxWidth: \"40vw !important\",\r\n    backgroundColor: theme.palette.grey[100],\r\n  },\r\n\r\n  dashDialogDeep: {\r\n    minWidth: \"80vw !important\",\r\n    height: \"98vh !important\",\r\n    maxWidth: \"80vw !important\",\r\n    backgroundColor: theme.palette.grey[100],\r\n  },\r\n\r\n  dialogCloseBtn: {\r\n    position: \"absolute\",\r\n    right: theme.spacing(1),\r\n    top: theme.spacing(1),\r\n    color: theme.palette.grey[500],\r\n    zIndex: 100,\r\n  },\r\n\r\n  contentSection: {\r\n    backgroundColor: grey[500],\r\n    height: \"100%\",\r\n    maxHeight: \"55vh\",\r\n    overflow: \"auto\",\r\n  },\r\n\r\n  label: {\r\n    fontSize: 14,\r\n  },\r\n\r\n  dashCard: {\r\n    minHeight: '32vh !important'\r\n  },\r\n\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    // minWidth: 120,\r\n  },\r\n}));\r\n\r\nexport default useStyles;\r\n","import { useState, useEffect } from \"react\";\r\n\r\nexport function useWindowSize() {\r\n  const [windowSize, setWindowSize] = useState({\r\n    width: undefined as any,\r\n    height: undefined as any,\r\n  });\r\n\r\n  useEffect(() => {\r\n    function handleResize() {\r\n      setWindowSize({\r\n        width: window.innerWidth,\r\n        height: window.innerHeight,\r\n      });\r\n    }\r\n    window.addEventListener(\"resize\", handleResize);\r\n    handleResize();\r\n\r\n    return () => window.removeEventListener(\"resize\", handleResize);\r\n  }, []);\r\n\r\n  return windowSize;\r\n}\r\n","import React from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\n\r\nimport { useWindowSize } from \"../../../utils/util\";\r\n\r\nfunction LineChartSection(props: any) {\r\n  const size = useWindowSize();\r\n\r\n  return (\r\n    <Plot\r\n      data={[\r\n        {\r\n          x: props.xTraces,\r\n          y: props.yTraces,\r\n          name: \"Gap Event Duration\",\r\n          type: \"scatter\",\r\n          mode: \"lines+markers\",\r\n          marker: { color: \"red\" },\r\n        },\r\n        {\r\n          x: props.xTraces,\r\n          y: props.avgTraces,\r\n          name: \"Running Average\",\r\n          type: \"scatter\",\r\n          marker: { color: \"blue\" },\r\n        },\r\n      ]}\r\n      layout={{\r\n        title: `<b>${props.title}</b>`,\r\n        width: size.width * 0.37,\r\n        showlegend: true,\r\n        legend: {\r\n          orientation: \"h\",\r\n          xanchor: \"center\",\r\n          font: {\r\n            family: \"sans-serif\",\r\n            size: 12,\r\n            color: \"#000\",\r\n          },\r\n        },\r\n        margin: {\r\n          l: 60,\r\n          b: 0,\r\n          r: 30,\r\n          t: 30,\r\n          pad: 5,\r\n        },\r\n        xaxis: {\r\n          title: \"Gap Event (Sequence)\",\r\n          titlefont: {\r\n            size: 12,\r\n            color: \"#212529\",\r\n          },\r\n          showgrid: true,\r\n          zerolinecolor: \"#969696\",\r\n          zerolinewidth: 1,\r\n        },\r\n        yaxis: {\r\n          title: \"Gap Duration (seconds)\",\r\n          titlefont: {\r\n            size: 12,\r\n            color: \"#212529\",\r\n          },\r\n          showgrid: true,\r\n          zerolinecolor: \"#969696\",\r\n          zerolinewidth: 1,\r\n        },\r\n      }}\r\n      config={{ displayModeBar: false }}\r\n    />\r\n  );\r\n}\r\n\r\nexport default LineChartSection;\r\n","import React from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\n\r\nimport { useWindowSize } from \"../../../utils/util\";\r\n\r\nfunction HistogramChartSection(props: any) {\r\n  const size = useWindowSize();\r\n  \r\n  return (\r\n    <Plot\r\n      data={[\r\n        {\r\n          x: props.xTraces,\r\n          name: \"Duration\",\r\n          type: \"histogram\",\r\n        },\r\n      ]}\r\n      layout={{\r\n        title: `<b>${props.title.split('_').join(' ')}</b>`,\r\n        width: size.width * 0.37,\r\n        showlegend: true,\r\n        legend: {\r\n          orientation: \"h\",\r\n          xanchor: \"center\",\r\n          font: {\r\n            family: \"sans-serif\",\r\n            size: 12,\r\n            color: \"#000\",\r\n          },\r\n        },\r\n        margin: {\r\n          l: 60,\r\n          b: 0,\r\n          r: 30,\r\n          t: 30,\r\n          pad: 5,\r\n        },\r\n        xaxis: {\r\n          title: \"Duration\",\r\n          titlefont: {\r\n            size: 12,\r\n            color: \"#212529\",\r\n          },\r\n          showgrid: true,\r\n          zerolinecolor: \"#969696\",\r\n          zerolinewidth: 1,\r\n        },\r\n        yaxis: {\r\n          title: \"Occurances\",\r\n          titlefont: {\r\n            size: 12,\r\n            color: \"#212529\",\r\n          },\r\n          showgrid: true,\r\n          zerolinecolor: \"#969696\",\r\n          zerolinewidth: 1,\r\n        },\r\n      }}\r\n      config={{ displayModeBar: false }}\r\n    />\r\n  );\r\n}\r\n\r\nexport default HistogramChartSection;\r\n","import React from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\n\r\nimport { useWindowSize } from \"../../../utils/util\";\r\n\r\nfunction BoxChartSection(props: any) {\r\n  const size = useWindowSize();\r\n\r\n  return (\r\n    <Plot\r\n      data={[\r\n        {\r\n          y: props.xTraces,\r\n          name: \"\",\r\n          type: \"box\",\r\n        },\r\n      ]}\r\n      layout={{\r\n        title: `<b>${props.title.split(\" \")[0]} Statistics</b>`,\r\n        width: size.width * 0.37,\r\n        margin: {\r\n          l: 60,\r\n          b: 0,\r\n          r: 30,\r\n          t: 30,\r\n          pad: 5,\r\n        },\r\n        yaxis: {\r\n          title: \"Duration\",\r\n          titlefont: {\r\n            size: 12,\r\n            color: \"#212529\",\r\n          },\r\n          showgrid: true,\r\n          zerolinecolor: \"#969696\",\r\n          zerolinewidth: 1,\r\n        },\r\n      }}\r\n      config={{ displayModeBar: false }}\r\n    />\r\n  );\r\n}\r\n\r\nexport default BoxChartSection;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\nimport { Grid, Button, Box } from \"@material-ui/core\";\r\n\r\nimport { getPlotItems } from \"../../../API\";\r\n\r\nconst INIT_SOURCE = {\r\n  heatmap: {},\r\n  intrpl: {},\r\n};\r\n\r\nfunction TerrestrialHeatMap() {\r\n  const [mode, setMode] = useState(\"heatmap\");\r\n  const [source, setSource] = useState(INIT_SOURCE as any);\r\n\r\n  useEffect(() => {\r\n    getPlotItems()\r\n      .then((res: any) => {\r\n        setSource(res.data);\r\n      })\r\n      .catch(() => setSource(INIT_SOURCE));\r\n  }, []);\r\n  return (\r\n    <>\r\n      <Grid container justify=\"center\" alignItems=\"center\">\r\n        {mode === \"heatmap\" ? (\r\n          <>\r\n            <Grid item md={6}>\r\n              <Plot\r\n                data={[\r\n                  {\r\n                    x: source.heatmap.x,\r\n                    y: source.heatmap.y,\r\n                    z: source.heatmap.z,\r\n                    type: \"heatmap\",\r\n                  },\r\n                ]}\r\n                layout={{\r\n                  width: 500,\r\n                  height: 500,\r\n                  title: \"\",\r\n                  xaxis: {\r\n                    title: \"Longitude (deg)\",\r\n                    zeroline: false,\r\n                    range: [-180, 180],\r\n                    tickmode: \"linear\",\r\n                    tick0: -180,\r\n                    dtick: 40,\r\n                  },\r\n                  yaxis: {\r\n                    title: \"Latitude (deg)\",\r\n                    zeroline: false,\r\n                    range: [-90, 90],\r\n                    tickmode: \"linear\",\r\n                    tick0: -90,\r\n                    dtick: 30,\r\n                  },\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid item md={6}>\r\n              <Plot\r\n                data={[\r\n                  {\r\n                    lat: source.heatmap.x,\r\n                    lon: source.heatmap.y,\r\n                    z: source.heatmap.z,\r\n                    type: \"densitymapbox\",\r\n                  },\r\n                ]}\r\n                layout={{\r\n                  width: 500,\r\n                  height: 500,\r\n                  title: \"\",\r\n                  mapbox: {\r\n                    center: { lon: 60, lat: 30 },\r\n                    style: \"outdoors\",\r\n                    zoom: 2,\r\n                  },\r\n                }}\r\n                config={{\r\n                  mapboxAccessToken:\r\n                    \"pk.eyJ1IjoicmxhZm9udGFpbmUiLCJhIjoiY2tpMG82ZjNiMHZ3NjJxcDV1cjAzaTJ4eCJ9.VJSnQNJxiJK-jixU6KaFYQ\",\r\n                }}\r\n              />\r\n            </Grid>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <Grid item md={6}>\r\n              <Plot\r\n                data={[\r\n                  {\r\n                    x: source.intrpl.x,\r\n                    y: source.intrpl.y,\r\n                    z: source.intrpl.z,\r\n                    type: \"heatmap\",\r\n                  },\r\n                ]}\r\n                layout={{\r\n                  width: 500,\r\n                  height: 500,\r\n                  title: \"\",\r\n                  xaxis: {\r\n                    title: \"Longitude (deg)\",\r\n                    zeroline: false,\r\n                    range: [-180, 180],\r\n                    tickmode: \"linear\",\r\n                    tick0: -180,\r\n                    dtick: 40,\r\n                  },\r\n                  yaxis: {\r\n                    title: \"Latitude (deg)\",\r\n                    zeroline: false,\r\n                    range: [-90, 90],\r\n                    tickmode: \"linear\",\r\n                    tick0: -90,\r\n                    dtick: 30,\r\n                  },\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid item md={6}>\r\n              <Plot\r\n                data={[\r\n                  {\r\n                    lat: source.intrpl.x,\r\n                    lon: source.intrpl.x,\r\n                    z: source.intrpl.z,\r\n                    type: \"densitymapbox\",\r\n                    hoverinfo: \"skip\",\r\n                  },\r\n                ]}\r\n                layout={{\r\n                  width: 500,\r\n                  height: 500,\r\n                  title: \"\",\r\n                  mapbox: {\r\n                    center: { lon: 60, lat: 30 },\r\n                    style: \"outdoors\",\r\n                    zoom: 2,\r\n                  },\r\n                }}\r\n                config={{\r\n                  mapboxAccessToken:\r\n                    \"pk.eyJ1IjoicmxhZm9udGFpbmUiLCJhIjoiY2tpMG82ZjNiMHZ3NjJxcDV1cjAzaTJ4eCJ9.VJSnQNJxiJK-jixU6KaFYQ\",\r\n                }}\r\n              />\r\n            </Grid>\r\n          </>\r\n        )}\r\n      </Grid>\r\n      <Grid item md={6}>\r\n        <Box\r\n          borderColor=\"primary.main\"\r\n          border={2}\r\n          borderRadius={5}\r\n          padding={2}\r\n          style={{ zIndex: 1000 }}\r\n        >\r\n          <Button\r\n            name=\"heatmap\"\r\n            variant=\"contained\"\r\n            size=\"small\"\r\n            color=\"primary\"\r\n            onClick={(e) => setMode(e.currentTarget.name)}\r\n            style={{ width: \"48%\", marginRight: \"4%\" }}\r\n          >\r\n            {\"Non-Interpolated\"}\r\n          </Button>\r\n          <Button\r\n            name=\"intrpl\"\r\n            variant=\"contained\"\r\n            size=\"small\"\r\n            color=\"primary\"\r\n            onClick={(e) => setMode(e.currentTarget.name)}\r\n            style={{ width: \"48%\" }}\r\n          >\r\n            {\"Interpolated\"}\r\n          </Button>\r\n        </Box>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TerrestrialHeatMap;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\nimport { useWindowSize } from \"../../../../utils/util\";\r\n\r\nfunction TwoViewSection(props: any) {\r\n  const [checked, setChecked] = useState(props.checked);\r\n  const [config, setConfig] = useState([]);\r\n  const size = useWindowSize();\r\n  const plot_rows = props.plot_rows;\r\n  const surface_rows = props.surface_rows;\r\n  \r\n  useEffect(() => {\r\n    setChecked(props.checked);\r\n  }, [props.checked]);\r\n\r\n  const unpack = (rows: Array<any>, key: any) => {\r\n    return rows.map(function (row: any) {\r\n      return row[key];\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    let configData: any = [];\r\n    const inclination = parseInt(props.inc);\r\n    const new_plot_rows = plot_rows.filter(\r\n      (row: any) => row.inclination === inclination\r\n    );\r\n    const new_surface_rows = surface_rows.filter(\r\n      (row: any) => row.inclination === inclination\r\n    );\r\n    if (checked.show_surface === true && checked.show_scatter === true) {\r\n      configData = [\r\n        {\r\n          x: unpack(new_plot_rows, \"altitude\"),\r\n          y: unpack(new_plot_rows, \"value\"),\r\n          name: \"Model data\",\r\n          mode: \"markers\",\r\n          type: \"scatter\",\r\n          color: \"rgb(23, 190, 207)\",\r\n        },\r\n        {\r\n          x: unpack(new_surface_rows, \"altitude\"),\r\n          y: unpack(new_surface_rows, \"value\"),\r\n          name: \"Model curve\",\r\n          mode: \"lines\",\r\n          line: {\r\n            color: \"rgb(252, 154, 7)\",\r\n          },\r\n        },\r\n        {\r\n          x: [props.dot.x],\r\n          y: [props.dot.y],\r\n          name: \"User\",\r\n          mode: \"markers\",\r\n          type: \"scatter\",\r\n          marker: {\r\n            color: \"red\",\r\n            size: 10,\r\n          },\r\n        },\r\n      ];\r\n    } else if (\r\n      checked.show_surface === false &&\r\n      checked.show_scatter === true\r\n    ) {\r\n      configData = [\r\n        {\r\n          x: unpack(new_plot_rows, \"altitude\"),\r\n          y: unpack(new_plot_rows, \"value\"),\r\n          name: \"Model data\",\r\n          mode: \"markers\",\r\n          type: \"scatter\",\r\n          color: \"rgb(23, 190, 207)\",\r\n        },\r\n        {\r\n          x: [],\r\n          y: [],\r\n          mode: \"markers\",\r\n          type: \"scatter\",\r\n        },\r\n        {\r\n          x: [props.dot.x],\r\n          y: [props.dot.y],\r\n          name: \"User\",\r\n          mode: \"markers\",\r\n          type: \"scatter\",\r\n          marker: {\r\n            color: \"red\",\r\n            size: 10,\r\n          },\r\n        },\r\n      ];\r\n    } else if (\r\n      checked.show_surface === true &&\r\n      checked.show_scatter === false\r\n    ) {\r\n      configData = [\r\n        {\r\n          x: unpack(new_surface_rows, \"altitude\"),\r\n          y: unpack(new_surface_rows, \"value\"),\r\n          name: \"Model curve\",\r\n          mode: \"lines\",\r\n          line: {\r\n            color: \"rgb(252, 154, 7)\",\r\n          },\r\n        },\r\n        {\r\n          x: [],\r\n          y: [],\r\n          mode: \"markers\",\r\n          type: \"scatter\",\r\n        },\r\n        {\r\n          x: [props.dot.x],\r\n          y: [props.dot.y],\r\n          name: \"User\",\r\n          mode: \"markers\",\r\n          type: \"scatter\",\r\n          marker: {\r\n            color: \"red\",\r\n            size: 10,\r\n          },\r\n        },\r\n      ];\r\n    } else if (\r\n      checked.show_surface === false &&\r\n      checked.show_scatter === false\r\n    ) {\r\n      configData = [\r\n        {\r\n          x: [],\r\n          y: [],\r\n          mode: \"lines\",\r\n        },\r\n        {\r\n          x: [],\r\n          y: [],\r\n          mode: \"markers\",\r\n          type: \"scatter\",\r\n        },\r\n        {\r\n          x: [props.dot.x],\r\n          y: [props.dot.y],\r\n          name: \"User\",\r\n          mode: \"markers\",\r\n          type: \"scatter\",\r\n          marker: {\r\n            color: \"red\",\r\n            size: 10,\r\n          },\r\n        },\r\n      ];\r\n    }\r\n\r\n    setConfig(configData);\r\n  }, [checked, plot_rows, surface_rows, props.inc]);\r\n\r\n  return (\r\n    <Plot\r\n      data={config}\r\n      layout={{\r\n        autosize: true,\r\n        showlegend: false,\r\n        hovermode: \"closest\",\r\n        width: size.width * 0.3,\r\n        height: size.width * 0.08,\r\n        margin: {\r\n          l: 60,\r\n          r: 15,\r\n          b: 35,\r\n          t: 15,\r\n        },\r\n        xaxis: {\r\n          title: `Altitude (km), Inclination=${props.inc} deg`,\r\n          type: \"linear\",\r\n          zeroline: false,\r\n        },\r\n        yaxis: {\r\n          title: props.yAxisLabel,\r\n          type: \"linear\",\r\n          zeroline: false,\r\n        },\r\n      }}\r\n      onHover={(e: any) => (e.event.target.style.cursor = \"pointer\")}\r\n      onUnhover={(e: any) => (e.event.target.style.cursor = \"crosshair\")}\r\n      onClick={(e) => props.onClick(e)}\r\n      onDoubleClick={() => props.onClick()}\r\n    />\r\n  );\r\n}\r\n\r\nexport default TwoViewSection;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\nimport { useWindowSize } from \"../../../../utils/util\";\r\n\r\nfunction ThreeViewSection(props: any) {\r\n  const [checked, setChecked] = useState(props.checked);\r\n  const [reset, setReset] = useState(false);\r\n  const [config, setConfig] = useState([]);\r\n  const size = useWindowSize();\r\n  const plot_rows = props.plot_rows;\r\n  const surface_rows = props.surface_rows;\r\n\r\n  useEffect(() => {\r\n    setReset(!reset);\r\n  }, [props.reset]);\r\n\r\n  useEffect(() => {\r\n    setChecked(props.checked);\r\n  }, [props.checked]);\r\n\r\n  const unpack = (rows: Array<any>, key: any) => {\r\n    return rows.map(function (row) {\r\n      return row[key];\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    let configData: any = [];\r\n    if (checked.show_surface === true && checked.show_scatter === true) {\r\n      configData = [\r\n        {\r\n          x: unpack(plot_rows, \"altitude\"),\r\n          y: unpack(plot_rows, \"inclination\"),\r\n          z: unpack(plot_rows, \"value\"),\r\n          name: \"Model data\",\r\n          mode: \"markers\",\r\n          type: \"scatter3d\",\r\n          opacity: 1,\r\n          marker: {\r\n            color: \"rgb(23, 190, 207)\",\r\n            size: 2,\r\n          },\r\n        },\r\n        {\r\n          x: unpack(surface_rows, \"altitude\"),\r\n          y: unpack(surface_rows, \"inclination\"),\r\n          z: unpack(surface_rows, \"value\"),\r\n          name: \"Model surface\",\r\n          opacity: 0.3,\r\n          type: \"mesh3d\",\r\n          color: \"rgb(252, 154, 7)\",\r\n        },\r\n        {\r\n          x: [props.alt],\r\n          y: [props.inc],\r\n          z: [props.value],\r\n          name: \"User\",\r\n          mode: \"markers\",\r\n          type: \"scatter3d\",\r\n          opacity: 1,\r\n          marker: {\r\n            color: \"red\",\r\n            size: 5,\r\n          },\r\n        },\r\n      ];\r\n    } else if (\r\n      checked.show_surface === false &&\r\n      checked.show_scatter === true\r\n    ) {\r\n      configData = [\r\n        {\r\n          x: unpack(plot_rows, \"altitude\"),\r\n          y: unpack(plot_rows, \"inclination\"),\r\n          z: unpack(plot_rows, \"value\"),\r\n          name: \"Model data\",\r\n          mode: \"markers\",\r\n          type: \"scatter3d\",\r\n          opacity: 1,\r\n          marker: {\r\n            color: \"rgb(23, 190, 207)\",\r\n            size: 2,\r\n          },\r\n        },\r\n        {\r\n          x: [props.alt],\r\n          y: [props.inc],\r\n          z: [props.value],\r\n          name: \"User\",\r\n          mode: \"markers\",\r\n          type: \"scatter3d\",\r\n          opacity: 1,\r\n          marker: {\r\n            color: \"red\",\r\n            size: 5,\r\n          },\r\n        },\r\n      ];\r\n    } else if (\r\n      checked.show_surface === true &&\r\n      checked.show_scatter === false\r\n    ) {\r\n      configData = [\r\n        {\r\n          x: unpack(surface_rows, \"altitude\"),\r\n          y: unpack(surface_rows, \"inclination\"),\r\n          z: unpack(surface_rows, \"value\"),\r\n          name: \"Model surface\",\r\n          opacity: 0.3,\r\n          type: \"mesh3d\",\r\n          color: \"rgb(252, 154, 7)\",\r\n        },\r\n        {\r\n          x: [props.alt],\r\n          y: [props.inc],\r\n          z: [props.value],\r\n          name: \"User\",\r\n          mode: \"markers\",\r\n          type: \"scatter3d\",\r\n          opacity: 1,\r\n          marker: {\r\n            color: \"red\",\r\n            size: 5,\r\n          },\r\n        },\r\n      ];\r\n    } else if (\r\n      checked.show_surface === false &&\r\n      checked.show_scatter === false\r\n    ) {\r\n      configData = [\r\n        {\r\n          x: [],\r\n          y: [],\r\n          z: [],\r\n          type: \"mesh3d\",\r\n        },\r\n        {\r\n          x: [],\r\n          y: [],\r\n          z: [],\r\n          mode: \"markers\",\r\n          type: \"scatter3d\",\r\n        },\r\n        {\r\n          x: [parseFloat(props.alt)],\r\n          y: [parseFloat(props.inc)],\r\n          z: [parseFloat(props.value)],\r\n          name: \"User\",\r\n          mode: \"markers\",\r\n          type: \"scatter3d\",\r\n          opacity: 1,\r\n          marker: {\r\n            color: \"red\",\r\n            size: 5,\r\n          },\r\n        },\r\n      ];\r\n    }\r\n\r\n    setConfig(configData);\r\n  }, [checked, plot_rows, surface_rows, reset]);\r\n\r\n  return (\r\n    <Plot\r\n      data={config}\r\n      layout={{\r\n        autosize: true,\r\n        width: size.width * 0.3,\r\n        height: size.width * 0.1,\r\n        margin: {\r\n          l: 0,\r\n          r: 0,\r\n          b: 0,\r\n          t: 0,\r\n        },\r\n        scene: {\r\n          aspectratio: {\r\n            x: 0.6,\r\n            y: 0.6,\r\n            z: 0.6,\r\n          },\r\n          camera: {\r\n            center: {\r\n              x: 0,\r\n              y: 0,\r\n              z: 0,\r\n            },\r\n            eye: {\r\n              x: 0.9,\r\n              y: 0.9,\r\n              z: 0.9,\r\n            },\r\n            up: {\r\n              x: 0,\r\n              y: 0,\r\n              z: 1,\r\n            },\r\n          },\r\n          xaxis: {\r\n            title: \"Altitude (km)\",\r\n            type: \"linear\",\r\n            range: [Math.max(...unpack(surface_rows, \"altitude\")), 0],\r\n            zeroline: false,\r\n          },\r\n          yaxis: {\r\n            title: \"Inclination (deg)\",\r\n            type: \"linear\",\r\n            range: [90, 0],\r\n            zeroline: false,\r\n          },\r\n          zaxis: {\r\n            title: props.zAxisLabel,\r\n            type: \"linear\",\r\n            range: [\r\n              Math.min(...unpack(surface_rows, \"value\")),\r\n              Math.max(...unpack(surface_rows, \"value\")),\r\n            ],\r\n            zeroline: false,\r\n          },\r\n        },\r\n        showlegend: false,\r\n      }}\r\n      onClick={(e) => props.onClick(e)}\r\n      onDoubleClick={() => props.onClick()}\r\n    />\r\n  );\r\n}\r\n\r\nexport default ThreeViewSection;\r\n","export const MENU_ITEMS: any = {\r\n  as_needed_handoff: [\r\n    { id: 0, dataset: \"coverage\", name: \"Key Metrics\" },\r\n    { id: 1, dataset: \"coverage\", name: \"Running Average\" },\r\n    { id: 2, dataset: \"coverage_histogram\", name: \"Distribution\" },\r\n    { id: 3, dataset: \"coverage_histogram\", name: \"Statistics Chart\" },\r\n  ],\r\n  maximum_powee_handoff: [\r\n    { id: 0, dataset: \"gap\", name: \"Key Metrics\" },\r\n    { id: 1, dataset: \"gap\", name: \"Running Average\" },\r\n    { id: 2, dataset: \"gap_histogram\", name: \"Distribution\" },\r\n    { id: 3, dataset: \"gap_histogram\", name: \"Statistics Chart\" },\r\n  ],\r\n};\r\n","import React from \"react\";\r\nimport { Menu, MenuItem } from \"@material-ui/core\";\r\nimport * as Constants from \"../../constants\";\r\nimport { grey } from \"@material-ui/core/colors\";\r\n\r\nfunction Selection(props: any) {\r\n  return (\r\n    <Menu\r\n      anchorEl={props.anchorEl}\r\n      keepMounted\r\n      open={Boolean(props.anchorEl)}\r\n      onClose={() => props.onAnchorEl(null)}\r\n    >\r\n      {Constants.MENU_ITEMS[\"as_needed_handoff\"].map((el: any) => (\r\n        <MenuItem\r\n          id={el.id}\r\n          key={el.id}\r\n          onClick={() => props.onSelected(el.id)}\r\n          style={{ backgroundColor: props.selected.includes(el.id) ? grey[300] : \"\" }}\r\n        >\r\n          {el.name}\r\n        </MenuItem>\r\n      ))}\r\n    </Menu>\r\n  );\r\n}\r\n\r\nexport default Selection;\r\n","import React from \"react\";\r\nimport { Grid, IconButton, Divider } from \"@material-ui/core\";\r\nimport DehazeIcon from '@material-ui/icons/Dehaze';\r\nimport Selection from \"../Select\";\r\n\r\nfunction DashAddon(props: any) {\r\n  return (\r\n    <Grid item md={12}>\r\n      <Grid container justify=\"flex-start\" alignItems=\"center\">\r\n        <Grid item style={{ width: \"4%\" }}>\r\n          <IconButton\r\n            id={props.index}\r\n            onClick={(e) => {\r\n              props.onAnchorEl(e.currentTarget);\r\n              props.onIndex(e.currentTarget.id);\r\n            }}\r\n            style={{ zIndex: 1000, backgroundColor: \"#FFF\", padding: 0 }}\r\n          >\r\n            <DehazeIcon />\r\n          </IconButton>\r\n          <Selection\r\n            selected={props.selected}\r\n            anchorEl={props.anchorEl}\r\n            onAnchorEl={(value: any) => props.onAnchorEl(value)}\r\n            onSelected={(value: any) => props.onSelected(value)}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default DashAddon;\r\n","import React from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\n\r\nimport { useWindowSize } from \"../../../../../utils/util\";\r\n\r\nfunction LineChartSection(props: any) {\r\n  const size = useWindowSize();\r\n\r\n  return (\r\n    <Plot\r\n      data={[\r\n        {\r\n          x: props.xTraces,\r\n          y: props.yTraces,\r\n          name: \"Gap Event Duration\",\r\n          type: \"scatter\",\r\n          mode: \"lines+markers\",\r\n          marker: { color: \"red\" },\r\n        },\r\n        {\r\n          x: props.xTraces,\r\n          y: props.avgTraces,\r\n          name: \"Running Average\",\r\n          type: \"scatter\",\r\n          marker: { color: \"blue\" },\r\n        },\r\n      ]}\r\n      layout={{\r\n        title: {\r\n          text: `<b>${props.title}</b>`,\r\n          font: {\r\n            family: \"Roboto\",\r\n            size: 15,\r\n          },\r\n        },\r\n        width: size.width * 0.3,\r\n        height: size.width * 0.11,\r\n        showlegend: true,\r\n        legend: {\r\n          orientation: \"h\",\r\n          xanchor: \"center\",\r\n          font: {\r\n            family: \"sans-serif\",\r\n            size: 12,\r\n            color: \"#000\",\r\n          },\r\n        },\r\n        margin: {\r\n          l: 60,\r\n          b: 0,\r\n          r: 30,\r\n          t: 30,\r\n          pad: 5,\r\n        },\r\n        xaxis: {\r\n          title: \"Gap Event (Sequence)\",\r\n          titlefont: {\r\n            size: 12,\r\n            color: \"#212529\",\r\n          },\r\n          showgrid: true,\r\n          zerolinecolor: \"#969696\",\r\n          zerolinewidth: 1,\r\n        },\r\n        yaxis: {\r\n          title: \"Gap Duration (seconds)\",\r\n          titlefont: {\r\n            size: 12,\r\n            color: \"#212529\",\r\n          },\r\n          showgrid: true,\r\n          zerolinecolor: \"#969696\",\r\n          zerolinewidth: 1,\r\n        },\r\n      }}\r\n      config={{ displayModeBar: false }}\r\n    />\r\n  );\r\n}\r\n\r\nexport default LineChartSection;\r\n","import React from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\n\r\nimport { useWindowSize } from \"../../../../../utils/util\";\r\n\r\nfunction HistogramChartSection(props: any) {\r\n  const size = useWindowSize();\r\n  \r\n  return (\r\n    <Plot\r\n      data={[\r\n        {\r\n          x: props.xTraces,\r\n          name: \"Duration\",\r\n          type: \"histogram\",\r\n        },\r\n      ]}\r\n      layout={{\r\n        title: {\r\n          text: `<b>${props.title.split('_').join(' ')}</b>`,\r\n          font: {\r\n            family: \"Roboto\",\r\n            size: 15,\r\n          },\r\n        },\r\n        width: size.width * 0.3,\r\n        height: size.width * 0.11,\r\n        showlegend: true,\r\n        legend: {\r\n          orientation: \"h\",\r\n          xanchor: \"center\",\r\n          font: {\r\n            family: \"sans-serif\",\r\n            size: 12,\r\n            color: \"#000\",\r\n          },\r\n        },\r\n        margin: {\r\n          l: 60,\r\n          b: 0,\r\n          r: 30,\r\n          t: 30,\r\n          pad: 5,\r\n        },\r\n        xaxis: {\r\n          title: \"Duration\",\r\n          titlefont: {\r\n            size: 12,\r\n            color: \"#212529\",\r\n          },\r\n          showgrid: true,\r\n          zerolinecolor: \"#969696\",\r\n          zerolinewidth: 1,\r\n        },\r\n        yaxis: {\r\n          title: \"Occurances\",\r\n          titlefont: {\r\n            size: 12,\r\n            color: \"#212529\",\r\n          },\r\n          showgrid: true,\r\n          zerolinecolor: \"#969696\",\r\n          zerolinewidth: 1,\r\n        },\r\n      }}\r\n      config={{ displayModeBar: false }}\r\n    />\r\n  );\r\n}\r\n\r\nexport default HistogramChartSection;\r\n","import React from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\n\r\nimport { useWindowSize } from \"../../../../../utils/util\";\r\n\r\nfunction BoxChartSection(props: any) {\r\n  const size = useWindowSize();\r\n\r\n  return (\r\n    <Plot\r\n      data={[\r\n        {\r\n          y: props.xTraces,\r\n          name: \"\",\r\n          type: \"box\",\r\n        },\r\n      ]}\r\n      layout={{\r\n        title: {\r\n          text: `<b>${props.title.split(\" \")[0]} Statistics</b>`,\r\n          font: {\r\n            family: \"Roboto\",\r\n            size: 15,\r\n          },\r\n        },\r\n        width: size.width * 0.3,\r\n        height: size.width * 0.11,\r\n        margin: {\r\n          l: 60,\r\n          b: 0,\r\n          r: 30,\r\n          t: 30,\r\n          pad: 5,\r\n        },\r\n        yaxis: {\r\n          title: \"Duration\",\r\n          titlefont: {\r\n            size: 12,\r\n            color: \"#212529\",\r\n          },\r\n          showgrid: true,\r\n          zerolinecolor: \"#969696\",\r\n          zerolinewidth: 1,\r\n        },\r\n      }}\r\n      config={{ displayModeBar: false }}\r\n    />\r\n  );\r\n}\r\n\r\nexport default BoxChartSection;\r\n","import React from \"react\";\r\nimport {\r\n  Grid,\r\n  Typography,\r\n  Table,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  TableBody,\r\n} from \"@material-ui/core\";\r\n\r\nimport LineChartSection from \"../line-chart-section\";\r\nimport HistogramChartSection from \"../histogram-chart-section\";\r\nimport BoxChartSection from \"../box-chart-section\";\r\nimport { useWindowSize } from \"../../../../../utils/util\";\r\n\r\nfunction createData(name: String, value: String) {\r\n  return { name, value };\r\n}\r\n\r\nconst rows = [\r\n  createData(\"Average (sec)\", \"xx\"),\r\n  createData(\"Time-Averaged Gap\", \"xx\"),\r\n  createData(\"Median (sec)\", \"xx\"),\r\n  createData(\"Maximum (minutes)\", \"xx\"),\r\n  createData(\"Minimum (sec)\", \"xx\"),\r\n  createData(\"Average # Gaps Per Orbit\", \"xx\"),\r\n  createData(\"Average # Gaps Per Day\", \"xx\"),\r\n];\r\n\r\nfunction SelectedChartSection(props: any) {\r\n  const size = useWindowSize();\r\n\r\n  return (\r\n    <>\r\n      {props.id === 0 && (\r\n        <Grid\r\n          container\r\n          justify=\"center\"\r\n          alignItems=\"center\"\r\n          style={{\r\n            height: size.width ? size.width * 0.11 : \"100%\",\r\n            overflow: \"auto\",\r\n          }}\r\n        >\r\n          <Grid item md={10} style={{ textAlign: \"center\" }}>\r\n            <Typography variant=\"h6\">{`Key Metrics`}</Typography>\r\n          </Grid>\r\n          <Grid item md={10}>\r\n            <Table aria-label=\"simple table\" size=\"small\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>{`Gap Statistic`}</TableCell>\r\n                  <TableCell>{`Value`}</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {rows.map((row: any) => (\r\n                  <TableRow key={row.name}>\r\n                    <TableCell component=\"th\" scope=\"row\">\r\n                      {row.name}\r\n                    </TableCell>\r\n                    <TableCell>{row.value}</TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </Grid>\r\n        </Grid>\r\n      )}\r\n      {props.id === 1 && <LineChartSection {...props.data} />}\r\n      {props.id === 2 && <HistogramChartSection {...props.data} />}\r\n      {props.id === 3 && <BoxChartSection {...props.data} />}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SelectedChartSection;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Grid, Card, CardContent } from \"@material-ui/core\";\r\n\r\nimport DashAddon from \"../../../../components/Button/DashAddon\";\r\nimport SelectedChartSection from \"./selected-chart-section\";\r\nimport * as Constants from \"../../../../constants\";\r\nimport useStyles from \"../../../../utils/styles\";\r\n\r\nfunction ChartsLibsSection(props: any) {\r\n  const [selected, setSelected] = useState([1, 2, 3] as any);\r\n  const [anchorEl, setAnchorEl] = useState(null as any);\r\n  const [index, setIndex] = useState(0);\r\n  const classes = useStyles();\r\n\r\n  const handleSelected = (id: any) => {\r\n    setSelected(\r\n      selected.map((item: any, idx: any) => {\r\n        if (idx === Number(index)) item = id;\r\n        return item;\r\n      })\r\n    );\r\n    setAnchorEl(null);\r\n  };\r\n  console.log(selected);\r\n  return (\r\n    <>\r\n      {selected.map((item: any, idx: number) => {\r\n        let dset = Constants.MENU_ITEMS[props.dataSet][item].dataset;\r\n        return (\r\n          <Grid\r\n            item\r\n            md={6}\r\n            key={item}\r\n            style={{\r\n              paddingLeft: \"2rem\",\r\n              paddingRight: idx % 2 === 0 ? \"2rem\" : \"0.8rem\",\r\n            }}\r\n          >\r\n            <Card className={classes.dashCard}>\r\n              <CardContent>\r\n                <DashAddon\r\n                  type={1}\r\n                  selected={selected}\r\n                  anchorEl={anchorEl}\r\n                  index={idx}\r\n                  onIndex={(value: any) => setIndex(value)}\r\n                  onAnchorEl={(value: any) => setAnchorEl(value)}\r\n                  onSelected={(value: any) => handleSelected(value)}\r\n                />\r\n                <Grid item md={12}>\r\n                  {props.traces[dset] &&\r\n                    Object.keys(props.traces[dset]).length > 0 && (\r\n                      <SelectedChartSection\r\n                        id={item}\r\n                        data={props.traces[dset]}\r\n                      />\r\n                    )}\r\n                </Grid>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n        );\r\n      })}\r\n      {selected.length % 2 === 0 && <Grid item md={6} />}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ChartsLibsSection;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Grid,\r\n  Button,\r\n  Select,\r\n  FormControl,\r\n  InputLabel,\r\n  MenuItem,\r\n} from \"@material-ui/core\";\r\nimport { ToggleButton, ToggleButtonGroup } from \"@material-ui/lab\";\r\nimport { grey } from \"@material-ui/core/colors\";\r\nimport useStyles from \"../../../../utils/styles\";\r\n\r\nfunction HeaderSection(props: any) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Grid item md={12}>\r\n      <Grid\r\n        container\r\n        justify=\"flex-start\"\r\n        alignItems=\"center\"\r\n        spacing={1}\r\n        style={{ backgroundColor: grey[300], minHeight: \"6vh\" }}\r\n      >\r\n        <Grid item md={3} style={{ marginLeft: 15 }}>\r\n          <ToggleButtonGroup\r\n            value={props.dataSet}\r\n            onChange={(e) => props.onClick(e)}\r\n          >\r\n            <ToggleButton\r\n              id=\"as_needed_handoff\"\r\n              name=\"coverage\"\r\n              value=\"as_needed_handoff\"\r\n              size=\"small\"\r\n            >\r\n              {`RF Coverage (%)`}\r\n            </ToggleButton>\r\n            <ToggleButton\r\n              id=\"maximum_powee_handoff\"\r\n              name=\"gap\"\r\n              value=\"maximum_powee_handoff\"\r\n              size=\"small\"\r\n            >\r\n              {`No Coverage (%)`}\r\n            </ToggleButton>\r\n          </ToggleButtonGroup>\r\n        </Grid>\r\n        <Grid item md={2}>\r\n          <FormControl\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            className={classes.formControl}\r\n            fullWidth\r\n          >\r\n            <InputLabel id=\"demo-simple-select-outlined-label\">{`System`}</InputLabel>\r\n            <Select\r\n              labelId=\"demo-simple-select-outlined-label\"\r\n              id=\"demo-simple-select-outlined\"\r\n              value={props.system}\r\n              onChange={(e) => props.onSystem(e.target.value)}\r\n              label=\"System\"\r\n            >\r\n              <MenuItem value=\"\" disabled>\r\n                <em>{`None`}</em>\r\n              </MenuItem>\r\n              {props.systems.map((item: any) => (\r\n                <MenuItem key={item.system_name} value={item.system_id}>\r\n                  {item.system_name}\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n        <Grid item md={2}>\r\n          <FormControl\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            className={classes.formControl}\r\n            fullWidth\r\n          >\r\n            <InputLabel id=\"demo-simple-select-outlined-label\">{`Version`}</InputLabel>\r\n            <Select\r\n              labelId=\"demo-simple-select-outlined-label\"\r\n              id=\"demo-simple-select-outlined\"\r\n              value={props.version}\r\n              onChange={(e) => props.onVersion(e.target.value)}\r\n              label=\"Version\"\r\n            >\r\n              <MenuItem value=\"\" disabled>\r\n                <em>{`None`}</em>\r\n              </MenuItem>\r\n              {props.versions.map((item: any) => (\r\n                <MenuItem\r\n                  key={`version_${item.versions}`}\r\n                  value={item.versions}\r\n                >\r\n                  {item.versions}\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n        <Grid item md={5} />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default HeaderSection;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Grid,\r\n  Button,\r\n  Box,\r\n  Typography,\r\n  Tooltip,\r\n  IconButton,\r\n  Divider,\r\n} from \"@material-ui/core\";\r\nimport { grey } from \"@material-ui/core/colors\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport ExpandLessIcon from \"@material-ui/icons/ExpandLess\";\r\n\r\nimport useStyles from \"../../utils/styles\";\r\n\r\nfunction OptionAddon(props: any) {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <>\r\n      <Typography\r\n        component=\"p\"\r\n        style={{ textAlign: \"end\", position: \"absolute\", right: 10, top: 10 }}\r\n      >\r\n        <IconButton\r\n          size=\"small\"\r\n          onClick={() => setIsOpen(!isOpen)}\r\n          className=\"mt-2 mb-2\"\r\n          style={{ fontSize: 11 }}\r\n        >\r\n          {`Graph Options`}\r\n          {isOpen ? <ExpandLessIcon /> : <ExpandMoreIcon />}\r\n        </IconButton>\r\n      </Typography>\r\n      {isOpen && (\r\n        <Grid container justify=\"center\" alignItems=\"center\">\r\n          <Grid item md={11} style={{ marginRight: 5, marginTop: 10 }}>\r\n            <Box\r\n              borderColor=\"primary.main\"\r\n              border={2}\r\n              borderRadius={5}\r\n              padding={2}\r\n            >\r\n              <Grid container justify=\"center\" alignItems=\"center\" spacing={2}>\r\n                <Grid item md={3}>\r\n                  <Grid\r\n                    container\r\n                    justify=\"flex-start\"\r\n                    alignItems=\"center\"\r\n                    spacing={2}\r\n                  >\r\n                    <Grid item md={5}>\r\n                      <Button\r\n                        id={props.type}\r\n                        name=\"2d_view\"\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        onClick={(e) => props.onViewMethod(e)}\r\n                        fullWidth\r\n                      >\r\n                        {\"2D\"}\r\n                      </Button>\r\n                    </Grid>\r\n                    <Grid item md={7} />\r\n                    <Grid item md={5}>\r\n                      <Button\r\n                        name=\"3d_view\"\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        onClick={(e) => props.onViewMethod(e)}\r\n                        fullWidth\r\n                      >\r\n                        {\"3D\"}\r\n                      </Button>\r\n                    </Grid>\r\n                    <Grid item md={7} />\r\n                  </Grid>\r\n                </Grid>\r\n                <Divider orientation=\"vertical\" flexItem />\r\n                <Grid item md={5}>\r\n                  <Typography>\r\n                    {`Inclination selection for 2D will go here..`}\r\n                  </Typography>\r\n                </Grid>\r\n                <Divider orientation=\"vertical\" flexItem />\r\n                <Grid item md={3}>\r\n                  <Tooltip\r\n                    title={\r\n                      <Typography\r\n                        gutterBottom\r\n                        component=\"p\"\r\n                        variant=\"body1\"\r\n                        dangerouslySetInnerHTML={{\r\n                          __html: \"Reset 3D plot\",\r\n                        }}\r\n                      />\r\n                    }\r\n                    placement=\"top-start\"\r\n                    classes={{ tooltip: classes.tooltip }}\r\n                  >\r\n                    <span>\r\n                      <Button\r\n                        id={props.type}\r\n                        name=\"Reset\"\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        disabled={props.viewMethod === \"2d_view\" ? true : false}\r\n                        onClick={() => props.resetPlot()}\r\n                        fullWidth\r\n                      >\r\n                        {\"Reset\"}\r\n                      </Button>\r\n                    </span>\r\n                  </Tooltip>\r\n                </Grid>\r\n              </Grid>\r\n            </Box>\r\n          </Grid>\r\n        </Grid>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default OptionAddon;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Grid, Typography, Card, CardContent } from \"@material-ui/core\";\r\nimport TwoViewSection from \"./two-view-section\";\r\nimport ThreeViewSection from \"./three-view-section\";\r\nimport ChartsLibsSection from \"./charts-libs-section\";\r\nimport HeaderSection from \"./header-section\";\r\nimport OptionAddon from \"../../../components/Button/OptionAddon\";\r\nimport useStyles from \"../../../utils/styles\";\r\nimport {\r\n  getItems,\r\n  getSystems,\r\n  getSystemVersion,\r\n  getFileId,\r\n} from \"../../../API\";\r\n\r\nconst INIT_CHECK_STATUS = {\r\n  show_surface: true,\r\n  show_scatter: true,\r\n};\r\n\r\nconst INIT_FILE_ID = [{ id: 1620 }, { id: 1729 }];\r\n\r\nfunction AnalyzeRegressionSection(props: any) {\r\n  const [viewMethod, setViewMethod] = useState(\"2d_view\");\r\n  const [dataSet, setDataSet] = useState(\"as_needed_handoff\" as any);\r\n  const [systems, setSystems] = useState([] as any);\r\n  const [versions, setVersions] = useState([] as any);\r\n  const [dot, setDot] = useState({ x: props.alt, y: props.value } as any);\r\n  const [fileId, setFileId] = useState(INIT_FILE_ID);\r\n  const [checked, setChecked] = useState(INIT_CHECK_STATUS);\r\n  const [traces, setTraces] = useState({} as any);\r\n  const [reset, setReset] = useState(false);\r\n  const [selected, setSelected] = useState(false);\r\n  const plot_rows = props.data.plot_value;\r\n  const surface_rows: Array<any> = [];\r\n  const zAxisLabel = props.data.label;\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    if (fileId.length > 0)\r\n      getItems({\r\n        dataType: props.dataType,\r\n        fileId: fileId,\r\n        version: props.version,\r\n      })\r\n        .then((res) => {\r\n          Object.keys(res.data).map((el) => {\r\n            let ctype: String = res.data[el][\"type\"];\r\n            let gaps: Array<any> = [];\r\n            let durations: Array<any> = [];\r\n            let avgs: Array<any> = [];\r\n\r\n            // Detect chart type and set Traces\r\n            if (ctype === \"line\") {\r\n              res.data[el][\"data\"].map((item: Array<any>, idx: number) => {\r\n                gaps.push(idx + 1);\r\n                durations.push(item[0]);\r\n                avgs.push(item[1]);\r\n              });\r\n\r\n              setTraces((prevState: any) => ({\r\n                ...prevState,\r\n                [el]: {\r\n                  xTraces: gaps,\r\n                  yTraces: durations,\r\n                  avgTraces: avgs,\r\n                  type: ctype,\r\n                  title: res.data[el][\"title\"],\r\n                },\r\n              }));\r\n            } else if (ctype === \"histogram\") {\r\n              setTraces((prevState: any) => ({\r\n                ...prevState,\r\n                [el]: {\r\n                  xTraces: res.data[el][\"data\"],\r\n                  type: ctype,\r\n                  title: res.data[el][\"title\"],\r\n                },\r\n              }));\r\n            }\r\n          });\r\n        })\r\n        .catch(() => {\r\n          setTraces({});\r\n        });\r\n  }, [props.dataType, props.version, fileId]);\r\n\r\n  useEffect(() => {\r\n    getSystems()\r\n      .then((res: any) => setSystems(res.data))\r\n      .catch((err: any) => setSystems([]));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (props.system !== \"\") {\r\n      getSystemVersion({ system: props.system })\r\n        .then((res: any) => setVersions(res.data))\r\n        .catch((err: any) => setVersions([]));\r\n    }\r\n  }, [props.system]);\r\n\r\n  useEffect(() => {\r\n    setDot({\r\n      x: props.data.plot_value[0].altitude,\r\n      y: props.data.plot_value[0].value,\r\n    });\r\n  }, [props.data]);\r\n\r\n  const handleCheck = (event: any) => {\r\n    const { name, checked } = event.currentTarget;\r\n    setChecked((prevState) => ({ ...prevState, [name]: checked }));\r\n  };\r\n\r\n  const handleDataSetClick = (event: any) => {\r\n    event.preventDefault();\r\n    const { id, name } = event.currentTarget;\r\n\r\n    setDataSet(id);\r\n    props.onDataType(name);\r\n  };\r\n\r\n  const handleClick = (event: any) => {\r\n    if (event) {\r\n      const params = {\r\n        user_altitude: event.points[0].x,\r\n        user_inclination: props.inc,\r\n        system: props.system,\r\n        version: props.version,\r\n      };\r\n\r\n      setDot({ x: event.points[0].x, y: event.points[0].y });\r\n      getFileId(params)\r\n        .then((res: any) => setFileId(res.data))\r\n        .catch((err: any) => setFileId([]));\r\n    }\r\n    setSelected(true);\r\n  };\r\n  \r\n  return (\r\n    <Grid container justify=\"center\" alignItems=\"flex-start\" spacing={2}>\r\n      <HeaderSection\r\n        system={props.system}\r\n        systems={systems}\r\n        version={props.version}\r\n        versions={versions}\r\n        dataSet={dataSet}\r\n        onSystem={(value: any) => props.onSystem(value)}\r\n        onVersion={(value: any) => props.onVersion(value)}\r\n        onClick={handleDataSetClick}\r\n      />\r\n      <Grid item md={6} style={{ paddingLeft: \"2rem\" }}>\r\n        <Card className={classes.dashCard}>\r\n          <CardContent>\r\n            <Grid container justify=\"center\" spacing={2}>\r\n              <Grid item md={12} style={{ textAlign: \"center\", position: \"relative\"}}>\r\n                <Typography style={{fontSize: 15, fontWeight: \"bold\"}}>\r\n                  {dataSet === \"as_needed_handoff\"\r\n                    ? `RF Coverage (%) vs. User Inclination`\r\n                    : `No Coverage (%) vs. User Inclination`}\r\n                </Typography>\r\n                <OptionAddon\r\n                  checked={checked}\r\n                  viewMethod={viewMethod}\r\n                  onChecked={handleCheck}\r\n                  resetPlot={() => setReset(!reset)}\r\n                  onViewMethod={(e: any) => setViewMethod(e.currentTarget.name)}\r\n                />\r\n              </Grid>\r\n              {viewMethod === \"3d_view\" ? (\r\n                <Grid item md={12}>\r\n                  <ThreeViewSection\r\n                    data={props.data}\r\n                    equation={props.equation}\r\n                    maxAltitude={props.maxAltitude}\r\n                    alt={props.alt}\r\n                    inc={props.inc}\r\n                    value={props.value}\r\n                    reset={reset}\r\n                    isLegend={false}\r\n                    isSub={true}\r\n                    plot_rows={plot_rows}\r\n                    surface_rows={surface_rows}\r\n                    zAxisLabel={zAxisLabel}\r\n                    checked={checked}\r\n                    onClick={handleClick}\r\n                  />\r\n                </Grid>\r\n              ) : (\r\n                <Grid item md={12}>\r\n                  <TwoViewSection\r\n                    data={props.data}\r\n                    equation={props.equation}\r\n                    maxAltitude={props.maxAltitude}\r\n                    alt={props.alt}\r\n                    inc={props.inc}\r\n                    value={props.value}\r\n                    isLegend={false}\r\n                    isSub={true}\r\n                    plot_rows={plot_rows}\r\n                    surface_rows={surface_rows}\r\n                    yAxisLabel={zAxisLabel}\r\n                    dot={dot}\r\n                    checked={checked}\r\n                    onClick={handleClick}\r\n                  />\r\n                </Grid>\r\n              )}\r\n            </Grid>\r\n          </CardContent>\r\n        </Card>\r\n      </Grid>\r\n      {selected && <></>}\r\n      {fileId.length === 0 && <Grid item md={6} />}\r\n      {Object.keys(traces).length > 0 && (\r\n        <ChartsLibsSection traces={traces} dataSet={dataSet} />\r\n      )}\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default AnalyzeRegressionSection;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport {\r\n  Grid,\r\n  CssBaseline,\r\n  Slide,\r\n  Typography,\r\n  IconButton,\r\n  Dialog,\r\n  DialogTitle as MuiDialogTitle,\r\n  DialogContent,\r\n} from \"@material-ui/core\";\r\nimport { TransitionProps } from \"@material-ui/core/transitions\";\r\nimport { Close as CloseIcon } from \"@material-ui/icons\";\r\n\r\nimport { getCartItems } from \"../../API\";\r\nimport useStyles from \"../../utils/styles\";\r\nimport AnalyzeRegressionSection from \"./analyze-regression-section\";\r\n\r\nconst INIT_PARAMS = {\r\n  altitude: 300,\r\n  availabilityThreshold: 0.999,\r\n  dataVolumeNeed: 0.1,\r\n  gapThreshold: 6,\r\n  inclination: 30,\r\n  latitude: 30,\r\n  launchYear: 2030,\r\n  longitude: 30,\r\n  navAccuracyNeed: 20,\r\n  powerAmplifier: 1,\r\n  value: 100,\r\n};\r\n\r\nconst Transition = React.forwardRef(function Transition(\r\n  props: TransitionProps & { children?: React.ReactElement<any, any> },\r\n  ref: React.Ref<Function>\r\n) {\r\n  return <Slide direction=\"left\" ref={ref} {...props} />;\r\n});\r\n\r\nfunction CartPanel(props: any) {\r\n  const [source, setSource] = useState({} as any);\r\n  const [system, setSystem] = useState(5 as any);\r\n  const [version, setVersion] = useState(3 as any);\r\n  const [dataType, setDataType] = useState(\"coverage\" as any);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [terrestrial, setTerrestrial] = useState({});\r\n  const [maxAltitude, setMaxAltitude] = useState(0);\r\n  const [coefficients, setCoefficients] = useState({} as any);\r\n  const [text, setText] = useState(\"\");\r\n  const deepDive = \"system1/coverage\";\r\n  const metric = deepDive.split(\"/\")[1];\r\n  const missionType = \"orbital\";\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    setText(\"\");\r\n    getCartItems({\r\n      type: missionType,\r\n      system: system,\r\n      version: version,\r\n      dataType,\r\n    })\r\n      .then((res: any) => {\r\n        setTerrestrial(res.data.terrestrial);\r\n        setSource(res.data.data.data);\r\n        setMaxAltitude(res.data.data.maxAltitude);\r\n        setCoefficients(res.data.data.coefficients);\r\n        setText(res.data.data.text);\r\n\r\n        // FIXME: there is no real data for it.\r\n        //\r\n        // setText(\r\n        //   props.equationsTex[system.replace(\" \", \"_\").toLowerCase()][metric](\r\n        //     data[\"coefficients\"][metric]\r\n        //   )\r\n        // );\r\n      })\r\n      .then(() => {\r\n        setIsLoading(false);\r\n      });\r\n  }, [system, version, dataType]);\r\n\r\n  const equation = (inc: any, alt: any, metric: string) => {\r\n    // FIXME: activate in integration of cart.\r\n    //\r\n    // const altitude = parseFloat(alt);\r\n    // const inclination = parseFloat(inc);\r\n\r\n    // const coefs = coefficients[metric];\r\n    // const eqn = props.equations[system.replace(\" \", \"_\").toLowerCase()][metric];\r\n\r\n    // return eqn(coefs, altitude, inclination);\r\n    return inc;\r\n  };\r\n  \r\n  return (\r\n    <Dialog\r\n      open={props.isOpen}\r\n      TransitionComponent={Transition}\r\n      onClose={() => props.onClose()}\r\n      classes={{ paper: classes.dashDialogDeep }}\r\n    >\r\n      <CssBaseline />\r\n      <MuiDialogTitle>\r\n        <Typography component=\"strong\" variant=\"h6\">\r\n          {\"Cart Integration Panel\"}\r\n        </Typography>\r\n        <IconButton\r\n          aria-label=\"Close\"\r\n          className={classes.dialogCloseBtn}\r\n          onClick={() => props.onClose()}\r\n        >\r\n          <CloseIcon />\r\n        </IconButton>\r\n      </MuiDialogTitle>\r\n      <DialogContent\r\n        dividers={true}\r\n        style={{ paddingRight: 0, paddingLeft: 0, overflowX: \"hidden\" }}\r\n      >\r\n        <Grid container justify=\"center\" alignItems=\"center\">\r\n          <Grid item md={12}>\r\n            {!isLoading &&\r\n              (missionType === \"orbital\" ? (\r\n                <AnalyzeRegressionSection\r\n                  equation={(x: any, y: any, m: any) => equation(x, y, m)}\r\n                  maxAltitude={maxAltitude}\r\n                  alt={INIT_PARAMS.altitude}\r\n                  inc={INIT_PARAMS.inclination}\r\n                  value={INIT_PARAMS.value}\r\n                  data={source}\r\n                  dataType={dataType}\r\n                  selectedItem={metric}\r\n                  text={text}\r\n                  system={system}\r\n                  version={version}\r\n                  onSystem={(value: any) => setSystem(value)}\r\n                  onVersion={(value: any) => setVersion(value)}\r\n                  onDataType={(value: any) => setDataType(value)}\r\n                />\r\n              ) : (\r\n                <></>\r\n              ))}\r\n          </Grid>\r\n        </Grid>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n}\r\n\r\nexport default CartPanel;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\nimport { useWindowSize } from \"../../../../utils/util\";\r\n\r\nfunction TwoViewSection(props: any) {\r\n  const [checked, setChecked] = useState(props.checked);\r\n  const [config, setConfig] = useState([]);\r\n  const size: any = useWindowSize();\r\n  const plot_rows = props.plot_rows;\r\n  const surface_rows = props.surface_rows;\r\n\r\n  useEffect(() => {\r\n    setChecked(props.checked);\r\n  }, [props.checked]);\r\n\r\n  const unpack = (rows: Array<any>, key: any) => {\r\n    return rows.map(function (row: any) {\r\n      return row[key];\r\n    });\r\n  };\r\n  \r\n  useEffect(() => {\r\n    let configData: any = [];\r\n    const inclination = parseInt(props.inc);\r\n    const new_plot_rows = plot_rows.filter(\r\n      (row: any) => row.inclination === inclination\r\n    );\r\n    const new_surface_rows = surface_rows.filter(\r\n      (row: any) => row.inclination === inclination\r\n    );\r\n    if (checked.show_surface === true && checked.show_scatter === true) {\r\n      configData = [\r\n        {\r\n          x: unpack(new_plot_rows, \"altitude\"),\r\n          y: unpack(new_plot_rows, \"value\"),\r\n          name: \"Model data\",\r\n          mode: \"markers\",\r\n          type: \"scatter\",\r\n          color: \"rgb(23, 190, 207)\",\r\n        },\r\n        {\r\n          x: unpack(new_surface_rows, \"altitude\"),\r\n          y: unpack(new_surface_rows, \"value\"),\r\n          name: \"Model curve\",\r\n          mode: \"lines\",\r\n          line: {\r\n            color: \"rgb(252, 154, 7)\",\r\n          },\r\n        },\r\n        {\r\n          x: [props.dot.x],\r\n          y: [props.dot.y],\r\n          name: \"User\",\r\n          mode: \"markers\",\r\n          type: \"scatter\",\r\n          marker: {\r\n            color: \"red\",\r\n            size: 10,\r\n          },\r\n        },\r\n      ];\r\n    } else if (\r\n      checked.show_surface === false &&\r\n      checked.show_scatter === true\r\n    ) {\r\n      configData = [\r\n        {\r\n          x: unpack(new_plot_rows, \"altitude\"),\r\n          y: unpack(new_plot_rows, \"value\"),\r\n          name: \"Model data\",\r\n          mode: \"markers\",\r\n          type: \"scatter\",\r\n          color: \"rgb(23, 190, 207)\",\r\n        },\r\n        {\r\n          x: [],\r\n          y: [],\r\n          mode: \"markers\",\r\n          type: \"scatter\",\r\n        },\r\n        {\r\n          x: [props.dot.x],\r\n          y: [props.dot.y],\r\n          name: \"User\",\r\n          mode: \"markers\",\r\n          type: \"scatter\",\r\n          marker: {\r\n            color: \"red\",\r\n            size: 10,\r\n          },\r\n        },\r\n      ];\r\n    } else if (\r\n      checked.show_surface === true &&\r\n      checked.show_scatter === false\r\n    ) {\r\n      configData = [\r\n        {\r\n          x: unpack(new_surface_rows, \"altitude\"),\r\n          y: unpack(new_surface_rows, \"value\"),\r\n          name: \"Model curve\",\r\n          mode: \"lines\",\r\n          line: {\r\n            color: \"rgb(252, 154, 7)\",\r\n          },\r\n        },\r\n        {\r\n          x: [],\r\n          y: [],\r\n          mode: \"markers\",\r\n          type: \"scatter\",\r\n        },\r\n        {\r\n          x: [props.dot.x],\r\n          y: [props.dot.y],\r\n          name: \"User\",\r\n          mode: \"markers\",\r\n          type: \"scatter\",\r\n          marker: {\r\n            color: \"red\",\r\n            size: 10,\r\n          },\r\n        },\r\n      ];\r\n    } else if (\r\n      checked.show_surface === false &&\r\n      checked.show_scatter === false\r\n    ) {\r\n      configData = [\r\n        {\r\n          x: [],\r\n          y: [],\r\n          mode: \"lines\",\r\n        },\r\n        {\r\n          x: [],\r\n          y: [],\r\n          mode: \"markers\",\r\n          type: \"scatter\",\r\n        },\r\n        {\r\n          x: [props.dot.x],\r\n          y: [props.dot.y],\r\n          name: \"User\",\r\n          mode: \"markers\",\r\n          type: \"scatter\",\r\n          marker: {\r\n            color: \"red\",\r\n            size: 10,\r\n          },\r\n        },\r\n      ];\r\n    }\r\n\r\n    setConfig(configData);\r\n  }, [checked, plot_rows, surface_rows, props.inc]);\r\n\r\n  return (\r\n    <Plot\r\n      data={config}\r\n      layout={{\r\n        autosize: true,\r\n        showlegend: false,\r\n        hovermode: \"closest\",\r\n        width: size * 0.37,\r\n        height: size * 0.37,\r\n        margin: {\r\n          l: 60,\r\n          r: 15,\r\n          b: 35,\r\n          t: 15,\r\n        },\r\n        xaxis: {\r\n          title: `Altitude (km), Inclination=${props.inc} deg`,\r\n          type: \"linear\",\r\n          zeroline: false,\r\n        },\r\n        yaxis: {\r\n          title: props.yAxisLabel,\r\n          type: \"linear\",\r\n          zeroline: false,\r\n        },\r\n      }}\r\n      onHover={(e: any) => (e.event.target.style.cursor = \"pointer\")}\r\n      onUnhover={(e: any) => (e.event.target.style.cursor = \"crosshair\")}\r\n      onClick={(e) => props.onClick(e)}\r\n      onDoubleClick={() => props.onClick()}\r\n    />\r\n  );\r\n}\r\n\r\nexport default TwoViewSection;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\nimport { useWindowSize } from \"../../../../utils/util\";\r\n\r\nfunction ThreeViewSection(props: any) {\r\n  const [checked, setChecked] = useState(props.checked);\r\n  const [reset, setReset] = useState(false);\r\n  const [config, setConfig] = useState([]);\r\n  const size: any = useWindowSize();\r\n  const plot_rows = props.plot_rows;\r\n  const surface_rows = props.surface_rows;\r\n\r\n  useEffect(() => {\r\n    setReset(!reset);\r\n  }, [props.reset]);\r\n\r\n  useEffect(() => {\r\n    setChecked(props.checked);\r\n  }, [props.checked]);\r\n\r\n  const unpack = (rows: Array<any>, key: any) => {\r\n    return rows.map(function (row) {\r\n      return row[key];\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    let configData: any = [];\r\n    if (checked.show_surface === true && checked.show_scatter === true) {\r\n      configData = [\r\n        {\r\n          x: unpack(plot_rows, \"altitude\"),\r\n          y: unpack(plot_rows, \"inclination\"),\r\n          z: unpack(plot_rows, \"value\"),\r\n          name: \"Model data\",\r\n          mode: \"markers\",\r\n          type: \"scatter3d\",\r\n          opacity: 1,\r\n          marker: {\r\n            color: \"rgb(23, 190, 207)\",\r\n            size: 2,\r\n          },\r\n        },\r\n        {\r\n          x: unpack(surface_rows, \"altitude\"),\r\n          y: unpack(surface_rows, \"inclination\"),\r\n          z: unpack(surface_rows, \"value\"),\r\n          name: \"Model surface\",\r\n          opacity: 0.3,\r\n          type: \"mesh3d\",\r\n          color: \"rgb(252, 154, 7)\",\r\n        },\r\n        {\r\n          x: [props.alt],\r\n          y: [props.inc],\r\n          z: [props.value],\r\n          name: \"User\",\r\n          mode: \"markers\",\r\n          type: \"scatter3d\",\r\n          opacity: 1,\r\n          marker: {\r\n            color: \"red\",\r\n            size: 5,\r\n          },\r\n        },\r\n      ];\r\n    } else if (\r\n      checked.show_surface === false &&\r\n      checked.show_scatter === true\r\n    ) {\r\n      configData = [\r\n        {\r\n          x: unpack(plot_rows, \"altitude\"),\r\n          y: unpack(plot_rows, \"inclination\"),\r\n          z: unpack(plot_rows, \"value\"),\r\n          name: \"Model data\",\r\n          mode: \"markers\",\r\n          type: \"scatter3d\",\r\n          opacity: 1,\r\n          marker: {\r\n            color: \"rgb(23, 190, 207)\",\r\n            size: 2,\r\n          },\r\n        },\r\n        {\r\n          x: [props.alt],\r\n          y: [props.inc],\r\n          z: [props.value],\r\n          name: \"User\",\r\n          mode: \"markers\",\r\n          type: \"scatter3d\",\r\n          opacity: 1,\r\n          marker: {\r\n            color: \"red\",\r\n            size: 5,\r\n          },\r\n        },\r\n      ];\r\n    } else if (\r\n      checked.show_surface === true &&\r\n      checked.show_scatter === false\r\n    ) {\r\n      configData = [\r\n        {\r\n          x: unpack(surface_rows, \"altitude\"),\r\n          y: unpack(surface_rows, \"inclination\"),\r\n          z: unpack(surface_rows, \"value\"),\r\n          name: \"Model surface\",\r\n          opacity: 0.3,\r\n          type: \"mesh3d\",\r\n          color: \"rgb(252, 154, 7)\",\r\n        },\r\n        {\r\n          x: [props.alt],\r\n          y: [props.inc],\r\n          z: [props.value],\r\n          name: \"User\",\r\n          mode: \"markers\",\r\n          type: \"scatter3d\",\r\n          opacity: 1,\r\n          marker: {\r\n            color: \"red\",\r\n            size: 5,\r\n          },\r\n        },\r\n      ];\r\n    } else if (\r\n      checked.show_surface === false &&\r\n      checked.show_scatter === false\r\n    ) {\r\n      configData = [\r\n        {\r\n          x: [],\r\n          y: [],\r\n          z: [],\r\n          type: \"mesh3d\",\r\n        },\r\n        {\r\n          x: [],\r\n          y: [],\r\n          z: [],\r\n          mode: \"markers\",\r\n          type: \"scatter3d\",\r\n        },\r\n        {\r\n          x: [parseFloat(props.alt)],\r\n          y: [parseFloat(props.inc)],\r\n          z: [parseFloat(props.value)],\r\n          name: \"User\",\r\n          mode: \"markers\",\r\n          type: \"scatter3d\",\r\n          opacity: 1,\r\n          marker: {\r\n            color: \"red\",\r\n            size: 5,\r\n          },\r\n        },\r\n      ];\r\n    }\r\n\r\n    setConfig(configData);\r\n  }, [checked, plot_rows, surface_rows, reset]);\r\n\r\n  return (\r\n    <Plot\r\n      data={config}\r\n      layout={{\r\n        autosize: true,\r\n        width: size * 0.37,\r\n        height: size * 0.37,\r\n        margin: {\r\n          l: 0,\r\n          r: 0,\r\n          b: 0,\r\n          t: 0,\r\n        },\r\n        scene: {\r\n          aspectratio: {\r\n            x: 0.6,\r\n            y: 0.6,\r\n            z: 0.6,\r\n          },\r\n          camera: {\r\n            center: {\r\n              x: 0,\r\n              y: 0,\r\n              z: 0,\r\n            },\r\n            eye: {\r\n              x: 0.9,\r\n              y: 0.9,\r\n              z: 0.9,\r\n            },\r\n            up: {\r\n              x: 0,\r\n              y: 0,\r\n              z: 1,\r\n            },\r\n          },\r\n          xaxis: {\r\n            title: \"Altitude (km)\",\r\n            type: \"linear\",\r\n            range: [Math.max(...unpack(surface_rows, \"altitude\")), 0],\r\n            zeroline: false,\r\n          },\r\n          yaxis: {\r\n            title: \"Inclination (deg)\",\r\n            type: \"linear\",\r\n            range: [90, 0],\r\n            zeroline: false,\r\n          },\r\n          zaxis: {\r\n            title: props.zAxisLabel,\r\n            type: \"linear\",\r\n            range: [\r\n              Math.min(...unpack(surface_rows, \"value\")),\r\n              Math.max(...unpack(surface_rows, \"value\")),\r\n            ],\r\n            zeroline: false,\r\n          },\r\n        },\r\n        showlegend: false,\r\n      }}\r\n      onClick={(e) => props.onClick(e)}\r\n      onDoubleClick={() => props.onClick()}\r\n    />\r\n  );\r\n}\r\n\r\nexport default ThreeViewSection;\r\n","import React from \"react\";\r\nimport {\r\n  Grid,\r\n  IconButton,\r\n  Divider,\r\n} from \"@material-ui/core\";\r\nimport RemoveCircleOutlineIcon from \"@material-ui/icons/RemoveCircleOutline\";\r\n\r\nfunction MinusAddon(props: any) {\r\n  return (\r\n    <Grid item md={12}>\r\n      <Grid container justify=\"center\" alignItems=\"center\">\r\n        <Grid item style={{ width: \"4%\" }}>\r\n          <IconButton onClick={() => props.onSelected(props.id)}>\r\n            <RemoveCircleOutlineIcon />\r\n          </IconButton>\r\n        </Grid>\r\n        <Grid item md={11} style={{ width: \"96%\" }}>\r\n          <Divider />\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default MinusAddon;\r\n","import React from \"react\";\r\nimport { Grid, IconButton, Divider } from \"@material-ui/core\";\r\nimport AddCircleOutlineIcon from \"@material-ui/icons/AddCircleOutline\";\r\nimport Selection from \"../Select\";\r\n\r\nfunction PlusAddon(props: any) {\r\n  return (\r\n    <Grid item md={12}>\r\n      <Grid container justify=\"center\" alignItems=\"center\">\r\n        <Grid item style={{ width: \"4%\" }}>\r\n          <IconButton onClick={(e) => props.onAnchorEl(e.currentTarget)}>\r\n            <AddCircleOutlineIcon />\r\n          </IconButton>\r\n          <Selection\r\n            selected={props.selected}\r\n            anchorEl={props.anchorEl}\r\n            onAnchorEl={(value: any) => props.onAnchorEl(value)}\r\n            onSelected={(value: any) => props.onSelected(value)}\r\n          />\r\n        </Grid>\r\n        <Grid item md={11} style={{ width: \"96%\" }}>\r\n          <Divider />\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default PlusAddon;\r\n","import React from \"react\";\r\nimport {\r\n  Grid,\r\n  Typography,\r\n  Table,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  TableBody,\r\n} from \"@material-ui/core\";\r\n\r\nimport LineChartSection from \"../../../../chart-panel/line-chart-section\";\r\nimport HistogramChartSection from \"../../../../chart-panel/histogram-chart-section\";\r\nimport BoxChartSection from \"../../../../chart-panel/box-chart-section\";\r\n\r\nfunction createData(name: String, value: String) {\r\n  return { name, value };\r\n}\r\n\r\nconst rows = [\r\n  createData(\"Average (sec)\", \"xx\"),\r\n  createData(\"Time-Averaged Gap\", \"xx\"),\r\n  createData(\"Median (sec)\", \"xx\"),\r\n  createData(\"Maximum (minutes)\", \"xx\"),\r\n  createData(\"Minimum (sec)\", \"xx\"),\r\n  createData(\"Average # Gaps Per Orbit\", \"xx\"),\r\n  createData(\"Average # Gaps Per Day\", \"xx\"),\r\n];\r\n\r\nfunction SelectedChartSection(props: any) {\r\n  return (\r\n    <>\r\n      {props.id === 0 && (\r\n        <Grid container justify=\"center\" alignItems=\"center\">\r\n          <Grid item md={10} style={{ textAlign: \"center\" }}>\r\n            <Typography variant=\"h6\">{`Key Metrics`}</Typography>\r\n          </Grid>\r\n          <Grid item md={10}>\r\n            <Table aria-label=\"simple table\" size=\"small\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>{`Gap Statistic`}</TableCell>\r\n                  <TableCell>{`Value`}</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {rows.map((row: any) => (\r\n                  <TableRow key={row.name}>\r\n                    <TableCell component=\"th\" scope=\"row\">\r\n                      {row.name}\r\n                    </TableCell>\r\n                    <TableCell>{row.value}</TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </Grid>\r\n        </Grid>\r\n      )}\r\n      {props.id === 1 && <LineChartSection {...props.data} />}\r\n      {props.id === 2 && <HistogramChartSection {...props.data} />}\r\n      {props.id === 3 && <BoxChartSection {...props.data} />}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SelectedChartSection;\r\n","import React, { useState } from \"react\";\r\nimport { Grid, Card, CardContent } from \"@material-ui/core\";\r\n\r\nimport MinusAddon from \"../../../../components/Button/MinusAddon\";\r\nimport PlusAddon from \"../../../../components/Button/PlusAddon\";\r\nimport SelectedChartSection from \"./selected-chart-section\";\r\nimport * as Constants from \"../../../../constants\";\r\n\r\nfunction ChartsLibsSection(props: any) {\r\n  const [selected, setSelected] = useState([1, 2, 3] as any);\r\n  const [anchorEl, setAnchorEl] = useState(null as any);\r\n\r\n  const handleSelected = (id: any, type: string) => {\r\n    if (!selected.includes(id) && type === \"add\") {\r\n      setSelected((prevState: any) => [...prevState, id]);\r\n    } else if (type === \"remove\") {\r\n      setSelected(selected.filter((item: any) => item !== id));\r\n    }\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {selected.length === 0 && (\r\n        <PlusAddon\r\n          type={0}\r\n          selected={selected}\r\n          anchorEl={anchorEl}\r\n          onAnchorEl={(value: any) => setAnchorEl(value)}\r\n          onSelected={(value: any) => handleSelected(value, \"add\")}\r\n        />\r\n      )}\r\n      {selected.map((item: any, idx: number) => {\r\n        let dset = Constants.MENU_ITEMS[props.dataSet][item].dataset;\r\n        return (\r\n          <React.Fragment key={item}>\r\n            <MinusAddon\r\n              id={item}\r\n              type={0}\r\n              selected={selected}\r\n              anchorEl={anchorEl}\r\n              onAnchorEl={(value: any) => setAnchorEl(value)}\r\n              onSelected={(value: any) => handleSelected(value, \"remove\")}\r\n            />\r\n            <Grid item md={12}>\r\n              <Card style={{ marginLeft: \"2.5rem\", marginRight: \"2.5rem\" }}>\r\n                <CardContent>\r\n                  {props.traces[dset] &&\r\n                    Object.keys(props.traces[dset]).length > 0 && (\r\n                      <SelectedChartSection\r\n                        id={item}\r\n                        data={props.traces[dset]}\r\n                      />\r\n                    )}\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n            {idx === selected.length - 1 && (\r\n              <PlusAddon\r\n                type={0}\r\n                selected={selected}\r\n                anchorEl={anchorEl}\r\n                onAnchorEl={(value: any) => setAnchorEl(value)}\r\n                onSelected={(value: any) => handleSelected(value, \"add\")}\r\n              />\r\n            )}\r\n          </React.Fragment>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ChartsLibsSection;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport {\r\n  Grid,\r\n  Button,\r\n  Typography,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Card,\r\n  CardContent,\r\n} from \"@material-ui/core\";\r\nimport { grey } from \"@material-ui/core/colors\";\r\nimport { ToggleButton, ToggleButtonGroup } from \"@material-ui/lab\";\r\n\r\nimport TwoViewSection from \"./two-view-section\";\r\nimport ThreeViewSection from \"./three-view-section\";\r\nimport ChartsLibsSection from \"./charts-libs-section\";\r\nimport OptionAddon from \"../../../components/Button/OptionAddon\";\r\nimport {\r\n  getItems,\r\n  getSystems,\r\n  getSystemVersion,\r\n  getFileId,\r\n} from \"../../../API\";\r\nimport useStyles from \"../../../utils/styles\";\r\n\r\nconst INIT_CHECK_STATUS = {\r\n  show_surface: true,\r\n  show_scatter: true,\r\n};\r\n\r\nconst INIT_FILE_ID = [{ id: 1620 }, { id: 1729 }];\r\n\r\nfunction AnalyzeRegressionSection(props: any) {\r\n  const [viewMethod, setViewMethod] = useState(\"2d_view\");\r\n  const [dataSet, setDataSet] = useState(\"as_needed_handoff\" as any);\r\n  const [systems, setSystems] = useState([] as any);\r\n  const [versions, setVersions] = useState([] as any);\r\n  const [dot, setDot] = useState({ x: props.alt, y: props.value } as any);\r\n  const [fileId, setFileId] = useState(INIT_FILE_ID);\r\n  const [checked, setChecked] = useState(INIT_CHECK_STATUS);\r\n  const [traces, setTraces] = useState({} as any);\r\n  const [reset, setReset] = useState(false);\r\n  const [selected, setSelected] = useState(false);\r\n  const classes = useStyles();\r\n  const plot_rows = props.data.plot_value;\r\n  const surface_rows: Array<any> = [];\r\n  const zAxisLabel = props.data.label;\r\n\r\n  useEffect(() => {\r\n    if (fileId.length > 0)\r\n      getItems({\r\n        dataType: props.dataType,\r\n        fileId: fileId,\r\n        version: props.version,\r\n      })\r\n        .then((res) => {\r\n          Object.keys(res.data).map((el) => {\r\n            let ctype: String = res.data[el][\"type\"];\r\n            let gaps: Array<any> = [];\r\n            let durations: Array<any> = [];\r\n            let avgs: Array<any> = [];\r\n\r\n            // Detect chart type and set Traces\r\n            if (ctype === \"line\") {\r\n              res.data[el][\"data\"].map((item: Array<any>, idx: number) => {\r\n                gaps.push(idx + 1);\r\n                durations.push(item[0]);\r\n                avgs.push(item[1]);\r\n              });\r\n\r\n              setTraces((prevState: any) => ({\r\n                ...prevState,\r\n                [el]: {\r\n                  xTraces: gaps,\r\n                  yTraces: durations,\r\n                  avgTraces: avgs,\r\n                  type: ctype,\r\n                  title: res.data[el][\"title\"],\r\n                },\r\n              }));\r\n            } else if (ctype === \"histogram\") {\r\n              setTraces((prevState: any) => ({\r\n                ...prevState,\r\n                [el]: {\r\n                  xTraces: res.data[el][\"data\"],\r\n                  type: ctype,\r\n                  title: res.data[el][\"title\"],\r\n                },\r\n              }));\r\n            }\r\n          });\r\n        })\r\n        .catch(() => {\r\n          setTraces({});\r\n        });\r\n  }, [props.dataType, props.version, fileId]);\r\n\r\n  useEffect(() => {\r\n    getSystems()\r\n      .then((res: any) => setSystems(res.data))\r\n      .catch((err: any) => setSystems([]));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setDot({\r\n      x: props.data.plot_value[0].altitude,\r\n      y: props.data.plot_value[0].value,\r\n    });\r\n  }, [props.data]);\r\n\r\n  useEffect(() => {\r\n    if (props.system !== \"\") {\r\n      getSystemVersion({ system: props.system })\r\n        .then((res: any) => setVersions(res.data))\r\n        .catch((err: any) => setVersions([]));\r\n    }\r\n  }, [props.system]);\r\n\r\n  const handleCheck = (event: any) => {\r\n    const { name, checked } = event.currentTarget;\r\n    setChecked((prevState) => ({ ...prevState, [name]: checked }));\r\n  };\r\n\r\n  const handleDataSetClick = (event: any) => {\r\n    event.preventDefault();\r\n    const { id, name } = event.currentTarget;\r\n\r\n    setDataSet(id);\r\n    props.onDataType(name);\r\n  };\r\n\r\n  const handleClick = (event: any) => {\r\n    if (event) {\r\n      const params = {\r\n        user_altitude: event.points[0].x,\r\n        user_inclination: props.inc,\r\n        system: props.system,\r\n        version: props.version,\r\n      };\r\n\r\n      setDot({ x: event.points[0].x, y: event.points[0].y });\r\n      getFileId(params)\r\n        .then((res: any) => setFileId(res.data))\r\n        .catch((err: any) => setFileId([]));\r\n    }\r\n    setSelected(true);\r\n  };\r\n\r\n  return (\r\n    <Grid container justify=\"center\" alignItems=\"center\" spacing={2}>\r\n      <Grid item md={12}>\r\n        <Grid\r\n          container\r\n          justify=\"flex-start\"\r\n          alignItems=\"center\"\r\n          spacing={2}\r\n          style={{\r\n            backgroundColor: grey[300],\r\n            minHeight: \"10vh\",\r\n          }}\r\n        >\r\n          <Grid item md={5} style={{ marginLeft: 15 }}>\r\n            <ToggleButtonGroup value={dataSet} onChange={handleDataSetClick}>\r\n              <ToggleButton\r\n                id=\"as_needed_handoff\"\r\n                name=\"coverage\"\r\n                value=\"as_needed_handoff\"\r\n                size=\"small\"\r\n              >\r\n                {`RF Coverage (%)`}\r\n              </ToggleButton>\r\n              <ToggleButton\r\n                id=\"maximum_powee_handoff\"\r\n                name=\"gap\"\r\n                value=\"maximum_powee_handoff\"\r\n                size=\"small\"\r\n              >\r\n                {`No Coverage (%)`}\r\n              </ToggleButton>\r\n            </ToggleButtonGroup>\r\n          </Grid>\r\n          <Grid item md={3} style={{ marginLeft: \"15px\" }}>\r\n            <FormControl\r\n              variant=\"outlined\"\r\n              size=\"small\"\r\n              className={classes.formControl}\r\n              fullWidth\r\n            >\r\n              <InputLabel id=\"demo-simple-select-outlined-label\">{`System`}</InputLabel>\r\n              <Select\r\n                labelId=\"demo-simple-select-outlined-label\"\r\n                id=\"demo-simple-select-outlined\"\r\n                value={props.system}\r\n                onChange={(e) => props.onSystem(e.target.value)}\r\n                label=\"System\"\r\n              >\r\n                <MenuItem value=\"\" disabled>\r\n                  <em>{`None`}</em>\r\n                </MenuItem>\r\n                {systems.map((item: any) => (\r\n                  <MenuItem key={item.system_name} value={item.system_id}>\r\n                    {item.system_name}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid item md={3}>\r\n            <FormControl\r\n              variant=\"outlined\"\r\n              size=\"small\"\r\n              className={classes.formControl}\r\n              fullWidth\r\n            >\r\n              <InputLabel id=\"demo-simple-select-outlined-label\">{`Version`}</InputLabel>\r\n              <Select\r\n                labelId=\"demo-simple-select-outlined-label\"\r\n                id=\"demo-simple-select-outlined\"\r\n                value={props.version}\r\n                onChange={(e) => props.onVersion(e.target.value)}\r\n                label=\"Version\"\r\n              >\r\n                <MenuItem value=\"\" disabled>\r\n                  <em>{`None`}</em>\r\n                </MenuItem>\r\n                {versions.map((item: any) => (\r\n                  <MenuItem\r\n                    key={`version_${item.versions}`}\r\n                    value={item.versions}\r\n                  >\r\n                    {item.versions}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid item md={12} style={{ textAlign: \"center\", position: \"relative\" }}>\r\n        <Typography variant=\"h6\">\r\n          {dataSet === \"as_needed_handoff\"\r\n            ? `RF Coverage (%) vs. User Inclination`\r\n            : `No Coverage (%) vs. User Inclination`}\r\n        </Typography>\r\n        <OptionAddon\r\n          checked={checked}\r\n          viewMethod={viewMethod}\r\n          onChecked={handleCheck}\r\n          resetPlot={() => setReset(!reset)}\r\n          onViewMethod={(e: any) => setViewMethod(e.currentTarget.name)}\r\n        />\r\n      </Grid>\r\n\r\n      {/* FIXME: check at the process of cart integration.\r\n      <Grid item md={12} style={{ zIndex: 1000 }}>\r\n        <MathJax.Provider>\r\n          <MathJax.Node formula={props.text} />\r\n        </MathJax.Provider>\r\n      </Grid> */}\r\n\r\n      <Grid item md={12}>\r\n        <Card style={{ marginLeft: \"2.5rem\", marginRight: \"2.5rem\" }}>\r\n          <CardContent>\r\n            {viewMethod === \"3d_view\" ? (\r\n              <Grid item md={12}>\r\n                <ThreeViewSection\r\n                  data={props.data}\r\n                  equation={props.equation}\r\n                  maxAltitude={props.maxAltitude}\r\n                  alt={props.alt}\r\n                  inc={props.inc}\r\n                  value={props.value}\r\n                  reset={reset}\r\n                  isLegend={false}\r\n                  isSub={true}\r\n                  plot_rows={plot_rows}\r\n                  surface_rows={surface_rows}\r\n                  zAxisLabel={zAxisLabel}\r\n                  checked={checked}\r\n                  onClick={handleClick}\r\n                />\r\n              </Grid>\r\n            ) : (\r\n              <Grid item md={12}>\r\n                <TwoViewSection\r\n                  data={props.data}\r\n                  equation={props.equation}\r\n                  maxAltitude={props.maxAltitude}\r\n                  alt={props.alt}\r\n                  inc={props.inc}\r\n                  value={props.value}\r\n                  isLegend={false}\r\n                  isSub={true}\r\n                  plot_rows={plot_rows}\r\n                  surface_rows={surface_rows}\r\n                  yAxisLabel={zAxisLabel}\r\n                  dot={dot}\r\n                  checked={checked}\r\n                  onClick={handleClick}\r\n                />\r\n              </Grid>\r\n            )}\r\n          </CardContent>\r\n        </Card>\r\n      </Grid>\r\n      {selected && <></>}\r\n      {Object.keys(traces).length > 0 && (\r\n        <ChartsLibsSection traces={traces} dataSet={dataSet} />\r\n      )}\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default AnalyzeRegressionSection;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport {\r\n  Grid,\r\n  CssBaseline,\r\n  Slide,\r\n  Typography,\r\n  IconButton,\r\n  Dialog,\r\n  DialogTitle as MuiDialogTitle,\r\n  DialogContent,\r\n} from \"@material-ui/core\";\r\nimport { TransitionProps } from \"@material-ui/core/transitions\";\r\nimport { Close as CloseIcon } from \"@material-ui/icons\";\r\n\r\nimport { getCartItems } from \"../../API\";\r\nimport useStyles from \"../../utils/styles\";\r\nimport AnalyzeRegressionSection from \"./analyze-regression-section\";\r\n\r\nconst INIT_PARAMS = {\r\n  altitude: 300,\r\n  availabilityThreshold: 0.999,\r\n  dataVolumeNeed: 0.1,\r\n  gapThreshold: 6,\r\n  inclination: 30,\r\n  latitude: 30,\r\n  launchYear: 2030,\r\n  longitude: 30,\r\n  navAccuracyNeed: 20,\r\n  powerAmplifier: 1,\r\n  value: 100,\r\n};\r\n\r\nconst Transition = React.forwardRef(function Transition(\r\n  props: TransitionProps & { children?: React.ReactElement<any, any> },\r\n  ref: React.Ref<Function>\r\n) {\r\n  return <Slide direction=\"left\" ref={ref} {...props} />;\r\n});\r\n\r\nfunction CartPanel(props: any) {\r\n  const [source, setSource] = useState({} as any);\r\n  const [system, setSystem] = useState(5 as any);\r\n  const [version, setVersion] = useState(3 as any);\r\n  const [dataType, setDataType] = useState(\"coverage\" as any);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [terrestrial, setTerrestrial] = useState({});\r\n  const [maxAltitude, setMaxAltitude] = useState(0);\r\n  const [coefficients, setCoefficients] = useState({} as any);\r\n  const [text, setText] = useState(\"\");\r\n  const deepDive = \"system1/coverage\";\r\n  const metric = deepDive.split(\"/\")[1];\r\n  const missionType = \"orbital\";\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    setText(\"\");\r\n    getCartItems({\r\n      type: missionType,\r\n      system: system,\r\n      version: version,\r\n      dataType,\r\n    })\r\n      .then((res: any) => {\r\n        setTerrestrial(res.data.terrestrial);\r\n        setSource(res.data.data.data);\r\n        setMaxAltitude(res.data.data.maxAltitude);\r\n        setCoefficients(res.data.data.coefficients);\r\n        setText(res.data.data.text);\r\n\r\n        // FIXME: there is no real data for it.\r\n        //\r\n        // setText(\r\n        //   props.equationsTex[system.replace(\" \", \"_\").toLowerCase()][metric](\r\n        //     data[\"coefficients\"][metric]\r\n        //   )\r\n        // );\r\n      })\r\n      .then(() => {\r\n        setIsLoading(false);\r\n      });\r\n  }, [system, version, dataType]);\r\n\r\n  const equation = (inc: any, alt: any, metric: string) => {\r\n    // FIXME: activate in integration of cart.\r\n    //\r\n    // const altitude = parseFloat(alt);\r\n    // const inclination = parseFloat(inc);\r\n\r\n    // const coefs = coefficients[metric];\r\n    // const eqn = props.equations[system.replace(\" \", \"_\").toLowerCase()][metric];\r\n\r\n    // return eqn(coefs, altitude, inclination);\r\n    return inc;\r\n  };\r\n  \r\n  return (\r\n    <Dialog\r\n      open={props.isOpen}\r\n      TransitionComponent={Transition}\r\n      onClose={() => props.onClose()}\r\n      classes={{ paper: classes.dialogDeep }}\r\n    >\r\n      <CssBaseline />\r\n      <MuiDialogTitle>\r\n        <Typography component=\"strong\" variant=\"h6\">\r\n          {\"Cart Integration Panel\"}\r\n        </Typography>\r\n        <IconButton\r\n          aria-label=\"Close\"\r\n          className={classes.dialogCloseBtn}\r\n          onClick={() => props.onClose()}\r\n        >\r\n          <CloseIcon />\r\n        </IconButton>\r\n      </MuiDialogTitle>\r\n      <DialogContent\r\n        dividers={true}\r\n        style={{ paddingRight: 0, paddingLeft: 0, overflowX: \"hidden\" }}\r\n      >\r\n        <Grid container justify=\"center\" alignItems=\"center\">\r\n          <Grid item md={12}>\r\n            {!isLoading &&\r\n              (missionType === \"orbital\" ? (\r\n                <AnalyzeRegressionSection\r\n                  equation={(x: any, y: any, m: any) => equation(x, y, m)}\r\n                  maxAltitude={maxAltitude}\r\n                  alt={INIT_PARAMS.altitude}\r\n                  inc={INIT_PARAMS.inclination}\r\n                  value={INIT_PARAMS.value}\r\n                  data={source}\r\n                  dataType={dataType}\r\n                  selectedItem={metric}\r\n                  text={text}\r\n                  system={system}\r\n                  version={version}\r\n                  onSystem={(value: any) => setSystem(value)}\r\n                  onVersion={(value: any) => setVersion(value)}\r\n                  onDataType={(value: any) => setDataType(value)}\r\n                />\r\n              ) : (\r\n                <></>\r\n              ))}\r\n          </Grid>\r\n        </Grid>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n}\r\n\r\nexport default CartPanel;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport SwipeableViews from \"react-swipeable-views\";\r\n\r\nimport {\r\n  Grid,\r\n  Container,\r\n  CssBaseline,\r\n  Card,\r\n  CardHeader,\r\n  CardContent,\r\n  Typography,\r\n  Button,\r\n  Select,\r\n  MenuItem,\r\n  Tab,\r\n  Tabs,\r\n  AppBar,\r\n  Box,\r\n} from \"@material-ui/core\";\r\nimport { grey } from \"@material-ui/core/colors\";\r\nimport { useTheme } from \"@material-ui/core/styles\";\r\n\r\nimport { getItems } from \"../../API\";\r\nimport useStyles from \"../../utils/styles\";\r\nimport LineChartSection from \"./line-chart-section\";\r\nimport HistogramChartSection from \"./histogram-chart-section\";\r\nimport BoxChartSection from \"./box-chart-section\";\r\nimport TerrestrialHeatMap from \"./terrestrial-heatmap-chart\";\r\nimport CartDashBoardPanel from \"../cart-dashboard-panel\";\r\nimport CartPanel from \"../cart-panel\";\r\n\r\nconst INIT_MENUS = [\r\n  { id: \"as_needed_handoff\", name: \"Power below threshold handoff\" },\r\n  { id: \"maximum_powee_handoff\", name: \"Maximum power immediate handoff\" },\r\n];\r\n\r\nconst TabPanel = (props: any) => {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`full-width-tabpanel-${index}`}\r\n      aria-labelledby={`full-width-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && <Box p={3}>{children}</Box>}\r\n    </div>\r\n  );\r\n};\r\n\r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.any.isRequired,\r\n  value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index: any) {\r\n  return {\r\n    id: `full-width-tab-${index}`,\r\n    \"aria-controls\": `full-width-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\nfunction ChartPanel() {\r\n  const [traces, setTraces] = useState({} as any);\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [isOpenDash, setIsOpenDash] = useState(false);\r\n  const [selected, setSelected] = useState(\"none\");\r\n  const [tab, setTab] = useState(0);\r\n  const theme = useTheme();\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    if (selected !== \"none\")\r\n      getItems(selected)\r\n        .then((res) => {\r\n          Object.keys(res.data).map((el) => {\r\n            let ctype: String = res.data[el][\"type\"];\r\n            let gaps: Array<any> = [];\r\n            let durations: Array<any> = [];\r\n            let avgs: Array<any> = [];\r\n\r\n            // Detect chart type and set Traces\r\n            if (ctype === \"line\") {\r\n              res.data[el][\"data\"].map((item: Array<any>, idx: number) => {\r\n                gaps.push(idx + 1);\r\n                durations.push(item[0]);\r\n                avgs.push(item[1]);\r\n              });\r\n\r\n              setTraces((prevState: any) => ({\r\n                ...prevState,\r\n                [el]: {\r\n                  xTraces: gaps,\r\n                  yTraces: durations,\r\n                  avgTraces: avgs,\r\n                  type: ctype,\r\n                  title: res.data[el][\"title\"],\r\n                },\r\n              }));\r\n            } else if (ctype === \"histogram\") {\r\n              setTraces((prevState: any) => ({\r\n                ...prevState,\r\n                [el]: {\r\n                  xTraces: res.data[el][\"data\"],\r\n                  type: ctype,\r\n                  title: res.data[el][\"title\"],\r\n                },\r\n              }));\r\n            }\r\n          });\r\n        })\r\n        .catch(() => {\r\n          setTraces({});\r\n        });\r\n  }, [selected]);\r\n\r\n  return (\r\n    <>\r\n      <Grid container>\r\n        <Container component=\"main\" maxWidth=\"lg\">\r\n          <CssBaseline />\r\n          <Card className={classes.chartCard}>\r\n            <CardHeader\r\n              title={\r\n                <Typography component=\"h1\" variant=\"h5\" className=\"m-3\">\r\n                  {`CART Data Statistics Dashboard (Prototype)`}\r\n                </Typography>\r\n              }\r\n              action={\r\n                <>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={() => setIsOpenDash(true)}\r\n                    style={{ marginRight: 10 }}\r\n                  >\r\n                    {\"Open Dashboard\"}\r\n                  </Button>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={() => setIsOpen(true)}\r\n                  >\r\n                    {\"Open Chart\"}\r\n                  </Button>\r\n                </>\r\n              }\r\n            />\r\n            <CardContent className=\"ml-3 mr-3\">\r\n              <AppBar position=\"static\" color=\"default\">\r\n                <Tabs\r\n                  value={tab}\r\n                  onChange={(e, val) => setTab(val)}\r\n                  indicatorColor=\"primary\"\r\n                  textColor=\"primary\"\r\n                  variant=\"fullWidth\"\r\n                  aria-label=\"full width tabs example\"\r\n                >\r\n                  <Tab label=\"Data Statistics Dashboard\" {...a11yProps(0)} />\r\n                  <Tab label=\"Heat Map\" {...a11yProps(1)} />\r\n                </Tabs>\r\n              </AppBar>\r\n              <SwipeableViews\r\n                axis={theme.direction === \"rtl\" ? \"x-reverse\" : \"x\"}\r\n                index={tab}\r\n                onChangeIndex={(index: any) => setTab(index)}\r\n              >\r\n                <TabPanel value={tab} index={0}>\r\n                  <Grid\r\n                    container\r\n                    spacing={3}\r\n                    justify=\"center\"\r\n                    alignItems=\"center\"\r\n                  >\r\n                    <Grid item md={4}>\r\n                      <Select\r\n                        name=\"\"\r\n                        value={selected}\r\n                        onChange={(e: any) => setSelected(e.target.value)}\r\n                        className={classes.searchSelect}\r\n                        style={selected === \"none\" ? { color: grey[500] } : {}}\r\n                        fullWidth\r\n                      >\r\n                        <MenuItem\r\n                          value=\"none\"\r\n                          style={{ opacity: 0.87 }}\r\n                          disabled\r\n                        >\r\n                          {\"Select Data Set…\"}\r\n                        </MenuItem>\r\n                        {INIT_MENUS.map((item) => (\r\n                          <MenuItem value={item.id} key={item.id}>\r\n                            {item.name}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </Select>\r\n                    </Grid>\r\n                    <Grid item md={8}></Grid>\r\n                    {Object.keys(traces).map((item) => (\r\n                      <Grid item md={6} key={item}>\r\n                        <Grid container spacing={3}>\r\n                          {traces[item].type === \"line\" && (\r\n                            <Grid item md={12}>\r\n                              <LineChartSection {...traces[item]} />\r\n                            </Grid>\r\n                          )}\r\n                          {traces[item].type === \"histogram\" && (\r\n                            <>\r\n                              <Grid item md={12}>\r\n                                <HistogramChartSection {...traces[item]} />\r\n                              </Grid>\r\n                              <Grid item md={12}>\r\n                                <BoxChartSection {...traces[item]} />\r\n                              </Grid>\r\n                            </>\r\n                          )}\r\n                        </Grid>\r\n                      </Grid>\r\n                    ))}\r\n                  </Grid>\r\n                </TabPanel>\r\n                <TabPanel value={tab} index={1}>\r\n                  <Grid container justify=\"center\" alignItems=\"center\">\r\n                    <Grid item md={12}>\r\n                      <TerrestrialHeatMap />\r\n                    </Grid>\r\n                  </Grid>\r\n                </TabPanel>\r\n              </SwipeableViews>\r\n            </CardContent>\r\n          </Card>\r\n        </Container>\r\n      </Grid>\r\n      <CartPanel isOpen={isOpen} onClose={() => setIsOpen(false)} />\r\n      <CartDashBoardPanel\r\n        isOpen={isOpenDash}\r\n        onClose={() => setIsOpenDash(false)}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ChartPanel;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport {\r\n    Container,\r\n    Card,\r\n    CardHeader,\r\n    CardContent,\r\n    Typography,\r\n    CssBaseline\r\n} from \"@material-ui/core\";\r\n\r\nimport useStyles from \"../../utils/styles\";\r\n\r\nfunction NoMatch() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"md\">\r\n            <CssBaseline />\r\n            <Card className={classes.authcard}>\r\n                <CardHeader\r\n                    title={\r\n                        <Typography component=\"h1\" variant=\"h5\">\r\n                            {`404 | Page not found :(`}\r\n                        </Typography>\r\n                    }\r\n                />\r\n                <CardContent>\r\n                    <p>{`Maybe the page you are looking for has been removed, or you typed in the wrong URL`}</p>\r\n                </CardContent>\r\n                <Link to=\"/\" className={classes.link}>{`Back To Home`}</Link>\r\n            </Card>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default NoMatch;","import React from \"react\";\r\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\r\n\r\nimport ChartPanel from \"./pages/chart-panel\";\r\nimport NoMatch from \"./pages/auth-panel/NoMatch\";\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <HashRouter>\r\n      <Switch>\r\n        <Route exact path=\"/\" component={ChartPanel} />\r\n        <Route path=\"*\" component={NoMatch} />\r\n      </Switch>\r\n    </HashRouter>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}