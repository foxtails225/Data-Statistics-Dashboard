{"version":3,"sources":["components/auth-panel/NoMatch.tsx","App.tsx","index.tsx","utils/util.ts","API.ts","utils/styles.ts","components/chart-panel/index.tsx","components/chart-panel/line-chart-section/index.tsx","components/chart-panel/histogram-chart-section/index.tsx","components/chart-panel/box-chart-section/index.tsx","components/chart-panel/terrestrial-heatmap-chart/index.tsx"],"names":["NoMatch","classes","useStyles","Container","component","maxWidth","CssBaseline","Card","className","authcard","CardHeader","title","Typography","variant","CardContent","to","link","App","exact","path","ChartPanel","ReactDOM","render","document","getElementById","useWindowSize","useState","width","undefined","height","windowSize","setWindowSize","useEffect","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","getItems","selected","a","params","axios","get","res","Error","getPlotItems","makeStyles","theme","marginTop","minWidth","padding","spacing","paddingRight","color","textDecoration","chartCard","searchSelect","textAlignLast","INIT_MENUS","id","name","TabPanel","props","children","value","index","other","role","hidden","aria-labelledby","p","a11yProps","traces","setTraces","setSelected","tab","setTab","useTheme","then","data","eval","Object","keys","map","el","ctype","gaps","durations","avgs","item","idx","push","prevState","xTraces","yTraces","avgTraces","type","catch","container","position","onChange","e","val","indicatorColor","textColor","aria-label","label","axis","direction","onChangeIndex","justify","alignItems","md","target","style","grey","fullWidth","opacity","disabled","key","LineChartSection","size","x","y","mode","marker","layout","toUpperCase","showlegend","legend","orientation","xanchor","font","family","margin","l","b","r","t","pad","xaxis","titlefont","showgrid","zerolinecolor","zerolinewidth","yaxis","config","displayModeBar","HistogramChartSection","split","join","BoxChartSection","INIT_SOURCE","heatmap","intrpl","TerrestrialHeatMap","setMode","source","setSource","z","zeroline","range","tickmode","tick0","dtick","lat","lon","mapbox","center","zoom","mapboxAccessToken","hoverinfo","borderColor","border","borderRadius","zIndex","onClick","currentTarget","marginRight"],"mappings":"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","file":"static/js/main.cf93d9aa.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport {\r\n    Container,\r\n    Card,\r\n    CardHeader,\r\n    CardContent,\r\n    Typography,\r\n    CssBaseline\r\n} from \"@material-ui/core\";\r\n\r\nimport useStyles from \"../../utils/styles\";\r\n\r\nfunction NoMatch() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"md\">\r\n            <CssBaseline />\r\n            <Card className={classes.authcard}>\r\n                <CardHeader\r\n                    title={\r\n                        <Typography component=\"h1\" variant=\"h5\">\r\n                            {`404 | Page not found :(`}\r\n                        </Typography>\r\n                    }\r\n                />\r\n                <CardContent>\r\n                    <p>{`Maybe the page you are looking for has been removed, or you typed in the wrong URL`}</p>\r\n                </CardContent>\r\n                <Link to=\"/\" className={classes.link}>{`Back To Home`}</Link>\r\n            </Card>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default NoMatch;","import React from \"react\";\r\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\r\n\r\nimport ChartPanel from './components/chart-panel';\r\nimport NoMatch from './components/auth-panel/NoMatch';\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <HashRouter>\r\n      <Switch>\r\n        <Route exact path=\"/\" component={ChartPanel} />\r\n        <Route path=\"*\" component={NoMatch} />\r\n      </Switch>\r\n    </HashRouter>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n","import { useState, useEffect } from \"react\";\r\n\r\nexport function useWindowSize() {\r\n  const [windowSize, setWindowSize] = useState({\r\n    width: undefined as any,\r\n    height: undefined as any,\r\n  });\r\n\r\n  useEffect(() => {\r\n    function handleResize() {\r\n      setWindowSize({\r\n        width: window.innerWidth,\r\n        height: window.innerHeight,\r\n      });\r\n    }\r\n    window.addEventListener(\"resize\", handleResize);\r\n    handleResize();\r\n\r\n    return () => window.removeEventListener(\"resize\", handleResize);\r\n  }, []);\r\n\r\n  return windowSize;\r\n}\r\n","import axios, { AxiosResponse } from \"axios\";\r\n\r\n// const baseUrl: string = \"http://127.0.0.1:7000\";\r\n\r\nexport const getItems = async (selected: String) => {\r\n  const params = { selected };\r\n\r\n  try {\r\n    const res: AxiosResponse = await axios.get(\"/get-items\", {\r\n      params,\r\n    });\r\n    return res;\r\n  } catch (error) {\r\n    throw new Error(error);\r\n  }\r\n};\r\n\r\nexport const getPlotItems = async () => {\r\n  try {\r\n    const res: AxiosResponse = await axios.get(\"/get-plot\");\r\n    return res;\r\n  } catch (error) {\r\n    throw new Error(error);\r\n  }\r\n};\r\n","import { makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    authcard: {\r\n        marginTop: '10vh',\r\n        minWidth: \"30vw\",\r\n        padding: theme.spacing(3),\r\n    },\r\n    \r\n    link: {\r\n        paddingRight: theme.spacing(2),\r\n        color: \"#3385ff\",\r\n        textDecoration: 'none',\r\n    },\r\n\r\n    chartCard: {\r\n        padding: theme.spacing(3),\r\n    },\r\n    \r\n    searchSelect: {\r\n        textAlignLast: 'center',\r\n    },\r\n}));\r\n\r\nexport default useStyles;","import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport SwipeableViews from \"react-swipeable-views\";\r\n\r\nimport {\r\n  Grid,\r\n  Container,\r\n  CssBaseline,\r\n  Card,\r\n  CardHeader,\r\n  CardContent,\r\n  Typography,\r\n  Select,\r\n  MenuItem,\r\n  Tab,\r\n  Tabs,\r\n  AppBar,\r\n  Box,\r\n} from \"@material-ui/core\";\r\nimport { grey } from \"@material-ui/core/colors\";\r\nimport { useTheme } from \"@material-ui/core/styles\";\r\n\r\nimport { getItems } from \"../../API\";\r\nimport useStyles from \"../../utils/styles\";\r\nimport LineChartSection from \"./line-chart-section\";\r\nimport HistogramChartSection from \"./histogram-chart-section\";\r\nimport BoxChartSection from \"./box-chart-section\";\r\nimport TerrestrialHeatMap from \"./terrestrial-heatmap-chart\";\r\n\r\nconst INIT_MENUS = [\r\n  { id: \"as_needed_handoff\", name: \"Power below threshold handoff\" },\r\n  { id: \"maximum_powee_handoff\", name: \"Maximum power immediate handoff\" },\r\n];\r\n\r\nconst TabPanel = (props: any) => {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`full-width-tabpanel-${index}`}\r\n      aria-labelledby={`full-width-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && <Box p={3}>{children}</Box>}\r\n    </div>\r\n  );\r\n};\r\n\r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.any.isRequired,\r\n  value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index: any) {\r\n  return {\r\n    id: `full-width-tab-${index}`,\r\n    \"aria-controls\": `full-width-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\nfunction ChartPanel() {\r\n  const [traces, setTraces] = useState({} as any);\r\n  const [selected, setSelected] = useState(\"none\");\r\n  const [tab, setTab] = useState(0);\r\n  const theme = useTheme();\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    if (selected !== \"none\")\r\n      getItems(selected)\r\n        .then((res) => {\r\n          let data = eval(\"[\" + res.data + \"]\")[0];\r\n\r\n          Object.keys(data).map((el) => {\r\n            let ctype: String = data[el][\"type\"];\r\n            let gaps: Array<any> = [];\r\n            let durations: Array<any> = [];\r\n            let avgs: Array<any> = [];\r\n\r\n            // Detect chart type and set Traces\r\n            if (ctype === \"line\") {\r\n              data[el][\"data\"].map((item: Array<any>, idx: number) => {\r\n                gaps.push(idx + 1);\r\n                durations.push(item[3]);\r\n                avgs.push(item[4]);\r\n              });\r\n\r\n              setTraces((prevState: any) => ({\r\n                ...prevState,\r\n                [el]: {\r\n                  xTraces: gaps,\r\n                  yTraces: durations,\r\n                  avgTraces: avgs,\r\n                  type: ctype,\r\n                  title: data[el][\"title\"],\r\n                },\r\n              }));\r\n            } else if (ctype === \"histogram\") {\r\n              setTraces((prevState: any) => ({\r\n                ...prevState,\r\n                [el]: {\r\n                  xTraces: data[el][\"data\"],\r\n                  type: ctype,\r\n                  title: data[el][\"title\"],\r\n                },\r\n              }));\r\n            }\r\n          });\r\n        })\r\n        .catch(() => {\r\n          setTraces({});\r\n        });\r\n  }, [selected]);\r\n\r\n  return (\r\n    <Grid container>\r\n      <Container component=\"main\" maxWidth=\"lg\">\r\n        <CssBaseline />\r\n        <Card className={classes.chartCard}>\r\n          <CardHeader\r\n            title={\r\n              <Typography component=\"h1\" variant=\"h5\" className=\"m-3\">\r\n                {`CART Data Statistics Dashboard (Prototype)`}\r\n              </Typography>\r\n            }\r\n          />\r\n          <CardContent className=\"ml-3 mr-3\">\r\n            <AppBar position=\"static\" color=\"default\">\r\n              <Tabs\r\n                value={tab}\r\n                onChange={(e, val) => setTab(val)}\r\n                indicatorColor=\"primary\"\r\n                textColor=\"primary\"\r\n                variant=\"fullWidth\"\r\n                aria-label=\"full width tabs example\"\r\n              >\r\n                <Tab label=\"Data Statistics Dashboard\" {...a11yProps(0)} />\r\n                <Tab label=\"Interpolation Chart\" {...a11yProps(1)} />\r\n              </Tabs>\r\n            </AppBar>\r\n            <SwipeableViews\r\n              axis={theme.direction === \"rtl\" ? \"x-reverse\" : \"x\"}\r\n              index={tab}\r\n              onChangeIndex={(index: any) => setTab(index)}\r\n            >\r\n              <TabPanel value={tab} index={0}>\r\n                <Grid\r\n                  container\r\n                  spacing={3}\r\n                  justify=\"center\"\r\n                  alignItems=\"center\"\r\n                >\r\n                  <Grid item md={4}>\r\n                    <Select\r\n                      name=\"\"\r\n                      value={selected}\r\n                      onChange={(e: any) => setSelected(e.target.value)}\r\n                      className={classes.searchSelect}\r\n                      style={selected === \"none\" ? { color: grey[500] } : {}}\r\n                      fullWidth\r\n                    >\r\n                      <MenuItem value=\"none\" style={{ opacity: 0.87 }} disabled>\r\n                        {\"Select Data Set…\"}\r\n                      </MenuItem>\r\n                      {INIT_MENUS.map((item) => (\r\n                        <MenuItem value={item.id} key={item.id}>\r\n                          {item.name}\r\n                        </MenuItem>\r\n                      ))}\r\n                    </Select>\r\n                  </Grid>\r\n                  <Grid item md={8}></Grid>\r\n                  {Object.keys(traces).map((item) => (\r\n                    <Grid item md={6} key={item}>\r\n                      <Grid container spacing={3}>\r\n                        {traces[item].type === \"line\" && (\r\n                          <Grid item md={12}>\r\n                            <LineChartSection {...traces[item]} />\r\n                          </Grid>\r\n                        )}\r\n                        {traces[item].type === \"histogram\" && (\r\n                          <>\r\n                            <Grid item md={12}>\r\n                              <HistogramChartSection {...traces[item]} />\r\n                            </Grid>\r\n                            <Grid item md={12}>\r\n                              <BoxChartSection {...traces[item]} />\r\n                            </Grid>\r\n                          </>\r\n                        )}\r\n                      </Grid>\r\n                    </Grid>\r\n                  ))}\r\n                </Grid>\r\n              </TabPanel>\r\n              <TabPanel value={tab} index={1}>\r\n                <Grid container justify=\"center\" alignItems=\"center\">\r\n                  <Grid item md={12}>\r\n                    <TerrestrialHeatMap />\r\n                  </Grid>\r\n                </Grid>\r\n              </TabPanel>\r\n            </SwipeableViews>\r\n          </CardContent>\r\n        </Card>\r\n      </Container>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default ChartPanel;\r\n","import React from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\n\r\nimport { useWindowSize } from \"../../../utils/util\";\r\n\r\nfunction LineChartSection(props: any) {\r\n  const size = useWindowSize();\r\n  \r\n  return (\r\n    <Plot\r\n      data={[\r\n        {\r\n          x: props.xTraces,\r\n          y: props.yTraces,\r\n          name: \"Gap Event Duration\",\r\n          type: \"scatter\",\r\n          mode: \"lines+markers\",\r\n          marker: { color: \"red\" },\r\n        },\r\n        {\r\n          x: props.xTraces,\r\n          y: props.avgTraces,\r\n          name: \"Running Average\",\r\n          type: \"scatter\",\r\n          marker: { color: \"blue\" },\r\n        },\r\n      ]}\r\n      layout={{\r\n        title: props.title.toUpperCase(),\r\n        width: size.width * 0.35,\r\n        showlegend: true,\r\n        legend: {\r\n          orientation: \"h\",\r\n          xanchor: \"center\",\r\n          font: {\r\n            family: \"sans-serif\",\r\n            size: 12,\r\n            color: \"#000\",\r\n          },\r\n        },\r\n        margin: {\r\n          l: 60,\r\n          b: 0,\r\n          r: 30,\r\n          t: 30,\r\n          pad: 5,\r\n        },\r\n        xaxis: {\r\n          title: \"Gap Event (Sequence)\",\r\n          titlefont: {\r\n            size: 12,\r\n            color: \"#212529\",\r\n          },\r\n          showgrid: true,\r\n          zerolinecolor: \"#969696\",\r\n          zerolinewidth: 1,\r\n        },\r\n        yaxis: {\r\n          title: \"Gap Duration (seconds)\",\r\n          titlefont: {\r\n            size: 12,\r\n            color: \"#212529\",\r\n          },\r\n          showgrid: true,\r\n          zerolinecolor: \"#969696\",\r\n          zerolinewidth: 1,\r\n        },\r\n      }}\r\n      config={{ displayModeBar: false }}\r\n    />\r\n  );\r\n}\r\n\r\nexport default LineChartSection;\r\n","import React from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\n\r\nimport { useWindowSize } from \"../../../utils/util\";\r\n\r\nfunction HistogramChartSection(props: any) {\r\n  const size = useWindowSize();\r\n  \r\n  return (\r\n    <Plot\r\n      data={[\r\n        {\r\n          x: props.xTraces,\r\n          name: \"Duration\",\r\n          type: \"histogram\",\r\n        },\r\n      ]}\r\n      layout={{\r\n        title: props.title.toUpperCase().split('_').join(' '),\r\n        width: size.width * 0.35,\r\n        showlegend: true,\r\n        legend: {\r\n          orientation: \"h\",\r\n          xanchor: \"center\",\r\n          font: {\r\n            family: \"sans-serif\",\r\n            size: 12,\r\n            color: \"#000\",\r\n          },\r\n        },\r\n        margin: {\r\n          l: 60,\r\n          b: 0,\r\n          r: 30,\r\n          t: 30,\r\n          pad: 5,\r\n        },\r\n        xaxis: {\r\n          title: \"Duration\",\r\n          titlefont: {\r\n            size: 12,\r\n            color: \"#212529\",\r\n          },\r\n          showgrid: true,\r\n          zerolinecolor: \"#969696\",\r\n          zerolinewidth: 1,\r\n        },\r\n        yaxis: {\r\n          title: \"Occurances\",\r\n          titlefont: {\r\n            size: 12,\r\n            color: \"#212529\",\r\n          },\r\n          showgrid: true,\r\n          zerolinecolor: \"#969696\",\r\n          zerolinewidth: 1,\r\n        },\r\n      }}\r\n      config={{ displayModeBar: false }}\r\n    />\r\n  );\r\n}\r\n\r\nexport default HistogramChartSection;\r\n","import React from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\n\r\nimport { useWindowSize } from \"../../../utils/util\";\r\n\r\nfunction BoxChartSection(props: any) {\r\n  const size = useWindowSize();\r\n\r\n  return (\r\n    <Plot\r\n      data={[\r\n        {\r\n          y: props.xTraces,\r\n          name: \"\",\r\n          type: \"box\",\r\n        },\r\n      ]}\r\n      layout={{\r\n        title: `${props.title.toUpperCase().split(\" \")[0]} STATISTICS`,\r\n        width: size.width * 0.35,\r\n        margin: {\r\n          l: 60,\r\n          b: 0,\r\n          r: 30,\r\n          t: 30,\r\n          pad: 5,\r\n        },\r\n        yaxis: {\r\n          title: \"Duration\",\r\n          titlefont: {\r\n            size: 12,\r\n            color: \"#212529\",\r\n          },\r\n          showgrid: true,\r\n          zerolinecolor: \"#969696\",\r\n          zerolinewidth: 1,\r\n        },\r\n      }}\r\n      config={{ displayModeBar: false }}\r\n    />\r\n  );\r\n}\r\n\r\nexport default BoxChartSection;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\nimport { Grid, Button, Box } from \"@material-ui/core\";\r\n\r\nimport { getPlotItems } from \"../../../API\";\r\n\r\nconst INIT_SOURCE = {\r\n  heatmap: {},\r\n  intrpl: {},\r\n};\r\n\r\nfunction TerrestrialHeatMap() {\r\n  const [mode, setMode] = useState(\"heatmap\");\r\n  const [source, setSource] = useState(INIT_SOURCE as any);\r\n\r\n  useEffect(() => {\r\n    getPlotItems()\r\n      .then((res: any) => {\r\n        setSource(res.data);\r\n      })\r\n      .catch(() => setSource(INIT_SOURCE));\r\n  }, []);\r\n  return (\r\n    <>\r\n      <Grid container justify=\"center\" alignItems=\"center\">\r\n        {mode === \"heatmap\" ? (\r\n          <>\r\n            <Grid item md={6}>\r\n              <Plot\r\n                data={[\r\n                  {\r\n                    x: source.heatmap.x,\r\n                    y: source.heatmap.y,\r\n                    z: source.heatmap.z,\r\n                    type: \"heatmap\",\r\n                  },\r\n                ]}\r\n                layout={{\r\n                  width: 500,\r\n                  height: 500,\r\n                  title: \"\",\r\n                  xaxis: {\r\n                    title: \"Longitude (deg)\",\r\n                    zeroline: false,\r\n                    range: [-180, 180],\r\n                    tickmode: \"linear\",\r\n                    tick0: -180,\r\n                    dtick: 40,\r\n                  },\r\n                  yaxis: {\r\n                    title: \"Latitude (deg)\",\r\n                    zeroline: false,\r\n                    range: [-90, 90],\r\n                    tickmode: \"linear\",\r\n                    tick0: -90,\r\n                    dtick: 30,\r\n                  },\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid item md={6}>\r\n              <Plot\r\n                data={[\r\n                  {\r\n                    lat: source.heatmap.x,\r\n                    lon: source.heatmap.y,\r\n                    z: source.heatmap.z,\r\n                    type: \"densitymapbox\",\r\n                  },\r\n                ]}\r\n                layout={{\r\n                  width: 500,\r\n                  height: 500,\r\n                  title: \"\",\r\n                  mapbox: {\r\n                    center: { lon: 60, lat: 30 },\r\n                    style: \"outdoors\",\r\n                    zoom: 2,\r\n                  },\r\n                }}\r\n                config={{\r\n                  mapboxAccessToken:\r\n                    \"pk.eyJ1IjoicmxhZm9udGFpbmUiLCJhIjoiY2tpMG82ZjNiMHZ3NjJxcDV1cjAzaTJ4eCJ9.VJSnQNJxiJK-jixU6KaFYQ\",\r\n                }}\r\n              />\r\n            </Grid>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <Grid item md={6}>\r\n              <Plot\r\n                data={[\r\n                  {\r\n                    x: source.intrpl.x,\r\n                    y: source.intrpl.y,\r\n                    z: source.intrpl.z,\r\n                    type: \"heatmap\",\r\n                  },\r\n                ]}\r\n                layout={{\r\n                  width: 500,\r\n                  height: 500,\r\n                  title: \"\",\r\n                  xaxis: {\r\n                    title: \"Longitude (deg)\",\r\n                    zeroline: false,\r\n                    range: [-180, 180],\r\n                    tickmode: \"linear\",\r\n                    tick0: -180,\r\n                    dtick: 40,\r\n                  },\r\n                  yaxis: {\r\n                    title: \"Latitude (deg)\",\r\n                    zeroline: false,\r\n                    range: [-90, 90],\r\n                    tickmode: \"linear\",\r\n                    tick0: -90,\r\n                    dtick: 30,\r\n                  },\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid item md={6}>\r\n              <Plot\r\n                data={[\r\n                  {\r\n                    lat: source.intrpl.x,\r\n                    lon: source.intrpl.x,\r\n                    z: source.intrpl.z,\r\n                    type: \"densitymapbox\",\r\n                    hoverinfo: \"skip\",\r\n                  },\r\n                ]}\r\n                layout={{\r\n                  width: 500,\r\n                  height: 500,\r\n                  title: \"\",\r\n                  mapbox: {\r\n                    center: { lon: 60, lat: 30 },\r\n                    style: \"outdoors\",\r\n                    zoom: 2,\r\n                  },\r\n                }}\r\n                config={{\r\n                  mapboxAccessToken:\r\n                    \"pk.eyJ1IjoicmxhZm9udGFpbmUiLCJhIjoiY2tpMG82ZjNiMHZ3NjJxcDV1cjAzaTJ4eCJ9.VJSnQNJxiJK-jixU6KaFYQ\",\r\n                }}\r\n              />\r\n            </Grid>\r\n          </>\r\n        )}\r\n      </Grid>\r\n      <Grid item md={6}>\r\n        <Box\r\n          borderColor=\"primary.main\"\r\n          border={2}\r\n          borderRadius={5}\r\n          padding={2}\r\n          style={{ zIndex: 1000 }}\r\n        >\r\n          <Button\r\n            name=\"heatmap\"\r\n            variant=\"contained\"\r\n            size=\"small\"\r\n            color=\"primary\"\r\n            onClick={(e) => setMode(e.currentTarget.name)}\r\n            style={{ width: \"48%\", marginRight: \"4%\" }}\r\n          >\r\n            {\"Heat Map\"}\r\n          </Button>\r\n          <Button\r\n            name=\"intrpl\"\r\n            variant=\"contained\"\r\n            size=\"small\"\r\n            color=\"primary\"\r\n            onClick={(e) => setMode(e.currentTarget.name)}\r\n            style={{ width: \"48%\" }}\r\n          >\r\n            {\"Interpolation\"}\r\n          </Button>\r\n        </Box>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TerrestrialHeatMap;\r\n"],"sourceRoot":""}