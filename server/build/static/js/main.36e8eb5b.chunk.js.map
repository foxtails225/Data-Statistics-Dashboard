{"version":3,"sources":["components/chart-panel/index.tsx","components/chart-panel/terrestrial-heatmap-chart/index.tsx","components/cart-panel/analyze-regression-section/charts-libs-section/index.tsx","components/cart-panel/analyze-regression-section/charts-libs-section/add-on/minusAddon.tsx","components/cart-panel/analyze-regression-section/charts-libs-section/add-on/contentAddon.tsx","components/cart-panel/analyze-regression-section/two-view-section/index.tsx","components/cart-panel/analyze-regression-section/three-view-section/index.tsx","components/cart-panel/analyze-regression-section/index.tsx","components/cart-panel/index.tsx","components/auth-panel/NoMatch.tsx","App.tsx","index.tsx","API.ts","utils/styles.ts","utils/util.ts","components/chart-panel/line-chart-section/index.tsx","components/chart-panel/histogram-chart-section/index.tsx","components/chart-panel/box-chart-section/index.tsx","components/cart-panel/analyze-regression-section/charts-libs-section/add-on/plusAddon.tsx"],"names":["INIT_MENUS","id","name","TabPanel","props","children","value","index","other","role","hidden","aria-labelledby","p","a11yProps","ChartPanel","useState","traces","setTraces","isOpen","setIsOpen","selected","setSelected","tab","setTab","theme","useTheme","classes","useStyles","useEffect","getItems","then","res","data","eval","Object","keys","map","el","ctype","gaps","durations","avgs","item","idx","push","prevState","xTraces","yTraces","avgTraces","type","title","catch","container","component","maxWidth","className","chartCard","variant","action","color","onClick","position","onChange","e","val","indicatorColor","textColor","aria-label","label","axis","direction","onChangeIndex","spacing","justify","alignItems","md","target","searchSelect","style","grey","fullWidth","opacity","disabled","key","onClose","INIT_SOURCE","heatmap","intrpl","TerrestrialHeatMap","mode","setMode","source","setSource","getPlotItems","x","y","z","layout","width","height","xaxis","zeroline","range","tickmode","tick0","dtick","yaxis","lat","lon","mapbox","center","zoom","config","mapboxAccessToken","hoverinfo","borderColor","border","borderRadius","padding","zIndex","size","currentTarget","marginRight","MENU_ITEMS","dataset","ChartsLibsSection","anchorEl","setAnchorEl","length","handleSelected","includes","filter","onAnchorEl","onSelected","Fragment","sort","MinusAddon","ContentAddon","TwoViewSection","checked","setChecked","setConfig","plot_rows","surface_rows","unpack","rows","row","configData","inclination","parseInt","inc","new_plot_rows","new_surface_rows","show_surface","show_scatter","line","alt","marker","Grid","autosize","showlegend","hovermode","margin","l","r","b","t","yAxisLabel","event","points","Typography","ThreeViewSection","reset","setReset","parseFloat","window","innerWidth","scene","aspectratio","camera","eye","up","Math","max","zaxis","zAxisLabel","min","INIT_CHECK_STATUS","AnalyzeRegressionSection","viewMethod","setViewMethod","plot_value","handleViewChange","handleCheck","textAlign","IconButton","Box","Button","Divider","orientation","flexItem","marginLeft","FormControlLabel","control","Checkbox","Tooltip","gutterBottom","dangerouslySetInnerHTML","__html","placement","tooltip","Provider","Node","formula","text","equation","maxAltitude","isLegend","isSub","INIT_PARAMS","Transition","React","forwardRef","ref","Slide","CartPanel","isLoading","setIsLoading","setTerrestrial","setMaxAltitude","setCoefficients","setText","metric","split","getCartItems","terrestrial","coefficients","Dialog","open","TransitionComponent","paper","dialogDeep","CssBaseline","dialogCloseBtn","Close","DialogContent","dividers","m","selectedItem","NoMatch","Container","Card","authcard","CardHeader","CardContent","to","link","App","exact","path","ReactDOM","render","document","getElementById","a","params","axios","get","Error","post","makeStyles","marginTop","minWidth","paddingRight","textDecoration","textAlignLast","right","top","palette","useWindowSize","undefined","windowSize","setWindowSize","handleResize","innerHeight","addEventListener","removeEventListener","LineChartSection","toUpperCase","legend","xanchor","font","family","pad","titlefont","showgrid","zerolinecolor","zerolinewidth","displayModeBar","HistogramChartSection","join","BoxChartSection","PlusAddon","keepMounted","Boolean"],"mappings":"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","file":"static/js/main.36e8eb5b.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport SwipeableViews from \"react-swipeable-views\";\r\n\r\nimport {\r\n  Grid,\r\n  Container,\r\n  CssBaseline,\r\n  Card,\r\n  CardHeader,\r\n  CardContent,\r\n  Typography,\r\n  Button,\r\n  Select,\r\n  MenuItem,\r\n  Tab,\r\n  Tabs,\r\n  AppBar,\r\n  Box,\r\n} from \"@material-ui/core\";\r\nimport { grey } from \"@material-ui/core/colors\";\r\nimport { useTheme } from \"@material-ui/core/styles\";\r\n\r\nimport { getItems } from \"../../API\";\r\nimport useStyles from \"../../utils/styles\";\r\nimport LineChartSection from \"./line-chart-section\";\r\nimport HistogramChartSection from \"./histogram-chart-section\";\r\nimport BoxChartSection from \"./box-chart-section\";\r\nimport TerrestrialHeatMap from \"./terrestrial-heatmap-chart\";\r\nimport CartPanel from \"../cart-panel\";\r\n\r\nconst INIT_MENUS = [\r\n  { id: \"as_needed_handoff\", name: \"Power below threshold handoff\" },\r\n  { id: \"maximum_powee_handoff\", name: \"Maximum power immediate handoff\" },\r\n];\r\n\r\nconst TabPanel = (props: any) => {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`full-width-tabpanel-${index}`}\r\n      aria-labelledby={`full-width-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && <Box p={3}>{children}</Box>}\r\n    </div>\r\n  );\r\n};\r\n\r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.any.isRequired,\r\n  value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index: any) {\r\n  return {\r\n    id: `full-width-tab-${index}`,\r\n    \"aria-controls\": `full-width-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\nfunction ChartPanel() {\r\n  const [traces, setTraces] = useState({} as any);\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [selected, setSelected] = useState(\"none\");\r\n  const [tab, setTab] = useState(0);\r\n  const theme = useTheme();\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    if (selected !== \"none\")\r\n      getItems(selected)\r\n        .then((res) => {\r\n          let data = eval(\"[\" + res.data + \"]\")[0];\r\n\r\n          Object.keys(data).map((el) => {\r\n            let ctype: String = data[el][\"type\"];\r\n            let gaps: Array<any> = [];\r\n            let durations: Array<any> = [];\r\n            let avgs: Array<any> = [];\r\n\r\n            // Detect chart type and set Traces\r\n            if (ctype === \"line\") {\r\n              data[el][\"data\"].map((item: Array<any>, idx: number) => {\r\n                gaps.push(idx + 1);\r\n                durations.push(item[3]);\r\n                avgs.push(item[4]);\r\n              });\r\n\r\n              setTraces((prevState: any) => ({\r\n                ...prevState,\r\n                [el]: {\r\n                  xTraces: gaps,\r\n                  yTraces: durations,\r\n                  avgTraces: avgs,\r\n                  type: ctype,\r\n                  title: data[el][\"title\"],\r\n                },\r\n              }));\r\n            } else if (ctype === \"histogram\") {\r\n              setTraces((prevState: any) => ({\r\n                ...prevState,\r\n                [el]: {\r\n                  xTraces: data[el][\"data\"],\r\n                  type: ctype,\r\n                  title: data[el][\"title\"],\r\n                },\r\n              }));\r\n            }\r\n          });\r\n        })\r\n        .catch(() => {\r\n          setTraces({});\r\n        });\r\n  }, [selected]);\r\n\r\n  return (\r\n    <>\r\n      <Grid container>\r\n        <Container component=\"main\" maxWidth=\"lg\">\r\n          <CssBaseline />\r\n          <Card className={classes.chartCard}>\r\n            <CardHeader\r\n              title={\r\n                <Typography component=\"h1\" variant=\"h5\" className=\"m-3\">\r\n                  {`CART Data Statistics Dashboard (Prototype)`}\r\n                </Typography>\r\n              }\r\n              action={\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  onClick={() => setIsOpen(true)}\r\n                >\r\n                  {\"Open Chart\"}\r\n                </Button>\r\n              }\r\n            />\r\n            <CardContent className=\"ml-3 mr-3\">\r\n              <AppBar position=\"static\" color=\"default\">\r\n                <Tabs\r\n                  value={tab}\r\n                  onChange={(e, val) => setTab(val)}\r\n                  indicatorColor=\"primary\"\r\n                  textColor=\"primary\"\r\n                  variant=\"fullWidth\"\r\n                  aria-label=\"full width tabs example\"\r\n                >\r\n                  <Tab label=\"Data Statistics Dashboard\" {...a11yProps(0)} />\r\n                  <Tab label=\"Heat Map\" {...a11yProps(1)} />\r\n                </Tabs>\r\n              </AppBar>\r\n              <SwipeableViews\r\n                axis={theme.direction === \"rtl\" ? \"x-reverse\" : \"x\"}\r\n                index={tab}\r\n                onChangeIndex={(index: any) => setTab(index)}\r\n              >\r\n                <TabPanel value={tab} index={0}>\r\n                  <Grid\r\n                    container\r\n                    spacing={3}\r\n                    justify=\"center\"\r\n                    alignItems=\"center\"\r\n                  >\r\n                    <Grid item md={4}>\r\n                      <Select\r\n                        name=\"\"\r\n                        value={selected}\r\n                        onChange={(e: any) => setSelected(e.target.value)}\r\n                        className={classes.searchSelect}\r\n                        style={selected === \"none\" ? { color: grey[500] } : {}}\r\n                        fullWidth\r\n                      >\r\n                        <MenuItem\r\n                          value=\"none\"\r\n                          style={{ opacity: 0.87 }}\r\n                          disabled\r\n                        >\r\n                          {\"Select Data Set…\"}\r\n                        </MenuItem>\r\n                        {INIT_MENUS.map((item) => (\r\n                          <MenuItem value={item.id} key={item.id}>\r\n                            {item.name}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </Select>\r\n                    </Grid>\r\n                    <Grid item md={8}></Grid>\r\n                    {Object.keys(traces).map((item) => (\r\n                      <Grid item md={6} key={item}>\r\n                        <Grid container spacing={3}>\r\n                          {traces[item].type === \"line\" && (\r\n                            <Grid item md={12}>\r\n                              <LineChartSection {...traces[item]} />\r\n                            </Grid>\r\n                          )}\r\n                          {traces[item].type === \"histogram\" && (\r\n                            <>\r\n                              <Grid item md={12}>\r\n                                <HistogramChartSection {...traces[item]} />\r\n                              </Grid>\r\n                              <Grid item md={12}>\r\n                                <BoxChartSection {...traces[item]} />\r\n                              </Grid>\r\n                            </>\r\n                          )}\r\n                        </Grid>\r\n                      </Grid>\r\n                    ))}\r\n                  </Grid>\r\n                </TabPanel>\r\n                <TabPanel value={tab} index={1}>\r\n                  <Grid container justify=\"center\" alignItems=\"center\">\r\n                    <Grid item md={12}>\r\n                      <TerrestrialHeatMap />\r\n                    </Grid>\r\n                  </Grid>\r\n                </TabPanel>\r\n              </SwipeableViews>\r\n            </CardContent>\r\n          </Card>\r\n        </Container>\r\n      </Grid>\r\n      <CartPanel isOpen={isOpen} onClose={() => setIsOpen(false)} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ChartPanel;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\nimport { Grid, Button, Box } from \"@material-ui/core\";\r\n\r\nimport { getPlotItems } from \"../../../API\";\r\n\r\nconst INIT_SOURCE = {\r\n  heatmap: {},\r\n  intrpl: {},\r\n};\r\n\r\nfunction TerrestrialHeatMap() {\r\n  const [mode, setMode] = useState(\"heatmap\");\r\n  const [source, setSource] = useState(INIT_SOURCE as any);\r\n\r\n  useEffect(() => {\r\n    getPlotItems()\r\n      .then((res: any) => {\r\n        setSource(res.data);\r\n      })\r\n      .catch(() => setSource(INIT_SOURCE));\r\n  }, []);\r\n  return (\r\n    <>\r\n      <Grid container justify=\"center\" alignItems=\"center\">\r\n        {mode === \"heatmap\" ? (\r\n          <>\r\n            <Grid item md={6}>\r\n              <Plot\r\n                data={[\r\n                  {\r\n                    x: source.heatmap.x,\r\n                    y: source.heatmap.y,\r\n                    z: source.heatmap.z,\r\n                    type: \"heatmap\",\r\n                  },\r\n                ]}\r\n                layout={{\r\n                  width: 500,\r\n                  height: 500,\r\n                  title: \"\",\r\n                  xaxis: {\r\n                    title: \"Longitude (deg)\",\r\n                    zeroline: false,\r\n                    range: [-180, 180],\r\n                    tickmode: \"linear\",\r\n                    tick0: -180,\r\n                    dtick: 40,\r\n                  },\r\n                  yaxis: {\r\n                    title: \"Latitude (deg)\",\r\n                    zeroline: false,\r\n                    range: [-90, 90],\r\n                    tickmode: \"linear\",\r\n                    tick0: -90,\r\n                    dtick: 30,\r\n                  },\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid item md={6}>\r\n              <Plot\r\n                data={[\r\n                  {\r\n                    lat: source.heatmap.x,\r\n                    lon: source.heatmap.y,\r\n                    z: source.heatmap.z,\r\n                    type: \"densitymapbox\",\r\n                  },\r\n                ]}\r\n                layout={{\r\n                  width: 500,\r\n                  height: 500,\r\n                  title: \"\",\r\n                  mapbox: {\r\n                    center: { lon: 60, lat: 30 },\r\n                    style: \"outdoors\",\r\n                    zoom: 2,\r\n                  },\r\n                }}\r\n                config={{\r\n                  mapboxAccessToken:\r\n                    \"pk.eyJ1IjoicmxhZm9udGFpbmUiLCJhIjoiY2tpMG82ZjNiMHZ3NjJxcDV1cjAzaTJ4eCJ9.VJSnQNJxiJK-jixU6KaFYQ\",\r\n                }}\r\n              />\r\n            </Grid>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <Grid item md={6}>\r\n              <Plot\r\n                data={[\r\n                  {\r\n                    x: source.intrpl.x,\r\n                    y: source.intrpl.y,\r\n                    z: source.intrpl.z,\r\n                    type: \"heatmap\",\r\n                  },\r\n                ]}\r\n                layout={{\r\n                  width: 500,\r\n                  height: 500,\r\n                  title: \"\",\r\n                  xaxis: {\r\n                    title: \"Longitude (deg)\",\r\n                    zeroline: false,\r\n                    range: [-180, 180],\r\n                    tickmode: \"linear\",\r\n                    tick0: -180,\r\n                    dtick: 40,\r\n                  },\r\n                  yaxis: {\r\n                    title: \"Latitude (deg)\",\r\n                    zeroline: false,\r\n                    range: [-90, 90],\r\n                    tickmode: \"linear\",\r\n                    tick0: -90,\r\n                    dtick: 30,\r\n                  },\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid item md={6}>\r\n              <Plot\r\n                data={[\r\n                  {\r\n                    lat: source.intrpl.x,\r\n                    lon: source.intrpl.x,\r\n                    z: source.intrpl.z,\r\n                    type: \"densitymapbox\",\r\n                    hoverinfo: \"skip\",\r\n                  },\r\n                ]}\r\n                layout={{\r\n                  width: 500,\r\n                  height: 500,\r\n                  title: \"\",\r\n                  mapbox: {\r\n                    center: { lon: 60, lat: 30 },\r\n                    style: \"outdoors\",\r\n                    zoom: 2,\r\n                  },\r\n                }}\r\n                config={{\r\n                  mapboxAccessToken:\r\n                    \"pk.eyJ1IjoicmxhZm9udGFpbmUiLCJhIjoiY2tpMG82ZjNiMHZ3NjJxcDV1cjAzaTJ4eCJ9.VJSnQNJxiJK-jixU6KaFYQ\",\r\n                }}\r\n              />\r\n            </Grid>\r\n          </>\r\n        )}\r\n      </Grid>\r\n      <Grid item md={6}>\r\n        <Box\r\n          borderColor=\"primary.main\"\r\n          border={2}\r\n          borderRadius={5}\r\n          padding={2}\r\n          style={{ zIndex: 1000 }}\r\n        >\r\n          <Button\r\n            name=\"heatmap\"\r\n            variant=\"contained\"\r\n            size=\"small\"\r\n            color=\"primary\"\r\n            onClick={(e) => setMode(e.currentTarget.name)}\r\n            style={{ width: \"48%\", marginRight: \"4%\" }}\r\n          >\r\n            {\"Non-Interpolated\"}\r\n          </Button>\r\n          <Button\r\n            name=\"intrpl\"\r\n            variant=\"contained\"\r\n            size=\"small\"\r\n            color=\"primary\"\r\n            onClick={(e) => setMode(e.currentTarget.name)}\r\n            style={{ width: \"48%\" }}\r\n          >\r\n            {\"Interpolated\"}\r\n          </Button>\r\n        </Box>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TerrestrialHeatMap;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport { getItems } from \"../../../../API\";\r\nimport MinusAddon from \"./add-on/minusAddon\";\r\nimport PlusAddon from \"./add-on/plusAddon\";\r\nimport ContentAddon from \"./add-on/contentAddon\";\r\nimport LineChartSection from \"../../../chart-panel/line-chart-section\";\r\nimport HistogramChartSection from \"../../../chart-panel/histogram-chart-section\";\r\nimport BoxChartSection from \"../../../chart-panel/box-chart-section\";\r\n\r\nconst MENU_ITEMS = [\r\n  { id: 1, dataset: \"coverage\", name: \"Running Average\" },\r\n  { id: 2, dataset: \"coverage_histogram\", name: \"Distribution\" },\r\n  { id: 3, dataset: \"coverage\", name: \"Statistics Chart\" },\r\n];\r\n\r\nfunction ChartsLibsSection() {\r\n  const [traces, setTraces] = useState({} as any);\r\n  const [selected, setSelected] = useState([] as any);\r\n  const [anchorEl, setAnchorEl] = useState(null as any);\r\n\r\n  useEffect(() => {\r\n    if (selected.length > 0) {\r\n      getItems(\"as_needed_handoff\")\r\n        .then((res) => {\r\n          let data = eval(\"[\" + res.data + \"]\")[0];\r\n\r\n          Object.keys(data).map((el) => {\r\n            let ctype: String = data[el][\"type\"];\r\n            let gaps: Array<any> = [];\r\n            let durations: Array<any> = [];\r\n            let avgs: Array<any> = [];\r\n\r\n            // Detect chart type and set Traces\r\n            if (ctype === \"line\") {\r\n              data[el][\"data\"].map((item: Array<any>, idx: number) => {\r\n                gaps.push(idx + 1);\r\n                durations.push(item[3]);\r\n                avgs.push(item[4]);\r\n              });\r\n\r\n              setTraces((prevState: any) => ({\r\n                ...prevState,\r\n                [el]: {\r\n                  xTraces: gaps,\r\n                  yTraces: durations,\r\n                  avgTraces: avgs,\r\n                  type: ctype,\r\n                  title: data[el][\"title\"],\r\n                },\r\n              }));\r\n            } else if (ctype === \"histogram\") {\r\n              setTraces((prevState: any) => ({\r\n                ...prevState,\r\n                [el]: {\r\n                  xTraces: data[el][\"data\"],\r\n                  type: ctype,\r\n                  title: data[el][\"title\"],\r\n                },\r\n              }));\r\n            }\r\n          });\r\n        })\r\n        .catch(() => {\r\n          setTraces({});\r\n        });\r\n    }\r\n  }, [selected]);\r\n\r\n  const handleSelected = (id: any, type: string) => {\r\n    if (!selected.includes(id) && type === \"add\") {\r\n      setSelected((prevState: any) => [...prevState, id]);\r\n    } else if (type === \"remove\") {\r\n      setSelected(selected.filter((item: any) => item !== id));\r\n    }\r\n    setAnchorEl(null);\r\n  };\r\n  \r\n  return (\r\n    <>\r\n      {selected.length === 0 && (\r\n        <PlusAddon\r\n          selected={selected}\r\n          anchorEl={anchorEl}\r\n          onAnchorEl={(value: any) => setAnchorEl(value)}\r\n          onSelected={(value: any) => handleSelected(value, \"add\")}\r\n        />\r\n      )}\r\n      {MENU_ITEMS.map(\r\n        (item: any) =>\r\n          Object.keys(traces).includes(item.dataset) &&\r\n          selected.includes(item.id) && (\r\n            <React.Fragment key={item.id}>\r\n              <MinusAddon\r\n                id={item.id}\r\n                selected={selected}\r\n                anchorEl={anchorEl}\r\n                onAnchorEl={(value: any) => setAnchorEl(value)}\r\n                onSelected={(value: any) => handleSelected(value, \"remove\")}\r\n              />\r\n              <Grid item md={9}>\r\n                {item.id === 1 && (\r\n                  <LineChartSection {...traces[item.dataset]} />\r\n                )}\r\n                {item.id === 2 && (\r\n                  <HistogramChartSection {...traces[item.dataset]} />\r\n                )}\r\n                {item.id === 3 && (\r\n                  <BoxChartSection {...traces[item.dataset]} />\r\n                )}\r\n              </Grid>\r\n              <ContentAddon />\r\n              {selected.sort()[selected.length - 1] === item.id && (\r\n                <PlusAddon\r\n                  selected={selected}\r\n                  anchorEl={anchorEl}\r\n                  onAnchorEl={(value: any) => setAnchorEl(value)}\r\n                  onSelected={(value: any) => handleSelected(value, \"add\")}\r\n                />\r\n              )}\r\n            </React.Fragment>\r\n          )\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ChartsLibsSection;\r\n","import React from \"react\";\r\nimport {\r\n  Grid,\r\n  IconButton,\r\n  Divider,\r\n} from \"@material-ui/core\";\r\nimport RemoveCircleOutlineIcon from \"@material-ui/icons/RemoveCircleOutline\";\r\n\r\nfunction MinusAddon(props: any) {\r\n  return (\r\n    <Grid item md={12}>\r\n      <Grid container justify=\"center\" alignItems=\"center\">\r\n        <Grid item style={{ width: \"4%\" }}>\r\n          <IconButton onClick={() => props.onSelected(props.id)}>\r\n            <RemoveCircleOutlineIcon />\r\n          </IconButton>\r\n        </Grid>\r\n        <Grid item md={11} style={{ width: \"96%\" }}>\r\n          <Divider />\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default MinusAddon;\r\n","import React from \"react\";\r\nimport { Grid, Typography } from \"@material-ui/core\";\r\n\r\nfunction ContentAddon(props: any) {\r\n  return (\r\n    <Grid item md={3}>\r\n      <Grid container alignItems=\"center\" justify=\"center\">\r\n        <Grid item md={12}>\r\n          <Typography component=\"strong\" variant=\"body1\">\r\n            {\"Options\"}\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item md={12}>\r\n          <Typography component=\"strong\" variant=\"body1\">\r\n            {\"Metrics\"}\r\n          </Typography>\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default ContentAddon;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\nimport { Grid, Typography, } from \"@material-ui/core\";\r\n\r\nfunction TwoViewSection(props: any) {\r\n  const [checked, setChecked] = useState(props.checked);\r\n  const [config, setConfig] = useState([]);\r\n  const plot_rows = props.plot_rows;\r\n  const surface_rows = props.surface_rows;\r\n\r\n  useEffect(() => {\r\n    setChecked(props.checked);\r\n  }, [props.checked]);\r\n\r\n  const unpack = (rows: Array<any>, key: any) => {\r\n    return rows.map(function (row: any) {\r\n      return row[key];\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    let configData: any = [];\r\n    const inclination = parseInt(props.inc);\r\n    const new_plot_rows = plot_rows.filter(\r\n      (row: any) => row.inclination === inclination\r\n    );\r\n    const new_surface_rows = surface_rows.filter(\r\n      (row: any) => row.inclination === inclination\r\n    );\r\n    if (checked.show_surface === true && checked.show_scatter === true) {\r\n      configData = [\r\n        {\r\n          x: unpack(new_plot_rows, \"altitude\"),\r\n          y: unpack(new_plot_rows, \"value\"),\r\n          name: \"Model data\",\r\n          mode: \"markers\",\r\n          type: \"scatter\",\r\n          color: \"rgb(23, 190, 207)\",\r\n        },\r\n        {\r\n          x: unpack(new_surface_rows, \"altitude\"),\r\n          y: unpack(new_surface_rows, \"value\"),\r\n          name: \"Model curve\",\r\n          mode: \"lines\",\r\n          line: {\r\n            color: \"rgb(252, 154, 7)\",\r\n          },\r\n        },\r\n        {\r\n          x: [props.alt],\r\n          y: [props.value],\r\n          name: \"User\",\r\n          mode: \"markers\",\r\n          type: \"scatter\",\r\n          marker: {\r\n            color: \"red\",\r\n            size: 10,\r\n          },\r\n        },\r\n      ];\r\n    } else if (\r\n      checked.show_surface === false &&\r\n      checked.show_scatter === true\r\n    ) {\r\n      configData = [\r\n        {\r\n          x: unpack(new_plot_rows, \"altitude\"),\r\n          y: unpack(new_plot_rows, \"value\"),\r\n          name: \"Model data\",\r\n          mode: \"markers\",\r\n          type: \"scatter\",\r\n          color: \"rgb(23, 190, 207)\",\r\n        },\r\n        {\r\n          x: [],\r\n          y: [],\r\n          mode: \"markers\",\r\n          type: \"scatter\",\r\n        },\r\n        {\r\n          x: [props.alt],\r\n          y: [props.value],\r\n          name: \"User\",\r\n          mode: \"markers\",\r\n          type: \"scatter\",\r\n          marker: {\r\n            color: \"red\",\r\n            size: 10,\r\n          },\r\n        },\r\n      ];\r\n    } else if (\r\n      checked.show_surface === true &&\r\n      checked.show_scatter === false\r\n    ) {\r\n      configData = [\r\n        {\r\n          x: unpack(new_surface_rows, \"altitude\"),\r\n          y: unpack(new_surface_rows, \"value\"),\r\n          name: \"Model curve\",\r\n          mode: \"lines\",\r\n          line: {\r\n            color: \"rgb(252, 154, 7)\",\r\n          },\r\n        },\r\n        {\r\n          x: [],\r\n          y: [],\r\n          mode: \"markers\",\r\n          type: \"scatter\",\r\n        },\r\n        {\r\n          x: [props.alt],\r\n          y: [props.value],\r\n          name: \"User\",\r\n          mode: \"markers\",\r\n          type: \"scatter\",\r\n          marker: {\r\n            color: \"red\",\r\n            size: 10,\r\n          },\r\n        },\r\n      ];\r\n    } else if (\r\n      checked.show_surface === false &&\r\n      checked.show_scatter === false\r\n    ) {\r\n      configData = [\r\n        {\r\n          x: [],\r\n          y: [],\r\n          mode: \"lines\",\r\n        },\r\n        {\r\n          x: [],\r\n          y: [],\r\n          mode: \"markers\",\r\n          type: \"scatter\",\r\n        },\r\n        {\r\n          x: [props.alt],\r\n          y: [props.value],\r\n          name: \"User\",\r\n          mode: \"markers\",\r\n          type: \"scatter\",\r\n          marker: {\r\n            color: \"red\",\r\n            size: 10,\r\n          },\r\n        },\r\n      ];\r\n    }\r\n\r\n    setConfig(configData);\r\n  }, [checked, plot_rows, surface_rows, props.inc]);\r\n\r\n  const handleClick = (event: any) => {\r\n    const { points } = event;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid item md={9}>\r\n        <Plot\r\n          data={config}\r\n          layout={{\r\n            autosize: true,\r\n            showlegend: false,\r\n            hovermode: \"closest\",\r\n            width: 550,\r\n            height: 400,\r\n            margin: {\r\n              l: 60,\r\n              r: 15,\r\n              b: 35,\r\n              t: 15,\r\n            },\r\n            xaxis: {\r\n              title: `Altitude (km), Inclination=${props.inc} deg`,\r\n              type: \"linear\",\r\n              zeroline: false,\r\n            },\r\n            yaxis: {\r\n              title: props.yAxisLabel,\r\n              type: \"linear\",\r\n              zeroline: false,\r\n            },\r\n          }}\r\n          onClick={handleClick}\r\n        />\r\n      </Grid>\r\n      <Grid item md={3}>\r\n        <Grid container alignItems=\"center\" justify=\"center\">\r\n          <Grid item md={12}>\r\n            <Typography component=\"strong\" variant=\"body1\">\r\n              {\"Options\"}\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item md={12}>\r\n            <Typography component=\"strong\" variant=\"body1\">\r\n              {\"Metrics\"}\r\n            </Typography>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TwoViewSection;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\nimport { Grid, Typography } from \"@material-ui/core\";\r\n\r\nfunction ThreeViewSection(props: any) {\r\n  const [checked, setChecked] = useState(props.checked);\r\n  const [reset, setReset] = useState(false);\r\n  const [config, setConfig] = useState([]);\r\n  const plot_rows = props.plot_rows;\r\n  const surface_rows = props.surface_rows;\r\n\r\n  useEffect(() => {\r\n    setReset(!reset);\r\n  }, [props.reset]);\r\n\r\n  useEffect(() => {\r\n    setChecked(props.checked);\r\n  }, [props.checked]);\r\n\r\n  const unpack = (rows: Array<any>, key: any) => {\r\n    return rows.map(function (row) {\r\n      return row[key];\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    let configData: any = [];\r\n    if (checked.show_surface === true && checked.show_scatter === true) {\r\n      configData = [\r\n        {\r\n          x: unpack(plot_rows, \"altitude\"),\r\n          y: unpack(plot_rows, \"inclination\"),\r\n          z: unpack(plot_rows, \"value\"),\r\n          name: \"Model data\",\r\n          mode: \"markers\",\r\n          type: \"scatter3d\",\r\n          opacity: 1,\r\n          marker: {\r\n            color: \"rgb(23, 190, 207)\",\r\n            size: 2,\r\n          },\r\n        },\r\n        {\r\n          x: unpack(surface_rows, \"altitude\"),\r\n          y: unpack(surface_rows, \"inclination\"),\r\n          z: unpack(surface_rows, \"value\"),\r\n          name: \"Model surface\",\r\n          opacity: 0.3,\r\n          type: \"mesh3d\",\r\n          color: \"rgb(252, 154, 7)\",\r\n        },\r\n        {\r\n          x: [props.alt],\r\n          y: [props.inc],\r\n          z: [props.value],\r\n          name: \"User\",\r\n          mode: \"markers\",\r\n          type: \"scatter3d\",\r\n          opacity: 1,\r\n          marker: {\r\n            color: \"red\",\r\n            size: 5,\r\n          },\r\n        },\r\n      ];\r\n    } else if (\r\n      checked.show_surface === false &&\r\n      checked.show_scatter === true\r\n    ) {\r\n      configData = [\r\n        {\r\n          x: unpack(plot_rows, \"altitude\"),\r\n          y: unpack(plot_rows, \"inclination\"),\r\n          z: unpack(plot_rows, \"value\"),\r\n          name: \"Model data\",\r\n          mode: \"markers\",\r\n          type: \"scatter3d\",\r\n          opacity: 1,\r\n          marker: {\r\n            color: \"rgb(23, 190, 207)\",\r\n            size: 2,\r\n          },\r\n        },\r\n        {\r\n          x: [props.alt],\r\n          y: [props.inc],\r\n          z: [props.value],\r\n          name: \"User\",\r\n          mode: \"markers\",\r\n          type: \"scatter3d\",\r\n          opacity: 1,\r\n          marker: {\r\n            color: \"red\",\r\n            size: 5,\r\n          },\r\n        },\r\n      ];\r\n    } else if (\r\n      checked.show_surface === true &&\r\n      checked.show_scatter === false\r\n    ) {\r\n      configData = [\r\n        {\r\n          x: unpack(surface_rows, \"altitude\"),\r\n          y: unpack(surface_rows, \"inclination\"),\r\n          z: unpack(surface_rows, \"value\"),\r\n          name: \"Model surface\",\r\n          opacity: 0.3,\r\n          type: \"mesh3d\",\r\n          color: \"rgb(252, 154, 7)\",\r\n        },\r\n        {\r\n          x: [props.alt],\r\n          y: [props.inc],\r\n          z: [props.value],\r\n          name: \"User\",\r\n          mode: \"markers\",\r\n          type: \"scatter3d\",\r\n          opacity: 1,\r\n          marker: {\r\n            color: \"red\",\r\n            size: 5,\r\n          },\r\n        },\r\n      ];\r\n    } else if (\r\n      checked.show_surface === false &&\r\n      checked.show_scatter === false\r\n    ) {\r\n      configData = [\r\n        {\r\n          x: [],\r\n          y: [],\r\n          z: [],\r\n          type: \"mesh3d\",\r\n        },\r\n        {\r\n          x: [],\r\n          y: [],\r\n          z: [],\r\n          mode: \"markers\",\r\n          type: \"scatter3d\",\r\n        },\r\n        {\r\n          x: [parseFloat(props.alt)],\r\n          y: [parseFloat(props.inc)],\r\n          z: [parseFloat(props.value)],\r\n          name: \"User\",\r\n          mode: \"markers\",\r\n          type: \"scatter3d\",\r\n          opacity: 1,\r\n          marker: {\r\n            color: \"red\",\r\n            size: 5,\r\n          },\r\n        },\r\n      ];\r\n    }\r\n\r\n    setConfig(configData);\r\n  }, [checked, plot_rows, surface_rows, reset]);\r\n\r\n  return (\r\n    <>\r\n      <Grid item md={9}>\r\n        <Plot\r\n          data={config}\r\n          layout={{\r\n            autosize: true,\r\n            width: window.innerWidth * 0.4,\r\n            margin: {\r\n              l: 0,\r\n              r: 0,\r\n              b: 0,\r\n              t: 0,\r\n            },\r\n            scene: {\r\n              aspectratio: {\r\n                x: 0.6,\r\n                y: 0.6,\r\n                z: 0.6,\r\n              },\r\n              camera: {\r\n                center: {\r\n                  x: 0,\r\n                  y: 0,\r\n                  z: 0,\r\n                },\r\n                eye: {\r\n                  x: 0.9,\r\n                  y: 0.9,\r\n                  z: 0.9,\r\n                },\r\n                up: {\r\n                  x: 0,\r\n                  y: 0,\r\n                  z: 1,\r\n                },\r\n              },\r\n              xaxis: {\r\n                title: \"Altitude (km)\",\r\n                type: \"linear\",\r\n                range: [Math.max(...unpack(surface_rows, \"altitude\")), 0],\r\n                zeroline: false,\r\n              },\r\n              yaxis: {\r\n                title: \"Inclination (deg)\",\r\n                type: \"linear\",\r\n                range: [90, 0],\r\n                zeroline: false,\r\n              },\r\n              zaxis: {\r\n                title: props.zAxisLabel,\r\n                type: \"linear\",\r\n                range: [\r\n                  Math.min(...unpack(surface_rows, \"value\")),\r\n                  Math.max(...unpack(surface_rows, \"value\")),\r\n                ],\r\n                zeroline: false,\r\n              },\r\n            },\r\n            showlegend: false,\r\n          }}\r\n        />\r\n      </Grid>\r\n      <Grid item md={3}>\r\n        <Grid container alignItems=\"center\" justify=\"center\">\r\n          <Grid item md={12}>\r\n            <Typography component=\"strong\" variant=\"body1\">\r\n              {\"Options\"}\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item md={12}>\r\n            <Typography component=\"strong\" variant=\"body1\">\r\n              {\"Metrics\"}\r\n            </Typography>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ThreeViewSection;\r\n","import React, { useState } from \"react\";\r\nimport MathJax from \"react-mathjax\";\r\n\r\nimport {\r\n  Grid,\r\n  Button,\r\n  Box,\r\n  FormControlLabel,\r\n  Checkbox,\r\n  Tooltip,\r\n  Typography,\r\n  IconButton,\r\n  Divider,\r\n} from \"@material-ui/core\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport ExpandLessIcon from \"@material-ui/icons/ExpandLess\";\r\n\r\nimport TwoViewSection from \"./two-view-section\";\r\nimport ThreeViewSection from \"./three-view-section\";\r\nimport ChartsLibsSection from \"./charts-libs-section\";\r\nimport useStyles from \"../../../utils/styles\";\r\n\r\nconst INIT_CHECK_STATUS = {\r\n  show_surface: true,\r\n  show_scatter: true,\r\n};\r\n\r\nfunction AnalyzeRegressionSection(props: any) {\r\n  const [viewMethod, setViewMethod] = useState(\"2d_view\");\r\n  const [checked, setChecked] = useState(INIT_CHECK_STATUS);\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [reset, setReset] = useState(false);\r\n  const plot_rows = props.data.plot_value;\r\n  const surface_rows: Array<any> = [];\r\n  const zAxisLabel = props.data.label;\r\n  const classes = useStyles();\r\n\r\n  const handleViewChange = (event: any) => {\r\n    const { name } = event.currentTarget;\r\n    setViewMethod(name);\r\n  };\r\n\r\n  const handleCheck = (event: any) => {\r\n    const { name, checked } = event.currentTarget;\r\n    setChecked((prevState) => ({ ...prevState, [name]: checked }));\r\n  };\r\n\r\n  const resetPlot = () => {\r\n    setReset(!reset);\r\n  };\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      justify=\"center\"\r\n      alignItems=\"center\"\r\n      spacing={2}\r\n      style={{ height: \"500px\" }}\r\n    >\r\n      <Grid item md={8}></Grid>\r\n      <Grid item md={4}>\r\n        <Typography component=\"p\" variant=\"body1\" style={{ textAlign: \"end\" }}>\r\n          <IconButton\r\n            size=\"small\"\r\n            onClick={() => setIsOpen(!isOpen)}\r\n            className=\"mt-2 mb-2\"\r\n          >\r\n            {`Graph Options`}\r\n            {isOpen ? <ExpandLessIcon /> : <ExpandMoreIcon />}\r\n          </IconButton>\r\n        </Typography>\r\n      </Grid>\r\n      {isOpen && (\r\n        <>\r\n          <Grid item md={12}>\r\n            <Box\r\n              borderColor=\"primary.main\"\r\n              border={2}\r\n              borderRadius={5}\r\n              padding={2}\r\n              style={{ zIndex: 1000 }}\r\n            >\r\n              <Grid container justify=\"center\" alignItems=\"center\">\r\n                <Grid item md={3}>\r\n                  <Grid\r\n                    container\r\n                    justify=\"center\"\r\n                    alignItems=\"center\"\r\n                    spacing={2}\r\n                  >\r\n                    <Grid item md={12}>\r\n                      <Button\r\n                        id={props.type}\r\n                        name=\"2d_view\"\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        onClick={handleViewChange}\r\n                        style={{ width: \"48%\", marginRight: \"4%\" }}\r\n                        className=\"mb-2\"\r\n                      >\r\n                        {\"2D\"}\r\n                      </Button>\r\n                    </Grid>\r\n                    <Grid item md={12}>\r\n                      <Button\r\n                        name=\"3d_view\"\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        onClick={handleViewChange}\r\n                        style={{ width: \"48%\" }}\r\n                      >\r\n                        {\"3D\"}\r\n                      </Button>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n                <Divider orientation=\"vertical\" flexItem />\r\n                <Grid item md={6} style={{ marginLeft: \"2vw\" }}>\r\n                  <FormControlLabel\r\n                    control={\r\n                      <Checkbox\r\n                        name=\"show_surface\"\r\n                        checked={checked.show_surface}\r\n                        size=\"small\"\r\n                        onChange={handleCheck}\r\n                        color=\"primary\"\r\n                      />\r\n                    }\r\n                    label=\"Show Regression Model Surface\"\r\n                  />\r\n                  <FormControlLabel\r\n                    control={\r\n                      <Checkbox\r\n                        name=\"show_scatter\"\r\n                        checked={checked.show_scatter}\r\n                        size=\"small\"\r\n                        onChange={handleCheck}\r\n                        color=\"primary\"\r\n                      />\r\n                    }\r\n                    label=\"Show Underlying Data\"\r\n                  />\r\n                </Grid>\r\n                <Divider orientation=\"vertical\" flexItem />\r\n                <Grid item md={2} style={{ marginLeft: \"2vw\" }}>\r\n                  <Tooltip\r\n                    title={\r\n                      <Typography\r\n                        gutterBottom\r\n                        component=\"p\"\r\n                        variant=\"body1\"\r\n                        dangerouslySetInnerHTML={{ __html: \"Reset 3D plot\" }}\r\n                      />\r\n                    }\r\n                    placement=\"top-start\"\r\n                    classes={{ tooltip: classes.tooltip }}\r\n                  >\r\n                    <span>\r\n                      <Button\r\n                        id={props.type}\r\n                        name=\"Reset\"\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        disabled={viewMethod === \"2d_view\" ? true : false}\r\n                        onClick={resetPlot}\r\n                        fullWidth\r\n                      >\r\n                        {\"Reset\"}\r\n                      </Button>\r\n                    </span>\r\n                  </Tooltip>\r\n                </Grid>\r\n              </Grid>\r\n            </Box>\r\n          </Grid>\r\n        </>\r\n      )}\r\n      <Grid item md={12} style={{ zIndex: 1000 }}>\r\n        <MathJax.Provider>\r\n          <MathJax.Node formula={props.text} />\r\n        </MathJax.Provider>\r\n      </Grid>\r\n      {viewMethod === \"3d_view\" ? (\r\n        <ThreeViewSection\r\n          data={props.data}\r\n          equation={props.equation}\r\n          maxAltitude={props.maxAltitude}\r\n          alt={props.alt}\r\n          inc={props.inc}\r\n          value={props.value}\r\n          reset={reset}\r\n          isLegend={false}\r\n          isSub={true}\r\n          plot_rows={plot_rows}\r\n          surface_rows={surface_rows}\r\n          zAxisLabel={zAxisLabel}\r\n          checked={checked}\r\n        />\r\n      ) : (\r\n        <TwoViewSection\r\n          data={props.data}\r\n          equation={props.equation}\r\n          maxAltitude={props.maxAltitude}\r\n          alt={props.alt}\r\n          inc={props.inc}\r\n          value={props.value}\r\n          isLegend={false}\r\n          isSub={true}\r\n          plot_rows={plot_rows}\r\n          surface_rows={surface_rows}\r\n          yAxisLabel={zAxisLabel}\r\n          checked={checked}\r\n        />\r\n      )}\r\n      <ChartsLibsSection />\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default AnalyzeRegressionSection;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport {\r\n  Grid,\r\n  CssBaseline,\r\n  Slide,\r\n  Typography,\r\n  IconButton,\r\n  Dialog,\r\n  DialogTitle as MuiDialogTitle,\r\n  DialogContent,\r\n} from \"@material-ui/core\";\r\nimport { TransitionProps } from \"@material-ui/core/transitions\";\r\nimport { Close as CloseIcon } from \"@material-ui/icons\";\r\n\r\nimport { getCartItems } from \"../../API\";\r\nimport useStyles from \"../../utils/styles\";\r\nimport AnalyzeRegressionSection from \"./analyze-regression-section\";\r\n\r\nconst INIT_PARAMS = {\r\n  altitude: 300,\r\n  availabilityThreshold: 0.999,\r\n  dataVolumeNeed: 0.1,\r\n  gapThreshold: 6,\r\n  inclination: 30,\r\n  latitude: 30,\r\n  launchYear: 2030,\r\n  longitude: 30,\r\n  navAccuracyNeed: 20,\r\n  powerAmplifier: 1,\r\n  value: 100,\r\n};\r\n\r\nconst Transition = React.forwardRef(function Transition(\r\n  props: TransitionProps & { children?: React.ReactElement<any, any> },\r\n  ref: React.Ref<Function>\r\n) {\r\n  return <Slide direction=\"left\" ref={ref} {...props} />;\r\n});\r\n\r\nfunction CartPanel(props: any) {\r\n  const [source, setSource] = useState({} as any);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [terrestrial, setTerrestrial] = useState({});\r\n  const [maxAltitude, setMaxAltitude] = useState(0);\r\n  const [coefficients, setCoefficients] = useState({} as any);\r\n  const [text, setText] = useState(\"\");\r\n  const deepDive = \"system1/coverage\";\r\n  const metric = deepDive.split(\"/\")[1];\r\n  const missionType = \"orbital\";\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    setText(\"\");\r\n    getCartItems({ type: missionType })\r\n      .then((res: any) => {\r\n        setTerrestrial(res.data.terrestrial);\r\n        setSource(res.data.data);\r\n        setMaxAltitude(res.data.maxAltitude);\r\n        setCoefficients(res.data.coefficients);\r\n        setText(res.data.text);\r\n        // setText(\r\n        //   props.equationsTex[system.replace(\" \", \"_\").toLowerCase()][metric](\r\n        //     data[\"coefficients\"][metric]\r\n        //   )\r\n        // );\r\n      })\r\n      .then(() => {\r\n        setIsLoading(false);\r\n      });\r\n  }, []);\r\n\r\n  const equation = (inc: any, alt: any, metric: string) => {\r\n    // const altitude = parseFloat(alt);\r\n    // const inclination = parseFloat(inc);\r\n\r\n    // const coefs = coefficients[metric];\r\n    // const eqn = props.equations[system.replace(\" \", \"_\").toLowerCase()][metric];\r\n\r\n    // return eqn(coefs, altitude, inclination);\r\n    return inc;\r\n  };\r\n\r\n  return (\r\n    <Dialog\r\n      open={props.isOpen}\r\n      TransitionComponent={Transition}\r\n      onClose={() => props.onClose()}\r\n      classes={{ paper: classes.dialogDeep }}\r\n    >\r\n      <CssBaseline />\r\n      <MuiDialogTitle>\r\n        <Typography component=\"strong\" variant=\"h6\">\r\n          {\"Cart Integration Panel\"}\r\n        </Typography>\r\n        <IconButton\r\n          aria-label=\"Close\"\r\n          className={classes.dialogCloseBtn}\r\n          onClick={() => props.onClose()}\r\n        >\r\n          <CloseIcon />\r\n        </IconButton>\r\n      </MuiDialogTitle>\r\n      <DialogContent dividers={true}>\r\n        <Grid container justify=\"center\" alignItems=\"center\">\r\n          <Grid item md={12}>\r\n            {!isLoading &&\r\n              (missionType === \"orbital\" ? (\r\n                <AnalyzeRegressionSection\r\n                  equation={(x: any, y: any, m: any) => equation(x, y, m)}\r\n                  maxAltitude={maxAltitude}\r\n                  alt={INIT_PARAMS.altitude}\r\n                  inc={INIT_PARAMS.inclination}\r\n                  value={INIT_PARAMS.value}\r\n                  data={source}\r\n                  selectedItem={metric}\r\n                  text={text}\r\n                />\r\n              ) : (\r\n                <></>\r\n                // <TerrestrialHeatMap />\r\n                // <TerrestrialHeatMap data={terrestrial} />\r\n              ))}\r\n          </Grid>\r\n        </Grid>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n}\r\n\r\nexport default CartPanel;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport {\r\n    Container,\r\n    Card,\r\n    CardHeader,\r\n    CardContent,\r\n    Typography,\r\n    CssBaseline\r\n} from \"@material-ui/core\";\r\n\r\nimport useStyles from \"../../utils/styles\";\r\n\r\nfunction NoMatch() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"md\">\r\n            <CssBaseline />\r\n            <Card className={classes.authcard}>\r\n                <CardHeader\r\n                    title={\r\n                        <Typography component=\"h1\" variant=\"h5\">\r\n                            {`404 | Page not found :(`}\r\n                        </Typography>\r\n                    }\r\n                />\r\n                <CardContent>\r\n                    <p>{`Maybe the page you are looking for has been removed, or you typed in the wrong URL`}</p>\r\n                </CardContent>\r\n                <Link to=\"/\" className={classes.link}>{`Back To Home`}</Link>\r\n            </Card>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default NoMatch;","import React from \"react\";\r\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\r\n\r\nimport ChartPanel from \"./components/chart-panel\";\r\nimport NoMatch from \"./components/auth-panel/NoMatch\";\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <HashRouter>\r\n      <Switch>\r\n        <Route exact path=\"/\" component={ChartPanel} />\r\n        <Route path=\"*\" component={NoMatch} />\r\n      </Switch>\r\n    </HashRouter>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n","import axios, { AxiosResponse } from \"axios\";\r\n\r\n// const baseUrl: string = \"http://127.0.0.1:7000\";\r\n\r\nexport const getItems = async (selected: String) => {\r\n  const params = { selected };\r\n\r\n  try {\r\n    const res: AxiosResponse = await axios.get(\"/get-items\", {\r\n      params,\r\n    });\r\n    return res;\r\n  } catch (error) {\r\n    throw new Error(error);\r\n  }\r\n};\r\n\r\nexport const getPlotItems = async () => {\r\n  try {\r\n    const res: AxiosResponse = await axios.get(\"/get-plot\");\r\n    return res;\r\n  } catch (error) {\r\n    throw new Error(error);\r\n  }\r\n};\r\n\r\nexport const getCartItems = async (params: Object) => {\r\n  try {\r\n    const res: AxiosResponse = await axios.post(\"/get-cart\", params);\r\n    return res;\r\n  } catch (error) {\r\n    throw new Error(error);\r\n  }\r\n};\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  authcard: {\r\n    marginTop: \"10vh\",\r\n    minWidth: \"30vw\",\r\n    padding: theme.spacing(3),\r\n  },\r\n\r\n  link: {\r\n    paddingRight: theme.spacing(2),\r\n    color: \"#3385ff\",\r\n    textDecoration: \"none\",\r\n  },\r\n\r\n  chartCard: {\r\n    padding: theme.spacing(3),\r\n  },\r\n\r\n  searchSelect: {\r\n    textAlignLast: \"center\",\r\n  },\r\n\r\n  tooltip: {\r\n    maxWidth: \"500px\",\r\n  },\r\n\r\n  dialogDeep: {\r\n    minWidth: \"1000px !important\",\r\n    height: \"90vh !important\",\r\n    maxWidth: \"1000px !important\",\r\n  },\r\n\r\n  dialogCloseBtn: {\r\n    position: \"absolute\",\r\n    right: theme.spacing(1),\r\n    top: theme.spacing(1),\r\n    color: theme.palette.grey[500],\r\n    zIndex: 100,\r\n  },\r\n}));\r\n\r\nexport default useStyles;\r\n","import { useState, useEffect } from \"react\";\r\n\r\nexport function useWindowSize() {\r\n  const [windowSize, setWindowSize] = useState({\r\n    width: undefined as any,\r\n    height: undefined as any,\r\n  });\r\n\r\n  useEffect(() => {\r\n    function handleResize() {\r\n      setWindowSize({\r\n        width: window.innerWidth,\r\n        height: window.innerHeight,\r\n      });\r\n    }\r\n    window.addEventListener(\"resize\", handleResize);\r\n    handleResize();\r\n\r\n    return () => window.removeEventListener(\"resize\", handleResize);\r\n  }, []);\r\n\r\n  return windowSize;\r\n}\r\n","import React from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\n\r\nimport { useWindowSize } from \"../../../utils/util\";\r\n\r\nfunction LineChartSection(props: any) {\r\n  const size = useWindowSize();\r\n  \r\n  return (\r\n    <Plot\r\n      data={[\r\n        {\r\n          x: props.xTraces,\r\n          y: props.yTraces,\r\n          name: \"Gap Event Duration\",\r\n          type: \"scatter\",\r\n          mode: \"lines+markers\",\r\n          marker: { color: \"red\" },\r\n        },\r\n        {\r\n          x: props.xTraces,\r\n          y: props.avgTraces,\r\n          name: \"Running Average\",\r\n          type: \"scatter\",\r\n          marker: { color: \"blue\" },\r\n        },\r\n      ]}\r\n      layout={{\r\n        title: props.title.toUpperCase(),\r\n        width: size.width * 0.35,\r\n        showlegend: true,\r\n        legend: {\r\n          orientation: \"h\",\r\n          xanchor: \"center\",\r\n          font: {\r\n            family: \"sans-serif\",\r\n            size: 12,\r\n            color: \"#000\",\r\n          },\r\n        },\r\n        margin: {\r\n          l: 60,\r\n          b: 0,\r\n          r: 30,\r\n          t: 30,\r\n          pad: 5,\r\n        },\r\n        xaxis: {\r\n          title: \"Gap Event (Sequence)\",\r\n          titlefont: {\r\n            size: 12,\r\n            color: \"#212529\",\r\n          },\r\n          showgrid: true,\r\n          zerolinecolor: \"#969696\",\r\n          zerolinewidth: 1,\r\n        },\r\n        yaxis: {\r\n          title: \"Gap Duration (seconds)\",\r\n          titlefont: {\r\n            size: 12,\r\n            color: \"#212529\",\r\n          },\r\n          showgrid: true,\r\n          zerolinecolor: \"#969696\",\r\n          zerolinewidth: 1,\r\n        },\r\n      }}\r\n      config={{ displayModeBar: false }}\r\n    />\r\n  );\r\n}\r\n\r\nexport default LineChartSection;\r\n","import React from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\n\r\nimport { useWindowSize } from \"../../../utils/util\";\r\n\r\nfunction HistogramChartSection(props: any) {\r\n  const size = useWindowSize();\r\n  \r\n  return (\r\n    <Plot\r\n      data={[\r\n        {\r\n          x: props.xTraces,\r\n          name: \"Duration\",\r\n          type: \"histogram\",\r\n        },\r\n      ]}\r\n      layout={{\r\n        title: props.title.toUpperCase().split('_').join(' '),\r\n        width: size.width * 0.35,\r\n        showlegend: true,\r\n        legend: {\r\n          orientation: \"h\",\r\n          xanchor: \"center\",\r\n          font: {\r\n            family: \"sans-serif\",\r\n            size: 12,\r\n            color: \"#000\",\r\n          },\r\n        },\r\n        margin: {\r\n          l: 60,\r\n          b: 0,\r\n          r: 30,\r\n          t: 30,\r\n          pad: 5,\r\n        },\r\n        xaxis: {\r\n          title: \"Duration\",\r\n          titlefont: {\r\n            size: 12,\r\n            color: \"#212529\",\r\n          },\r\n          showgrid: true,\r\n          zerolinecolor: \"#969696\",\r\n          zerolinewidth: 1,\r\n        },\r\n        yaxis: {\r\n          title: \"Occurances\",\r\n          titlefont: {\r\n            size: 12,\r\n            color: \"#212529\",\r\n          },\r\n          showgrid: true,\r\n          zerolinecolor: \"#969696\",\r\n          zerolinewidth: 1,\r\n        },\r\n      }}\r\n      config={{ displayModeBar: false }}\r\n    />\r\n  );\r\n}\r\n\r\nexport default HistogramChartSection;\r\n","import React from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\n\r\nimport { useWindowSize } from \"../../../utils/util\";\r\n\r\nfunction BoxChartSection(props: any) {\r\n  const size = useWindowSize();\r\n\r\n  return (\r\n    <Plot\r\n      data={[\r\n        {\r\n          y: props.xTraces,\r\n          name: \"\",\r\n          type: \"box\",\r\n        },\r\n      ]}\r\n      layout={{\r\n        title: `${props.title.toUpperCase().split(\" \")[0]} STATISTICS`,\r\n        width: size.width * 0.35,\r\n        margin: {\r\n          l: 60,\r\n          b: 0,\r\n          r: 30,\r\n          t: 30,\r\n          pad: 5,\r\n        },\r\n        yaxis: {\r\n          title: \"Duration\",\r\n          titlefont: {\r\n            size: 12,\r\n            color: \"#212529\",\r\n          },\r\n          showgrid: true,\r\n          zerolinecolor: \"#969696\",\r\n          zerolinewidth: 1,\r\n        },\r\n      }}\r\n      config={{ displayModeBar: false }}\r\n    />\r\n  );\r\n}\r\n\r\nexport default BoxChartSection;\r\n","import React from \"react\";\r\nimport { Grid, IconButton, Menu, MenuItem, Divider } from \"@material-ui/core\";\r\nimport AddCircleOutlineIcon from \"@material-ui/icons/AddCircleOutline\";\r\n\r\nconst MENU_ITEMS = [\r\n  { id: 1, dataset: \"coverage\", name: \"Running Average\" },\r\n  { id: 2, dataset: \"coverage_histogram\", name: \"Distribution\" },\r\n  { id: 3, dataset: \"coverage\", name: \"Statistics Chart\" },\r\n];\r\n\r\nfunction PlusAddon(props: any) {\r\n  return (\r\n    <Grid item md={12}>\r\n      <Grid container justify=\"center\" alignItems=\"center\">\r\n        <Grid item style={{ width: \"4%\" }}>\r\n          <IconButton onClick={(e) => props.onAnchorEl(e.currentTarget)}>\r\n            <AddCircleOutlineIcon />\r\n          </IconButton>\r\n          <Menu\r\n            anchorEl={props.anchorEl}\r\n            keepMounted\r\n            open={Boolean(props.anchorEl)}\r\n            onClose={() => props.onAnchorEl(null)}\r\n          >\r\n            {MENU_ITEMS.map((el: any) => (\r\n              <MenuItem\r\n                id={el.id}\r\n                key={el.id}\r\n                onClick={() => props.onSelected(el.id)}\r\n              >\r\n                {el.name}\r\n              </MenuItem>\r\n            ))}\r\n          </Menu>\r\n        </Grid>\r\n        <Grid item md={11} style={{ width: \"96%\" }}>\r\n          <Divider />\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default PlusAddon;\r\n"],"sourceRoot":""}