{"version":3,"sources":["API.ts","utils/styles.ts","utils/util.ts","pages/chart-panel/line-chart-section/index.tsx","pages/chart-panel/histogram-chart-section/index.tsx","pages/chart-panel/box-chart-section/index.tsx","pages/chart-panel/terrestrial-heatmap-chart/index.tsx","pages/cart-panel/analyze-regression-section/two-view-section/index.tsx","pages/cart-panel/analyze-regression-section/three-view-section/index.tsx","components/Button/MinusAddon.tsx","constants/index.ts","components/Select/index.tsx","components/Button/PlusAddon.tsx","pages/cart-panel/analyze-regression-section/charts-libs-section/selected-chart-section/index.tsx","pages/cart-panel/analyze-regression-section/charts-libs-section/index.tsx","components/Button/OptionAddon.tsx","pages/cart-panel/analyze-regression-section/index.tsx","pages/cart-panel/index.tsx","pages/chart-panel/index.tsx","pages/cart-dash-panel/analyze-regression-section/two-view-section/index.tsx","pages/cart-dash-panel/analyze-regression-section/three-view-section/index.tsx","components/Button/DashAddon.tsx","pages/cart-dash-panel/analyze-regression-section/charts-libs-section/line-chart-section/index.tsx","pages/cart-dash-panel/analyze-regression-section/charts-libs-section/histogram-chart-section/index.tsx","pages/cart-dash-panel/analyze-regression-section/charts-libs-section/box-chart-section/index.tsx","pages/cart-dash-panel/analyze-regression-section/charts-libs-section/selected-chart-section/index.tsx","pages/cart-dash-panel/analyze-regression-section/charts-libs-section/index.tsx","pages/cart-dash-panel/analyze-regression-section/header-section/index.tsx","pages/cart-dash-panel/analyze-regression-section/index.tsx","pages/cart-dash-panel/index.tsx","pages/auth-panel/NoMatch.tsx","App.tsx","index.tsx"],"names":["baseUrl","getItems","params","a","axios","get","res","Error","getPlotItems","getCartItems","getSystems","getSystemVersion","getFileId","changeDB","useStyles","makeStyles","theme","authcard","marginTop","minWidth","padding","spacing","link","paddingRight","color","textDecoration","cartCard","cartCardContent","paddingLeft","overflowX","height","backgroundColor","grey","chartCard","searchSelect","textAlignLast","tooltip","maxWidth","dialogDeep","palette","dashDialogDeep","dialogCloseBtn","position","right","top","zIndex","contentSection","maxHeight","overflow","label","fontSize","formControl","margin","useWindowSize","useState","width","undefined","windowSize","setWindowSize","useEffect","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","LineChartSection","props","size","data","x","source","xTraces","y","yTraces","name","type","mode","marker","avgTraces","layout","title","showlegend","legend","orientation","xanchor","font","family","l","b","r","t","pad","xaxis","dataType","titlefont","showgrid","zerolinecolor","zerolinewidth","yaxis","config","displayModeBar","HistogramChartSection","split","join","BoxChartSection","boxpoints","INIT_SOURCE","heatmap","intrpl","TerrestrialHeatMap","setMode","setSource","then","catch","Grid","container","justify","alignItems","item","md","z","zeroline","range","tickmode","tick0","dtick","lat","lon","mapbox","center","style","zoom","mapboxAccessToken","hoverinfo","Box","borderColor","border","borderRadius","Button","variant","onClick","e","currentTarget","marginRight","TwoViewSection","checked","setChecked","setConfig","plot_rows","surface_rows","unpack","rows","key","map","row","configData","inclination","parseInt","inc","new_plot_rows","filter","new_surface_rows","show_surface","show_scatter","line","dot","autosize","hovermode","yAxisLabel","onHover","event","target","cursor","onUnhover","onDoubleClick","ThreeViewSection","reset","setReset","opacity","alt","value","parseFloat","scene","aspectratio","camera","eye","up","Math","max","zaxis","zAxisLabel","min","MinusAddon","IconButton","onSelected","id","Divider","MENU_ITEMS","as_needed_handoff","dataset","maximum_powee_handoff","INIT_PARAMS","Selection","Menu","anchorEl","keepMounted","open","Boolean","onClose","onAnchorEl","Constants","el","MenuItem","selected","includes","PlusAddon","createData","SelectedChartSection","textAlign","Typography","Table","aria-label","TableHead","TableRow","TableCell","TableBody","component","scope","ChartsLibsSection","setSelected","setAnchorEl","handleSelected","prevState","length","idx","dset","dataSet","Fragment","Card","marginLeft","CardContent","traces","Object","keys","OptionAddon","isOpen","setIsOpen","classes","left","className","isDash","onChart","plot_value","filename","Date","now","viewMethod","onViewMethod","fullWidth","flexItem","FormControl","InputLabel","Select","labelId","onChange","onInc","disabled","incs","Tooltip","gutterBottom","dangerouslySetInnerHTML","__html","placement","resetPlot","INIT_CHECK_STATUS","INIT_FILE_ID","AnalyzeRegressionSection","setViewMethod","setDataSet","systems","setSystems","versions","setVersions","setDot","fileId","setFileId","setTraces","version","ctype","gaps","durations","avgs","push","err","user_altitude","user_inclination","system","altitude","handleClick","points","minHeight","ToggleButtonGroup","preventDefault","onDataType","ToggleButton","onSystem","system_name","system_id","onVersion","onChecked","equation","maxAltitude","isLegend","isSub","Transition","React","forwardRef","ref","Slide","direction","CartPanel","dataSource","setDataSource","setSystem","setVersion","setInclination","setIncs","setDataType","isLoading","setIsLoading","setTerrestrial","setMaxAltitude","setCoefficients","text","setText","metric","terrestrial","coefficients","tmp","uniqueArray","Set","sort","Dialog","TransitionComponent","paper","CssBaseline","Close","DialogContent","dividers","m","selectedItem","INIT_MENUS","TabPanel","children","index","other","role","hidden","aria-labelledby","p","a11yProps","ChartPanel","tab","setTab","useTheme","Container","CardHeader","action","AppBar","Tabs","val","indicatorColor","textColor","Tab","axis","onChangeIndex","isChart","replace","Number","DashAddon","setTitle","csvTitle","xTrace","yTrace","avgTrace","onIndex","onSubChart","isSubChart","subChart","setSubChart","setIndex","PaperProps","HeaderSection","db","onDb","viewStyle","setDb","count","setCount","setIsChart","chartEl","useRef","database","getComputedStyle","current","fontWeight","CartDashPanel","NoMatch","to","App","exact","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.931e0f6c.chunk.js","sourcesContent":["import axios, { AxiosResponse } from \"axios\";\r\n\r\nconst baseUrl: string = \"http://127.0.0.1:7000\";\r\n\r\nexport const getItems = async (params: any) => {\r\n  try {\r\n    const res: AxiosResponse = await axios.get(baseUrl + \"/get-items\", {\r\n      params,\r\n    });\r\n    return res;\r\n  } catch (error) {\r\n    throw new Error(error);\r\n  }\r\n};\r\n\r\nexport const getPlotItems = async () => {\r\n  try {\r\n    const res: AxiosResponse = await axios.get(baseUrl + \"/get-plot\");\r\n    return res;\r\n  } catch (error) {\r\n    throw new Error(error);\r\n  }\r\n};\r\n\r\nexport const getCartItems = async (params: Object) => {\r\n  try {\r\n    const res: AxiosResponse = await axios.get(baseUrl + \"/get-cart\", {\r\n      params,\r\n    });\r\n    return res;\r\n  } catch (error) {\r\n    throw new Error(error);\r\n  }\r\n};\r\n\r\nexport const getSystems = async () => {\r\n  try {\r\n    const res: AxiosResponse = await axios.get(baseUrl + \"/get-systems\");\r\n    return res;\r\n  } catch (error) {\r\n    throw new Error(error);\r\n  }\r\n};\r\n\r\nexport const getSystemVersion = async (params: Object) => {\r\n  try {\r\n    const res: AxiosResponse = await axios.get(\r\n      baseUrl + \"/get-system-version\",\r\n      { params }\r\n    );\r\n    return res;\r\n  } catch (error) {\r\n    throw new Error(error);\r\n  }\r\n};\r\n\r\nexport const getFileId = async (params: Object) => {\r\n  try {\r\n    const res: AxiosResponse = await axios.get(baseUrl + \"/get-file-id\", {\r\n      params,\r\n    });\r\n    return res;\r\n  } catch (error) {\r\n    throw new Error(error);\r\n  }\r\n};\r\n\r\nexport const changeDB = async (params: { [key: string]: string }) => {\r\n  try {\r\n    const res: AxiosResponse = await axios.get(baseUrl + \"/change-db\", {\r\n      params,\r\n    });\r\n    return res;\r\n  } catch (error) {\r\n    throw new Error(error);\r\n  }\r\n};\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\nimport { grey } from \"@material-ui/core/colors\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  authcard: {\r\n    marginTop: \"10vh\",\r\n    minWidth: \"30vw\",\r\n    padding: theme.spacing(3),\r\n  },\r\n\r\n  link: {\r\n    paddingRight: theme.spacing(2),\r\n    color: \"#3385ff\",\r\n    textDecoration: \"none\",\r\n  },\r\n\r\n  cartCard: {\r\n    padding: 0,\r\n  },\r\n\r\n  cartCardContent: {\r\n    paddingRight: 0,\r\n    paddingLeft: 0,\r\n    overflowX: \"hidden\",\r\n    height: \"82vh\",\r\n    backgroundColor: grey[50]\r\n  },\r\n\r\n  chartCard: {\r\n    padding: theme.spacing(3),\r\n  },\r\n\r\n  searchSelect: {\r\n    textAlignLast: \"center\",\r\n  },\r\n\r\n  tooltip: {\r\n    maxWidth: \"500px\",\r\n  },\r\n\r\n  dialogDeep: {\r\n    minWidth: \"43vw !important\",\r\n    height: \"90vh !important\",\r\n    maxWidth: \"40vw !important\",\r\n    backgroundColor: theme.palette.grey[100],\r\n  },\r\n\r\n  dashDialogDeep: {\r\n    height: \"93vh !important\",\r\n    minWidth: \"80vw !important\",\r\n    maxWidth: \"80vw !important\",\r\n    backgroundColor: theme.palette.grey[100],\r\n  },\r\n\r\n  dialogCloseBtn: {\r\n    position: \"absolute\",\r\n    right: theme.spacing(1),\r\n    top: theme.spacing(1),\r\n    color: theme.palette.grey[500],\r\n    zIndex: 100,\r\n  },\r\n\r\n  contentSection: {\r\n    backgroundColor: grey[500],\r\n    height: \"100%\",\r\n    maxHeight: \"55vh\",\r\n    overflow: \"auto\",\r\n  },\r\n\r\n  label: {\r\n    fontSize: 14,\r\n  },\r\n\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nexport default useStyles;\r\n","import { useState, useEffect } from \"react\";\r\n\r\nexport function useWindowSize() {\r\n  const [windowSize, setWindowSize] = useState({\r\n    width: undefined as any,\r\n    height: undefined as any,\r\n  });\r\n\r\n  useEffect(() => {\r\n    function handleResize() {\r\n      setWindowSize({\r\n        width: window.innerWidth,\r\n        height: window.innerHeight,\r\n      });\r\n    }\r\n    window.addEventListener(\"resize\", handleResize);\r\n    handleResize();\r\n\r\n    return () => window.removeEventListener(\"resize\", handleResize);\r\n  }, []);\r\n\r\n  return windowSize;\r\n}\r\n","import React from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\n\r\nimport { useWindowSize } from \"../../../utils/util\";\r\n\r\nfunction LineChartSection(props: any) {\r\n  const size = useWindowSize();\r\n\r\n  return (\r\n    <Plot\r\n      data={[\r\n        {\r\n          x: props.source.xTraces,\r\n          y: props.source.yTraces,\r\n          name: \"Gap Event Duration\",\r\n          type: \"scatter\",\r\n          mode: \"lines+markers\",\r\n          marker: { color: \"red\" },\r\n        },\r\n        {\r\n          x: props.source.xTraces,\r\n          y: props.source.avgTraces,\r\n          name: \"Running Average\",\r\n          type: \"scatter\",\r\n          marker: { color: \"blue\" },\r\n        },\r\n      ]}\r\n      layout={{\r\n        title: `<b>${props.source.title}</b>`,\r\n        width: size.width * 0.37,\r\n        showlegend: true,\r\n        legend: {\r\n          orientation: \"h\",\r\n          xanchor: \"center\",\r\n          font: {\r\n            family: \"sans-serif\",\r\n            size: 12,\r\n            color: \"#000\",\r\n          },\r\n        },\r\n        margin: {\r\n          l: 60,\r\n          b: 0,\r\n          r: 30,\r\n          t: 30,\r\n          pad: 5,\r\n        },\r\n        xaxis: {\r\n          title:\r\n            props.dataType === \"coverage\"\r\n              ? \"Coverage Event Number\"\r\n              : \"Gap Event Number\",\r\n          titlefont: {\r\n            size: 12,\r\n            color: \"#212529\",\r\n          },\r\n          showgrid: true,\r\n          zerolinecolor: \"#969696\",\r\n          zerolinewidth: 1,\r\n        },\r\n        yaxis: {\r\n          title:\r\n            props.dataType === \"coverage\"\r\n              ? \"Coverage Duration (Sec.)\"\r\n              : \"Gap Duration (Sec.)\",\r\n          titlefont: {\r\n            size: 12,\r\n            color: \"#212529\",\r\n          },\r\n          showgrid: true,\r\n          zerolinecolor: \"#969696\",\r\n          zerolinewidth: 1,\r\n        },\r\n      }}\r\n      config={{ displayModeBar: false }}\r\n    />\r\n  );\r\n}\r\n\r\nexport default LineChartSection;\r\n","import React from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\n\r\nimport { useWindowSize } from \"../../../utils/util\";\r\n\r\nfunction HistogramChartSection(props: any) {\r\n  const size = useWindowSize();\r\n  \r\n  return (\r\n    <Plot\r\n      data={[\r\n        {\r\n          x: props.xTraces,\r\n          name: \"Duration\",\r\n          type: \"histogram\",\r\n        },\r\n      ]}\r\n      layout={{\r\n        title: `<b>${props.title.split('_').join(' ')}</b>`,\r\n        width: size.width * 0.37,\r\n        showlegend: true,\r\n        legend: {\r\n          orientation: \"h\",\r\n          xanchor: \"center\",\r\n          font: {\r\n            family: \"sans-serif\",\r\n            size: 12,\r\n            color: \"#000\",\r\n          },\r\n        },\r\n        margin: {\r\n          l: 60,\r\n          b: 0,\r\n          r: 30,\r\n          t: 30,\r\n          pad: 5,\r\n        },\r\n        xaxis: {\r\n          title: \"Duration\",\r\n          titlefont: {\r\n            size: 12,\r\n            color: \"#212529\",\r\n          },\r\n          showgrid: true,\r\n          zerolinecolor: \"#969696\",\r\n          zerolinewidth: 1,\r\n        },\r\n        yaxis: {\r\n          title: \"Occurances\",\r\n          titlefont: {\r\n            size: 12,\r\n            color: \"#212529\",\r\n          },\r\n          showgrid: true,\r\n          zerolinecolor: \"#969696\",\r\n          zerolinewidth: 1,\r\n        },\r\n      }}\r\n      config={{ displayModeBar: false }}\r\n    />\r\n  );\r\n}\r\n\r\nexport default HistogramChartSection;\r\n","import React from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\n\r\nimport { useWindowSize } from \"../../../utils/util\";\r\n\r\nfunction BoxChartSection(props: any) {\r\n  const size = useWindowSize();\r\n\r\n  return (\r\n    <Plot\r\n      data={[\r\n        {\r\n          y: props.xTraces,\r\n          boxpoints: 'all',\r\n          name: \"\",\r\n          type: \"box\",\r\n        },\r\n      ]}\r\n      layout={{\r\n        title: `<b>${props.title.split(\" \")[0]} Statistics</b>`,\r\n        width: size.width * 0.37,\r\n        margin: {\r\n          l: 60,\r\n          b: 0,\r\n          r: 30,\r\n          t: 30,\r\n          pad: 5,\r\n        },\r\n        yaxis: {\r\n          title: \"Duration\",\r\n          titlefont: {\r\n            size: 12,\r\n            color: \"#212529\",\r\n          },\r\n          showgrid: true,\r\n          zerolinecolor: \"#969696\",\r\n          zerolinewidth: 1,\r\n        },\r\n      }}\r\n      config={{ displayModeBar: false }}\r\n    />\r\n  );\r\n}\r\n\r\nexport default BoxChartSection;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\nimport { Grid, Button, Box } from \"@material-ui/core\";\r\n\r\nimport { getPlotItems } from \"../../../API\";\r\n\r\nconst INIT_SOURCE = {\r\n  heatmap: {},\r\n  intrpl: {},\r\n};\r\n\r\nfunction TerrestrialHeatMap() {\r\n  const [mode, setMode] = useState(\"heatmap\");\r\n  const [source, setSource] = useState(INIT_SOURCE as any);\r\n\r\n  useEffect(() => {\r\n    getPlotItems()\r\n      .then((res: any) => {\r\n        setSource(res.data);\r\n      })\r\n      .catch(() => setSource(INIT_SOURCE));\r\n  }, []);\r\n  return (\r\n    <>\r\n      <Grid container justify=\"center\" alignItems=\"center\">\r\n        {mode === \"heatmap\" ? (\r\n          <>\r\n            <Grid item md={6}>\r\n              <Plot\r\n                data={[\r\n                  {\r\n                    x: source.heatmap.x,\r\n                    y: source.heatmap.y,\r\n                    z: source.heatmap.z,\r\n                    type: \"heatmap\",\r\n                  },\r\n                ]}\r\n                layout={{\r\n                  width: 500,\r\n                  height: 500,\r\n                  title: \"\",\r\n                  xaxis: {\r\n                    title: \"Longitude (deg)\",\r\n                    zeroline: false,\r\n                    range: [-180, 180],\r\n                    tickmode: \"linear\",\r\n                    tick0: -180,\r\n                    dtick: 40,\r\n                  },\r\n                  yaxis: {\r\n                    title: \"Latitude (deg)\",\r\n                    zeroline: false,\r\n                    range: [-90, 90],\r\n                    tickmode: \"linear\",\r\n                    tick0: -90,\r\n                    dtick: 30,\r\n                  },\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid item md={6}>\r\n              <Plot\r\n                data={[\r\n                  {\r\n                    lat: source.heatmap.x,\r\n                    lon: source.heatmap.y,\r\n                    z: source.heatmap.z,\r\n                    type: \"densitymapbox\",\r\n                  },\r\n                ]}\r\n                layout={{\r\n                  width: 500,\r\n                  height: 500,\r\n                  title: \"\",\r\n                  mapbox: {\r\n                    center: { lon: 60, lat: 30 },\r\n                    style: \"outdoors\",\r\n                    zoom: 2,\r\n                  },\r\n                }}\r\n                config={{\r\n                  mapboxAccessToken:\r\n                    \"pk.eyJ1IjoicmxhZm9udGFpbmUiLCJhIjoiY2tpMG82ZjNiMHZ3NjJxcDV1cjAzaTJ4eCJ9.VJSnQNJxiJK-jixU6KaFYQ\",\r\n                }}\r\n              />\r\n            </Grid>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <Grid item md={6}>\r\n              <Plot\r\n                data={[\r\n                  {\r\n                    x: source.intrpl.x,\r\n                    y: source.intrpl.y,\r\n                    z: source.intrpl.z,\r\n                    type: \"heatmap\",\r\n                  },\r\n                ]}\r\n                layout={{\r\n                  width: 500,\r\n                  height: 500,\r\n                  title: \"\",\r\n                  xaxis: {\r\n                    title: \"Longitude (deg)\",\r\n                    zeroline: false,\r\n                    range: [-180, 180],\r\n                    tickmode: \"linear\",\r\n                    tick0: -180,\r\n                    dtick: 40,\r\n                  },\r\n                  yaxis: {\r\n                    title: \"Latitude (deg)\",\r\n                    zeroline: false,\r\n                    range: [-90, 90],\r\n                    tickmode: \"linear\",\r\n                    tick0: -90,\r\n                    dtick: 30,\r\n                  },\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid item md={6}>\r\n              <Plot\r\n                data={[\r\n                  {\r\n                    lat: source.intrpl.x,\r\n                    lon: source.intrpl.x,\r\n                    z: source.intrpl.z,\r\n                    type: \"densitymapbox\",\r\n                    hoverinfo: \"skip\",\r\n                  },\r\n                ]}\r\n                layout={{\r\n                  width: 500,\r\n                  height: 500,\r\n                  title: \"\",\r\n                  mapbox: {\r\n                    center: { lon: 60, lat: 30 },\r\n                    style: \"outdoors\",\r\n                    zoom: 2,\r\n                  },\r\n                }}\r\n                config={{\r\n                  mapboxAccessToken:\r\n                    \"pk.eyJ1IjoicmxhZm9udGFpbmUiLCJhIjoiY2tpMG82ZjNiMHZ3NjJxcDV1cjAzaTJ4eCJ9.VJSnQNJxiJK-jixU6KaFYQ\",\r\n                }}\r\n              />\r\n            </Grid>\r\n          </>\r\n        )}\r\n      </Grid>\r\n      <Grid item md={6}>\r\n        <Box\r\n          borderColor=\"primary.main\"\r\n          border={2}\r\n          borderRadius={5}\r\n          padding={2}\r\n          style={{ zIndex: 1000 }}\r\n        >\r\n          <Button\r\n            name=\"heatmap\"\r\n            variant=\"contained\"\r\n            size=\"small\"\r\n            color=\"primary\"\r\n            onClick={(e) => setMode(e.currentTarget.name)}\r\n            style={{ width: \"48%\", marginRight: \"4%\" }}\r\n          >\r\n            {\"Non-Interpolated\"}\r\n          </Button>\r\n          <Button\r\n            name=\"intrpl\"\r\n            variant=\"contained\"\r\n            size=\"small\"\r\n            color=\"primary\"\r\n            onClick={(e) => setMode(e.currentTarget.name)}\r\n            style={{ width: \"48%\" }}\r\n          >\r\n            {\"Interpolated\"}\r\n          </Button>\r\n        </Box>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TerrestrialHeatMap;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\nimport { useWindowSize } from \"../../../../utils/util\";\r\n\r\nfunction TwoViewSection(props: any) {\r\n  const [checked, setChecked] = useState(props.checked);\r\n  const [config, setConfig] = useState([]);\r\n  const size: any = useWindowSize();\r\n  const plot_rows = props.plot_rows;\r\n  const surface_rows = props.surface_rows;\r\n\r\n  useEffect(() => {\r\n    setChecked(props.checked);\r\n  }, [props.checked]);\r\n\r\n  const unpack = (rows: Array<any>, key: any) => {\r\n    return rows.map(function (row: any) {\r\n      return row[key];\r\n    });\r\n  };\r\n  \r\n  useEffect(() => {\r\n    let configData: any = [];\r\n    const inclination = parseInt(props.inc);\r\n    const new_plot_rows = plot_rows.filter(\r\n      (row: any) => row.inclination === inclination\r\n    );\r\n    const new_surface_rows = surface_rows.filter(\r\n      (row: any) => row.inclination === inclination\r\n    );\r\n    if (checked.show_surface === true && checked.show_scatter === true) {\r\n      configData = [\r\n        {\r\n          x: unpack(new_plot_rows, \"altitude\"),\r\n          y: unpack(new_plot_rows, \"value\"),\r\n          name: \"Model data\",\r\n          mode: \"markers\",\r\n          type: \"scatter\",\r\n          color: \"rgb(23, 190, 207)\",\r\n        },\r\n        {\r\n          x: unpack(new_surface_rows, \"altitude\"),\r\n          y: unpack(new_surface_rows, \"value\"),\r\n          name: \"Model curve\",\r\n          mode: \"lines\",\r\n          line: {\r\n            color: \"rgb(252, 154, 7)\",\r\n          },\r\n        },\r\n        {\r\n          x: [props.dot.x],\r\n          y: [props.dot.y],\r\n          name: \"User\",\r\n          mode: \"markers\",\r\n          type: \"scatter\",\r\n          marker: {\r\n            color: \"red\",\r\n            size: 10,\r\n          },\r\n        },\r\n      ];\r\n    } else if (\r\n      checked.show_surface === false &&\r\n      checked.show_scatter === true\r\n    ) {\r\n      configData = [\r\n        {\r\n          x: unpack(new_plot_rows, \"altitude\"),\r\n          y: unpack(new_plot_rows, \"value\"),\r\n          name: \"Model data\",\r\n          mode: \"markers\",\r\n          type: \"scatter\",\r\n          color: \"rgb(23, 190, 207)\",\r\n        },\r\n        {\r\n          x: [],\r\n          y: [],\r\n          mode: \"markers\",\r\n          type: \"scatter\",\r\n        },\r\n        {\r\n          x: [props.dot.x],\r\n          y: [props.dot.y],\r\n          name: \"User\",\r\n          mode: \"markers\",\r\n          type: \"scatter\",\r\n          marker: {\r\n            color: \"red\",\r\n            size: 10,\r\n          },\r\n        },\r\n      ];\r\n    } else if (\r\n      checked.show_surface === true &&\r\n      checked.show_scatter === false\r\n    ) {\r\n      configData = [\r\n        {\r\n          x: unpack(new_surface_rows, \"altitude\"),\r\n          y: unpack(new_surface_rows, \"value\"),\r\n          name: \"Model curve\",\r\n          mode: \"lines\",\r\n          line: {\r\n            color: \"rgb(252, 154, 7)\",\r\n          },\r\n        },\r\n        {\r\n          x: [],\r\n          y: [],\r\n          mode: \"markers\",\r\n          type: \"scatter\",\r\n        },\r\n        {\r\n          x: [props.dot.x],\r\n          y: [props.dot.y],\r\n          name: \"User\",\r\n          mode: \"markers\",\r\n          type: \"scatter\",\r\n          marker: {\r\n            color: \"red\",\r\n            size: 10,\r\n          },\r\n        },\r\n      ];\r\n    } else if (\r\n      checked.show_surface === false &&\r\n      checked.show_scatter === false\r\n    ) {\r\n      configData = [\r\n        {\r\n          x: [],\r\n          y: [],\r\n          mode: \"lines\",\r\n        },\r\n        {\r\n          x: [],\r\n          y: [],\r\n          mode: \"markers\",\r\n          type: \"scatter\",\r\n        },\r\n        {\r\n          x: [props.dot.x],\r\n          y: [props.dot.y],\r\n          name: \"User\",\r\n          mode: \"markers\",\r\n          type: \"scatter\",\r\n          marker: {\r\n            color: \"red\",\r\n            size: 10,\r\n          },\r\n        },\r\n      ];\r\n    }\r\n\r\n    setConfig(configData);\r\n  }, [checked, plot_rows, surface_rows, props.inc]);\r\n\r\n  return (\r\n    <Plot\r\n      data={config}\r\n      layout={{\r\n        autosize: true,\r\n        showlegend: false,\r\n        hovermode: \"closest\",\r\n        width: size * 0.37,\r\n        height: size * 0.37,\r\n        margin: {\r\n          l: 60,\r\n          r: 15,\r\n          b: 35,\r\n          t: 15,\r\n        },\r\n        xaxis: {\r\n          title: `Altitude (km), Inclination=${props.inc} deg`,\r\n          type: \"linear\",\r\n          zeroline: false,\r\n        },\r\n        yaxis: {\r\n          title: props.yAxisLabel,\r\n          type: \"linear\",\r\n          zeroline: false,\r\n        },\r\n      }}\r\n      onHover={(e: any) => (e.event.target.style.cursor = \"pointer\")}\r\n      onUnhover={(e: any) => (e.event.target.style.cursor = \"crosshair\")}\r\n      onClick={(e) => props.onClick(e)}\r\n      onDoubleClick={() => props.onClick()}\r\n    />\r\n  );\r\n}\r\n\r\nexport default TwoViewSection;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\nimport { useWindowSize } from \"../../../../utils/util\";\r\n\r\nfunction ThreeViewSection(props: any) {\r\n  const [checked, setChecked] = useState(props.checked);\r\n  const [reset, setReset] = useState(false);\r\n  const [config, setConfig] = useState([]);\r\n  const size: any = useWindowSize();\r\n  const plot_rows = props.plot_rows;\r\n  const surface_rows = props.surface_rows;\r\n\r\n  useEffect(() => {\r\n    setReset(!reset);\r\n  }, [props.reset]);\r\n\r\n  useEffect(() => {\r\n    setChecked(props.checked);\r\n  }, [props.checked]);\r\n\r\n  const unpack = (rows: Array<any>, key: any) => {\r\n    return rows.map(function (row) {\r\n      return row[key];\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    let configData: any = [];\r\n    if (checked.show_surface === true && checked.show_scatter === true) {\r\n      configData = [\r\n        {\r\n          x: unpack(plot_rows, \"altitude\"),\r\n          y: unpack(plot_rows, \"inclination\"),\r\n          z: unpack(plot_rows, \"value\"),\r\n          name: \"Model data\",\r\n          mode: \"markers\",\r\n          type: \"scatter3d\",\r\n          opacity: 1,\r\n          marker: {\r\n            color: \"rgb(23, 190, 207)\",\r\n            size: 2,\r\n          },\r\n        },\r\n        {\r\n          x: unpack(surface_rows, \"altitude\"),\r\n          y: unpack(surface_rows, \"inclination\"),\r\n          z: unpack(surface_rows, \"value\"),\r\n          name: \"Model surface\",\r\n          opacity: 0.3,\r\n          type: \"mesh3d\",\r\n          color: \"rgb(252, 154, 7)\",\r\n        },\r\n        {\r\n          x: [props.alt],\r\n          y: [props.inc],\r\n          z: [props.value],\r\n          name: \"User\",\r\n          mode: \"markers\",\r\n          type: \"scatter3d\",\r\n          opacity: 1,\r\n          marker: {\r\n            color: \"red\",\r\n            size: 5,\r\n          },\r\n        },\r\n      ];\r\n    } else if (\r\n      checked.show_surface === false &&\r\n      checked.show_scatter === true\r\n    ) {\r\n      configData = [\r\n        {\r\n          x: unpack(plot_rows, \"altitude\"),\r\n          y: unpack(plot_rows, \"inclination\"),\r\n          z: unpack(plot_rows, \"value\"),\r\n          name: \"Model data\",\r\n          mode: \"markers\",\r\n          type: \"scatter3d\",\r\n          opacity: 1,\r\n          marker: {\r\n            color: \"rgb(23, 190, 207)\",\r\n            size: 2,\r\n          },\r\n        },\r\n        {\r\n          x: [props.alt],\r\n          y: [props.inc],\r\n          z: [props.value],\r\n          name: \"User\",\r\n          mode: \"markers\",\r\n          type: \"scatter3d\",\r\n          opacity: 1,\r\n          marker: {\r\n            color: \"red\",\r\n            size: 5,\r\n          },\r\n        },\r\n      ];\r\n    } else if (\r\n      checked.show_surface === true &&\r\n      checked.show_scatter === false\r\n    ) {\r\n      configData = [\r\n        {\r\n          x: unpack(surface_rows, \"altitude\"),\r\n          y: unpack(surface_rows, \"inclination\"),\r\n          z: unpack(surface_rows, \"value\"),\r\n          name: \"Model surface\",\r\n          opacity: 0.3,\r\n          type: \"mesh3d\",\r\n          color: \"rgb(252, 154, 7)\",\r\n        },\r\n        {\r\n          x: [props.alt],\r\n          y: [props.inc],\r\n          z: [props.value],\r\n          name: \"User\",\r\n          mode: \"markers\",\r\n          type: \"scatter3d\",\r\n          opacity: 1,\r\n          marker: {\r\n            color: \"red\",\r\n            size: 5,\r\n          },\r\n        },\r\n      ];\r\n    } else if (\r\n      checked.show_surface === false &&\r\n      checked.show_scatter === false\r\n    ) {\r\n      configData = [\r\n        {\r\n          x: [],\r\n          y: [],\r\n          z: [],\r\n          type: \"mesh3d\",\r\n        },\r\n        {\r\n          x: [],\r\n          y: [],\r\n          z: [],\r\n          mode: \"markers\",\r\n          type: \"scatter3d\",\r\n        },\r\n        {\r\n          x: [parseFloat(props.alt)],\r\n          y: [parseFloat(props.inc)],\r\n          z: [parseFloat(props.value)],\r\n          name: \"User\",\r\n          mode: \"markers\",\r\n          type: \"scatter3d\",\r\n          opacity: 1,\r\n          marker: {\r\n            color: \"red\",\r\n            size: 5,\r\n          },\r\n        },\r\n      ];\r\n    }\r\n\r\n    setConfig(configData);\r\n  }, [checked, plot_rows, surface_rows, reset]);\r\n\r\n  return (\r\n    <Plot\r\n      data={config}\r\n      layout={{\r\n        autosize: true,\r\n        width: size * 0.37,\r\n        height: size * 0.37,\r\n        margin: {\r\n          l: 0,\r\n          r: 0,\r\n          b: 0,\r\n          t: 0,\r\n        },\r\n        scene: {\r\n          aspectratio: {\r\n            x: 0.6,\r\n            y: 0.6,\r\n            z: 0.6,\r\n          },\r\n          camera: {\r\n            center: {\r\n              x: 0,\r\n              y: 0,\r\n              z: 0,\r\n            },\r\n            eye: {\r\n              x: 0.9,\r\n              y: 0.9,\r\n              z: 0.9,\r\n            },\r\n            up: {\r\n              x: 0,\r\n              y: 0,\r\n              z: 1,\r\n            },\r\n          },\r\n          xaxis: {\r\n            title: \"Altitude (km)\",\r\n            type: \"linear\",\r\n            range: [Math.max(...unpack(surface_rows, \"altitude\")), 0],\r\n            zeroline: false,\r\n          },\r\n          yaxis: {\r\n            title: \"Inclination (deg)\",\r\n            type: \"linear\",\r\n            range: [90, 0],\r\n            zeroline: false,\r\n          },\r\n          zaxis: {\r\n            title: props.zAxisLabel,\r\n            type: \"linear\",\r\n            range: [\r\n              Math.min(...unpack(surface_rows, \"value\")),\r\n              Math.max(...unpack(surface_rows, \"value\")),\r\n            ],\r\n            zeroline: false,\r\n          },\r\n        },\r\n        showlegend: false,\r\n      }}\r\n      onClick={(e) => props.onClick(e)}\r\n      onDoubleClick={() => props.onClick()}\r\n    />\r\n  );\r\n}\r\n\r\nexport default ThreeViewSection;\r\n","import React from \"react\";\r\nimport {\r\n  Grid,\r\n  IconButton,\r\n  Divider,\r\n} from \"@material-ui/core\";\r\nimport RemoveCircleOutlineIcon from \"@material-ui/icons/RemoveCircleOutline\";\r\n\r\nfunction MinusAddon(props: any) {\r\n  return (\r\n    <Grid item md={12}>\r\n      <Grid container justify=\"center\" alignItems=\"center\">\r\n        <Grid item style={{ width: \"4%\" }}>\r\n          <IconButton onClick={() => props.onSelected(props.id)}>\r\n            <RemoveCircleOutlineIcon />\r\n          </IconButton>\r\n        </Grid>\r\n        <Grid item md={11} style={{ width: \"96%\" }}>\r\n          <Divider />\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default MinusAddon;\r\n","interface MenuSubAttribute {\r\n  id: number;\r\n  dataset: string;\r\n  name: string;\r\n}\r\ninterface MenuSelecter {\r\n  [key: string]: Array<MenuSubAttribute>;\r\n}\r\ninterface DashParams {\r\n  [key: string]: number;\r\n}\r\n\r\nexport const MENU_ITEMS: MenuSelecter = {\r\n  as_needed_handoff: [\r\n    { id: 0, dataset: \"coverage\", name: \"Key Metrics\" },\r\n    { id: 1, dataset: \"coverage\", name: \"Running Average\" },\r\n    { id: 2, dataset: \"coverage_histogram\", name: \"Distribution\" },\r\n    { id: 3, dataset: \"coverage_histogram\", name: \"Statistics Chart\" },\r\n  ],\r\n  maximum_powee_handoff: [\r\n    { id: 0, dataset: \"gap\", name: \"Key Metrics\" },\r\n    { id: 1, dataset: \"gap\", name: \"Running Average\" },\r\n    { id: 2, dataset: \"gap_histogram\", name: \"Distribution\" },\r\n    { id: 3, dataset: \"gap_histogram\", name: \"Statistics Chart\" },\r\n  ],\r\n};\r\n\r\nexport const INIT_PARAMS: DashParams = {\r\n  altitude: 300,\r\n  availabilityThreshold: 0.999,\r\n  dataVolumeNeed: 0.1,\r\n  gapThreshold: 6,\r\n  inclination: 0,\r\n  latitude: 30,\r\n  launchYear: 2030,\r\n  longitude: 30,\r\n  navAccuracyNeed: 20,\r\n  powerAmplifier: 1,\r\n  value: 100,\r\n};\r\n","import React from \"react\";\r\nimport { Menu, MenuItem } from \"@material-ui/core\";\r\nimport * as Constants from \"../../constants\";\r\nimport { grey } from \"@material-ui/core/colors\";\r\n\r\nfunction Selection(props: any) {\r\n  return (\r\n    <Menu\r\n      anchorEl={props.anchorEl}\r\n      keepMounted\r\n      open={Boolean(props.anchorEl)}\r\n      onClose={() => props.onAnchorEl(null)}\r\n    >\r\n      {Constants.MENU_ITEMS[\"as_needed_handoff\"].map((el: any) => (\r\n        <MenuItem\r\n          id={el.id}\r\n          key={el.id}\r\n          onClick={() => props.onSelected(el.id)}\r\n          style={{ backgroundColor: props.selected.includes(el.id) ? grey[300] : \"\" }}\r\n        >\r\n          {el.name}\r\n        </MenuItem>\r\n      ))}\r\n    </Menu>\r\n  );\r\n}\r\n\r\nexport default Selection;\r\n","import React from \"react\";\r\nimport { Grid, IconButton, Divider } from \"@material-ui/core\";\r\nimport AddCircleOutlineIcon from \"@material-ui/icons/AddCircleOutline\";\r\nimport Selection from \"../Select\";\r\n\r\nfunction PlusAddon(props: any) {\r\n  return (\r\n    <Grid item md={12}>\r\n      <Grid container justify=\"center\" alignItems=\"center\">\r\n        <Grid item style={{ width: \"4%\" }}>\r\n          <IconButton onClick={(e) => props.onAnchorEl(e.currentTarget)}>\r\n            <AddCircleOutlineIcon />\r\n          </IconButton>\r\n          <Selection\r\n            selected={props.selected}\r\n            anchorEl={props.anchorEl}\r\n            onAnchorEl={(value: any) => props.onAnchorEl(value)}\r\n            onSelected={(value: any) => props.onSelected(value)}\r\n          />\r\n        </Grid>\r\n        <Grid item md={11} style={{ width: \"96%\" }}>\r\n          <Divider />\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default PlusAddon;\r\n","import React from \"react\";\r\nimport {\r\n  Grid,\r\n  Typography,\r\n  Table,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  TableBody,\r\n} from \"@material-ui/core\";\r\n\r\nimport LineChartSection from \"../../../../chart-panel/line-chart-section\";\r\nimport HistogramChartSection from \"../../../../chart-panel/histogram-chart-section\";\r\nimport BoxChartSection from \"../../../../chart-panel/box-chart-section\";\r\n\r\nfunction createData(name: String, value: String) {\r\n  return { name, value };\r\n}\r\n\r\nconst rows = [\r\n  createData(\"Average (sec)\", \"xx\"),\r\n  createData(\"Time-Averaged Gap\", \"xx\"),\r\n  createData(\"Median (sec)\", \"xx\"),\r\n  createData(\"Maximum (minutes)\", \"xx\"),\r\n  createData(\"Minimum (sec)\", \"xx\"),\r\n  createData(\"Average # Gaps Per Orbit\", \"xx\"),\r\n  createData(\"Average # Gaps Per Day\", \"xx\"),\r\n];\r\n\r\nfunction SelectedChartSection(props: any) {\r\n  return (\r\n    <>\r\n      {props.id === 0 && (\r\n        <Grid container justify=\"center\" alignItems=\"center\">\r\n          <Grid item md={10} style={{ textAlign: \"center\" }}>\r\n            <Typography variant=\"h6\">{`Key Metrics`}</Typography>\r\n          </Grid>\r\n          <Grid item md={10}>\r\n            <Table aria-label=\"simple table\" size=\"small\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>{`Gap Statistic`}</TableCell>\r\n                  <TableCell>{`Value`}</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {rows.map((row: any) => (\r\n                  <TableRow key={row.name}>\r\n                    <TableCell component=\"th\" scope=\"row\">\r\n                      {row.name}\r\n                    </TableCell>\r\n                    <TableCell>{row.value}</TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </Grid>\r\n        </Grid>\r\n      )}\r\n      {props.id === 1 && (\r\n        <LineChartSection source={props.data} dataType={props.dataType} />\r\n      )}\r\n      {props.id === 2 && <HistogramChartSection {...props.data} />}\r\n      {props.id === 3 && <BoxChartSection {...props.data} />}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SelectedChartSection;\r\n","import React, { useState } from \"react\";\r\nimport { Grid, Card, CardContent } from \"@material-ui/core\";\r\n\r\nimport MinusAddon from \"../../../../components/Button/MinusAddon\";\r\nimport PlusAddon from \"../../../../components/Button/PlusAddon\";\r\nimport SelectedChartSection from \"./selected-chart-section\";\r\nimport * as Constants from \"../../../../constants\";\r\n\r\nfunction ChartsLibsSection(props: any) {\r\n  const [selected, setSelected] = useState([1, 2, 3] as any);\r\n  const [anchorEl, setAnchorEl] = useState(null as any);\r\n\r\n  const handleSelected = (id: any, type: string) => {\r\n    if (!selected.includes(id) && type === \"add\") {\r\n      setSelected((prevState: any) => [...prevState, id]);\r\n    } else if (type === \"remove\") {\r\n      setSelected(selected.filter((item: any) => item !== id));\r\n    }\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {selected.length === 0 && (\r\n        <PlusAddon\r\n          type={0}\r\n          selected={selected}\r\n          anchorEl={anchorEl}\r\n          onAnchorEl={(value: any) => setAnchorEl(value)}\r\n          onSelected={(value: any) => handleSelected(value, \"add\")}\r\n        />\r\n      )}\r\n      {selected.map((item: any, idx: number) => {\r\n        let dset = Constants.MENU_ITEMS[props.dataSet][item].dataset;\r\n        return (\r\n          <React.Fragment key={item}>\r\n            <MinusAddon\r\n              id={item}\r\n              type={0}\r\n              selected={selected}\r\n              anchorEl={anchorEl}\r\n              onAnchorEl={(value: any) => setAnchorEl(value)}\r\n              onSelected={(value: any) => handleSelected(value, \"remove\")}\r\n            />\r\n            <Grid item md={12}>\r\n              <Card style={{ marginLeft: \"2.5rem\", marginRight: \"2.5rem\" }}>\r\n                <CardContent>\r\n                  {props.traces[dset] &&\r\n                    Object.keys(props.traces[dset]).length > 0 && (\r\n                      <SelectedChartSection\r\n                        id={item}\r\n                        data={props.traces[dset]}\r\n                        dataType={props.dataType}\r\n                      />\r\n                    )}\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n            {idx === selected.length - 1 && (\r\n              <PlusAddon\r\n                type={0}\r\n                selected={selected}\r\n                anchorEl={anchorEl}\r\n                onAnchorEl={(value: any) => setAnchorEl(value)}\r\n                onSelected={(value: any) => handleSelected(value, \"add\")}\r\n              />\r\n            )}\r\n          </React.Fragment>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ChartsLibsSection;\r\n","import React, { useState } from \"react\";\r\nimport { CSVLink } from \"react-csv\";\r\nimport {\r\n  Grid,\r\n  Button,\r\n  Box,\r\n  Typography,\r\n  Tooltip,\r\n  IconButton,\r\n  Divider,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n} from \"@material-ui/core\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport ExpandLessIcon from \"@material-ui/icons/ExpandLess\";\r\nimport LaunchIcon from \"@material-ui/icons/Launch\";\r\n\r\nimport useStyles from \"../../utils/styles\";\r\nimport { grey } from \"@material-ui/core/colors\";\r\n\r\nconst OptionAddon: React.FC<any> = (props: any) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Grid container justify=\"center\" alignItems=\"center\" spacing={2}>\r\n      <Grid item md={4}>\r\n        <Typography\r\n          component=\"p\"\r\n          style={{\r\n            textAlign: \"end\",\r\n            position: \"absolute\",\r\n            left: 10,\r\n            top: 10,\r\n          }}\r\n        >\r\n          <IconButton\r\n            size=\"small\"\r\n            onClick={() => setIsOpen(!isOpen)}\r\n            className=\"mt-2 mb-2\"\r\n            style={{ fontSize: 11 }}\r\n          >\r\n            {`Graph Options`}\r\n            {isOpen ? <ExpandLessIcon /> : <ExpandMoreIcon />}\r\n          </IconButton>\r\n        </Typography>\r\n      </Grid>\r\n      <Grid item md={6} />\r\n      {props.isDash && (\r\n        <Grid item md={1}>\r\n          <IconButton\r\n            style={{\r\n              padding: 0,\r\n              position: \"absolute\",\r\n              right: 10,\r\n              top: 10,\r\n            }}\r\n            onClick={() => props.onChart()}\r\n          >\r\n            <LaunchIcon />\r\n          </IconButton>\r\n          <IconButton\r\n            style={{\r\n              padding: 0,\r\n              position: \"absolute\",\r\n              right: 50,\r\n              top: 12,\r\n            }}\r\n          >\r\n            <CSVLink\r\n              data={props.source.plot_value}\r\n              filename={`Plot-${Date.now()}.csv`}\r\n              className=\"btn btn-primary\"\r\n              target=\"_blank\"\r\n            >\r\n              <Typography component=\"p\" variant=\"body2\">\r\n                {\"csv\"}\r\n              </Typography>\r\n            </CSVLink>\r\n          </IconButton>\r\n        </Grid>\r\n      )}\r\n      {isOpen && (\r\n        <Grid item md={11}>\r\n          <Box\r\n            borderColor=\"primary.main\"\r\n            border={2}\r\n            borderRadius={5}\r\n            padding={2}\r\n          >\r\n            <Grid container justify=\"center\" alignItems=\"center\" spacing={2}>\r\n              <Grid item md={3}>\r\n                <Grid\r\n                  container\r\n                  justify=\"flex-start\"\r\n                  alignItems=\"center\"\r\n                  spacing={2}\r\n                >\r\n                  <Grid item md={5}>\r\n                    <Button\r\n                      id={props.type}\r\n                      name=\"2d_view\"\r\n                      variant=\"outlined\"\r\n                      size=\"small\"\r\n                      style={{\r\n                        backgroundColor:\r\n                          props.viewMethod !== \"3d_view\"\r\n                            ? grey[300]\r\n                            : \"inherit\",\r\n                      }}\r\n                      onClick={(e) => props.onViewMethod(e)}\r\n                      fullWidth\r\n                    >\r\n                      {\"2D\"}\r\n                    </Button>\r\n                  </Grid>\r\n                  <Grid item md={7} />\r\n                  <Grid item md={5}>\r\n                    <Button\r\n                      name=\"3d_view\"\r\n                      variant=\"outlined\"\r\n                      size=\"small\"\r\n                      style={{\r\n                        backgroundColor:\r\n                          props.viewMethod === \"3d_view\"\r\n                            ? grey[300]\r\n                            : \"inherit\",\r\n                      }}\r\n                      onClick={(e) => props.onViewMethod(e)}\r\n                      fullWidth\r\n                    >\r\n                      {\"3D\"}\r\n                    </Button>\r\n                  </Grid>\r\n                  <Grid item md={7} />\r\n                </Grid>\r\n              </Grid>\r\n              <Divider orientation=\"vertical\" flexItem />\r\n              <Grid item md={5} style={{ marginRight: 15 }}>\r\n                <FormControl\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                  className={classes.formControl}\r\n                  fullWidth\r\n                >\r\n                  <InputLabel id=\"demo-simple-select-outlined-label\">{`Inclination`}</InputLabel>\r\n                  <Select\r\n                    labelId=\"inclination-label\"\r\n                    id=\"inclination-label\"\r\n                    value={props.inc}\r\n                    onChange={(e) => props.onInc(e.target.value)}\r\n                    label=\"Inclination\"\r\n                    disabled={props.viewMethod === \"3d_view\"}\r\n                  >\r\n                    <MenuItem value=\"\" disabled>\r\n                      <em>{`None`}</em>\r\n                    </MenuItem>\r\n                    {props.incs.map((item: number) => (\r\n                      <MenuItem key={`inclination-${item}`} value={item}>\r\n                        {item}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              <Divider orientation=\"vertical\" flexItem />\r\n              <Grid item md={3}>\r\n                <Tooltip\r\n                  title={\r\n                    <Typography\r\n                      gutterBottom\r\n                      component=\"p\"\r\n                      variant=\"body1\"\r\n                      dangerouslySetInnerHTML={{\r\n                        __html: \"Reset 3D plot\",\r\n                      }}\r\n                    />\r\n                  }\r\n                  placement=\"top-start\"\r\n                  classes={{ tooltip: classes.tooltip }}\r\n                >\r\n                  <span>\r\n                    <Button\r\n                      id={props.type}\r\n                      name=\"Reset\"\r\n                      variant=\"outlined\"\r\n                      size=\"small\"\r\n                      disabled={props.viewMethod === \"2d_view\" ? true : false}\r\n                      onClick={() => props.resetPlot()}\r\n                      fullWidth\r\n                    >\r\n                      {\"Reset\"}\r\n                    </Button>\r\n                  </span>\r\n                </Tooltip>\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n        </Grid>\r\n      )}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default OptionAddon;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport {\r\n  Grid,\r\n  Typography,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Card,\r\n  CardContent,\r\n} from \"@material-ui/core\";\r\nimport { grey } from \"@material-ui/core/colors\";\r\nimport { ToggleButton, ToggleButtonGroup } from \"@material-ui/lab\";\r\n\r\nimport TwoViewSection from \"./two-view-section\";\r\nimport ThreeViewSection from \"./three-view-section\";\r\nimport ChartsLibsSection from \"./charts-libs-section\";\r\nimport OptionAddon from \"../../../components/Button/OptionAddon\";\r\nimport {\r\n  getItems,\r\n  getSystems,\r\n  getSystemVersion,\r\n  getFileId,\r\n} from \"../../../API\";\r\nimport useStyles from \"../../../utils/styles\";\r\n\r\nconst INIT_CHECK_STATUS = {\r\n  show_surface: true,\r\n  show_scatter: true,\r\n};\r\n\r\nconst INIT_FILE_ID = [{ id: 1620 }, { id: 1729 }];\r\n\r\nfunction AnalyzeRegressionSection(props: any) {\r\n  const [viewMethod, setViewMethod] = useState(\"2d_view\");\r\n  const [dataSet, setDataSet] = useState(\"as_needed_handoff\" as any);\r\n  const [systems, setSystems] = useState([] as any);\r\n  const [versions, setVersions] = useState([] as any);\r\n  const [dot, setDot] = useState({ x: props.alt, y: props.value } as any);\r\n  const [fileId, setFileId] = useState(INIT_FILE_ID);\r\n  const [checked, setChecked] = useState(INIT_CHECK_STATUS);\r\n  const [traces, setTraces] = useState({} as any);\r\n  const [reset, setReset] = useState(false);\r\n  const [selected, setSelected] = useState(false);\r\n  const classes = useStyles();\r\n  const plot_rows = props.data.plot_value;\r\n  const surface_rows: Array<any> = [];\r\n  const zAxisLabel = props.data.label;\r\n\r\n  useEffect(() => {\r\n    if (fileId.length > 0)\r\n      getItems({\r\n        dataType: props.dataType,\r\n        fileId: fileId,\r\n        version: props.version,\r\n      })\r\n        .then((res) => {\r\n          Object.keys(res.data).map((el) => {\r\n            let ctype: String = res.data[el][\"type\"];\r\n            let gaps: Array<any> = [];\r\n            let durations: Array<any> = [];\r\n            let avgs: Array<any> = [];\r\n\r\n            // Detect chart type and set Traces\r\n            if (ctype === \"line\") {\r\n              res.data[el][\"data\"].map((item: Array<any>, idx: number) => {\r\n                gaps.push(idx + 1);\r\n                durations.push(item[0]);\r\n                avgs.push(item[1]);\r\n              });\r\n\r\n              setTraces((prevState: any) => ({\r\n                ...prevState,\r\n                [el]: {\r\n                  xTraces: gaps,\r\n                  yTraces: durations,\r\n                  avgTraces: avgs,\r\n                  type: ctype,\r\n                  title: res.data[el][\"title\"],\r\n                },\r\n              }));\r\n            } else if (ctype === \"histogram\") {\r\n              setTraces((prevState: any) => ({\r\n                ...prevState,\r\n                [el]: {\r\n                  xTraces: res.data[el][\"data\"],\r\n                  type: ctype,\r\n                  title: res.data[el][\"title\"],\r\n                },\r\n              }));\r\n            }\r\n          });\r\n        })\r\n        .catch(() => {\r\n          setTraces({});\r\n        });\r\n  }, [props.dataType, props.version, fileId]);\r\n\r\n  useEffect(() => {\r\n    getSystems()\r\n      .then((res: any) => setSystems(res.data))\r\n      .catch((err: any) => setSystems([]));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (props.inclination !== \"\") {\r\n      const params = {\r\n        user_altitude: dot.x,\r\n        user_inclination: props.inclination,\r\n        system: props.system,\r\n        version: props.version,\r\n      };\r\n\r\n      getFileId(params)\r\n        .then((res: any) => setFileId(res.data))\r\n        .catch((err: any) => setFileId([]));\r\n    }\r\n  }, [props.inclination]);\r\n\r\n  useEffect(() => {\r\n    setDot({\r\n      x: props.data.plot_value[0].altitude,\r\n      y: props.data.plot_value[0].value,\r\n    });\r\n  }, [props.data]);\r\n\r\n  useEffect(() => {\r\n    if (props.system !== \"\") {\r\n      getSystemVersion({ system: props.system })\r\n        .then((res: any) => setVersions(res.data))\r\n        .catch((err: any) => setVersions([]));\r\n    }\r\n  }, [props.system]);\r\n\r\n  const handleCheck = (event: any) => {\r\n    const { name, checked } = event.currentTarget;\r\n    setChecked((prevState) => ({ ...prevState, [name]: checked }));\r\n  };\r\n\r\n  const handleDataSetClick = (event: any) => {\r\n    event.preventDefault();\r\n    const { id, name } = event.currentTarget;\r\n\r\n    setDataSet(id);\r\n    props.onDataType(name);\r\n  };\r\n\r\n  const handleClick = (event: any) => {\r\n    if (event) {\r\n      const params = {\r\n        user_altitude: event.points[0].x,\r\n        user_inclination: props.inc,\r\n        system: props.system,\r\n        version: props.version,\r\n      };\r\n\r\n      setDot({ x: event.points[0].x, y: event.points[0].y });\r\n      getFileId(params)\r\n        .then((res: any) => setFileId(res.data))\r\n        .catch((err: any) => setFileId([]));\r\n    }\r\n    setSelected(true);\r\n  };\r\n\r\n  return (\r\n    <Grid container justify=\"center\" alignItems=\"center\" spacing={2}>\r\n      <Grid item md={12}>\r\n        <Grid\r\n          container\r\n          justify=\"flex-start\"\r\n          alignItems=\"center\"\r\n          spacing={2}\r\n          style={{\r\n            backgroundColor: grey[300],\r\n            minHeight: \"10vh\",\r\n          }}\r\n        >\r\n          <Grid item md={5} style={{ marginLeft: 15 }}>\r\n            <ToggleButtonGroup value={dataSet} onChange={handleDataSetClick}>\r\n              <ToggleButton\r\n                id=\"as_needed_handoff\"\r\n                name=\"coverage\"\r\n                value=\"as_needed_handoff\"\r\n                size=\"small\"\r\n              >\r\n                {`RF Coverage (%)`}\r\n              </ToggleButton>\r\n              <ToggleButton\r\n                id=\"maximum_powee_handoff\"\r\n                name=\"gap\"\r\n                value=\"maximum_powee_handoff\"\r\n                size=\"small\"\r\n              >\r\n                {`No Coverage (%)`}\r\n              </ToggleButton>\r\n            </ToggleButtonGroup>\r\n          </Grid>\r\n          <Grid item md={3} style={{ marginLeft: \"15px\" }}>\r\n            <FormControl\r\n              variant=\"outlined\"\r\n              size=\"small\"\r\n              className={classes.formControl}\r\n              fullWidth\r\n              disabled={viewMethod === \"3d_view\"}\r\n            >\r\n              <InputLabel id=\"demo-simple-select-outlined-label\">{`System`}</InputLabel>\r\n              <Select\r\n                labelId=\"demo-simple-select-outlined-label\"\r\n                id=\"demo-simple-select-outlined\"\r\n                value={props.system}\r\n                onChange={(e) => props.onSystem(e.target.value)}\r\n                label=\"System\"\r\n              >\r\n                <MenuItem value=\"\" disabled>\r\n                  <em>{`None`}</em>\r\n                </MenuItem>\r\n                {systems.map((item: any) => (\r\n                  <MenuItem key={item.system_name} value={item.system_id}>\r\n                    {item.system_name}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid item md={3}>\r\n            <FormControl\r\n              variant=\"outlined\"\r\n              size=\"small\"\r\n              className={classes.formControl}\r\n              fullWidth\r\n            >\r\n              <InputLabel id=\"demo-simple-select-outlined-label\">{`Version`}</InputLabel>\r\n              <Select\r\n                labelId=\"demo-simple-select-outlined-label\"\r\n                id=\"demo-simple-select-outlined\"\r\n                value={props.version}\r\n                onChange={(e) => props.onVersion(e.target.value)}\r\n                label=\"Version\"\r\n              >\r\n                <MenuItem value=\"\" disabled>\r\n                  <em>{`None`}</em>\r\n                </MenuItem>\r\n                {versions.map((item: any) => (\r\n                  <MenuItem\r\n                    key={`version_${item.versions}`}\r\n                    value={item.versions}\r\n                  >\r\n                    {item.versions}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid item md={12} style={{ textAlign: \"center\", position: \"relative\" }}>\r\n        <Typography variant=\"h6\">\r\n          {dataSet === \"as_needed_handoff\"\r\n            ? `RF Coverage (%) vs. User Inclination`\r\n            : `No Coverage (%) vs. User Inclination`}\r\n        </Typography>\r\n        <OptionAddon\r\n          source={props.data}\r\n          checked={checked}\r\n          viewMethod={viewMethod}\r\n          inc={props.inclination}\r\n          incs={props.incs}\r\n          isDash={false}\r\n          onInc={(value: any) => props.onInc(value)}\r\n          onChecked={handleCheck}\r\n          resetPlot={() => setReset(!reset)}\r\n          onViewMethod={(e: any) => setViewMethod(e.currentTarget.name)}\r\n        />\r\n      </Grid>\r\n\r\n      {/* FIXME: check at the process of cart integration.\r\n      <Grid item md={12} style={{ zIndex: 1000 }}>\r\n        <MathJax.Provider>\r\n          <MathJax.Node formula={props.text} />\r\n        </MathJax.Provider>\r\n      </Grid> */}\r\n\r\n      <Grid item md={12}>\r\n        <Card style={{ marginLeft: \"2.5rem\", marginRight: \"2.5rem\" }}>\r\n          <CardContent>\r\n            {viewMethod === \"3d_view\" ? (\r\n              <Grid item md={12}>\r\n                <ThreeViewSection\r\n                  data={props.source}\r\n                  equation={props.equation}\r\n                  maxAltitude={props.maxAltitude}\r\n                  alt={props.alt}\r\n                  inc={props.inclination !== \"\" ? props.inclination : props.inc}\r\n                  value={props.value}\r\n                  reset={reset}\r\n                  isLegend={false}\r\n                  isSub={true}\r\n                  plot_rows={props.source.plot_value}\r\n                  surface_rows={surface_rows}\r\n                  zAxisLabel={zAxisLabel}\r\n                  checked={checked}\r\n                  onClick={handleClick}\r\n                />\r\n              </Grid>\r\n            ) : (\r\n              <Grid item md={12}>\r\n                <TwoViewSection\r\n                  data={props.data}\r\n                  equation={props.equation}\r\n                  maxAltitude={props.maxAltitude}\r\n                  alt={props.alt}\r\n                  inc={props.inclination !== \"\" ? props.inclination : props.inc}\r\n                  value={props.value}\r\n                  isLegend={false}\r\n                  isSub={true}\r\n                  plot_rows={plot_rows}\r\n                  surface_rows={surface_rows}\r\n                  yAxisLabel={zAxisLabel}\r\n                  dot={dot}\r\n                  checked={checked}\r\n                  onClick={handleClick}\r\n                />\r\n              </Grid>\r\n            )}\r\n          </CardContent>\r\n        </Card>\r\n      </Grid>\r\n      {selected && <></>}\r\n      {Object.keys(traces).length > 0 && (\r\n        <ChartsLibsSection\r\n          traces={traces}\r\n          dataSet={dataSet}\r\n          dataType={props.dataType}\r\n        />\r\n      )}\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default AnalyzeRegressionSection;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport {\r\n  Grid,\r\n  CssBaseline,\r\n  Slide,\r\n  Typography,\r\n  IconButton,\r\n  Dialog,\r\n  DialogTitle as MuiDialogTitle,\r\n  DialogContent,\r\n} from \"@material-ui/core\";\r\nimport { TransitionProps } from \"@material-ui/core/transitions\";\r\nimport { Close as CloseIcon } from \"@material-ui/icons\";\r\n\r\nimport { getCartItems } from \"../../API\";\r\nimport useStyles from \"../../utils/styles\";\r\nimport AnalyzeRegressionSection from \"./analyze-regression-section\";\r\n\r\nconst INIT_PARAMS = {\r\n  altitude: 300,\r\n  availabilityThreshold: 0.999,\r\n  dataVolumeNeed: 0.1,\r\n  gapThreshold: 6,\r\n  inclination: 0,\r\n  latitude: 30,\r\n  launchYear: 2030,\r\n  longitude: 30,\r\n  navAccuracyNeed: 20,\r\n  powerAmplifier: 1,\r\n  value: 100,\r\n};\r\n\r\nconst Transition = React.forwardRef(function Transition(\r\n  props: TransitionProps & { children?: React.ReactElement<any, any> },\r\n  ref: React.Ref<Function>\r\n) {\r\n  return <Slide direction=\"left\" ref={ref} {...props} />;\r\n});\r\n\r\nfunction CartPanel(props: any) {\r\n  const [source, setSource] = useState({} as any);\r\n  const [dataSource, setDataSource] = useState({} as any);\r\n  const [system, setSystem] = useState(5 as any);\r\n  const [version, setVersion] = useState(3 as any);\r\n  const [inclination, setInclination] = useState(\"\");\r\n  const [incs, setIncs] = useState([] as any);\r\n  const [dataType, setDataType] = useState(\"coverage\" as any);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [terrestrial, setTerrestrial] = useState({});\r\n  const [maxAltitude, setMaxAltitude] = useState(0);\r\n  const [coefficients, setCoefficients] = useState({} as any);\r\n  const [text, setText] = useState(\"\");\r\n  const deepDive = \"system1/coverage\";\r\n  const metric = deepDive.split(\"/\")[1];\r\n  const missionType = \"orbital\";\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    setText(\"\");\r\n    getCartItems({\r\n      type: missionType,\r\n      system: system,\r\n      version: version,\r\n      dataType,\r\n    })\r\n      .then((res: any) => {\r\n        setTerrestrial(res.data.terrestrial);\r\n        setSource(res.data.data);\r\n        setDataSource(res.data.data);\r\n        setMaxAltitude(res.data.maxAltitude);\r\n        setCoefficients(res.data.coefficients);\r\n        setText(res.data.text);\r\n\r\n        if (Object.keys(res.data.data).includes(\"plot_value\")) {\r\n          let tmp = res.data.data.plot_value.map(\r\n            (item: any) => item[\"inclination\"]\r\n          );\r\n          let uniqueArray: Array<any> = [...new Set(tmp)];\r\n          setIncs(uniqueArray.sort());\r\n        }\r\n\r\n        // FIXME: there is no real data for it.\r\n        //\r\n        // setText(\r\n        //   props.equationsTex[system.replace(\" \", \"_\").toLowerCase()][metric](\r\n        //     data[\"coefficients\"][metric]\r\n        //   )\r\n        // );\r\n      })\r\n      .then(() => {\r\n        setIsLoading(false);\r\n      });\r\n  }, [system, version, dataType]);\r\n\r\n  useEffect(() => {\r\n    if (Object.keys(dataSource).includes(\"plot_value\")) {\r\n      let data = dataSource.plot_value.filter(\r\n        (item: any) => item.inclination === inclination\r\n      );\r\n      setSource((prevState: any) => ({ ...prevState, plot_value: data }));\r\n    }\r\n  }, [inclination]);\r\n\r\n  const equation = (inc: any, alt: any, metric: string) => {\r\n    // FIXME: activate in integration of cart.\r\n    //\r\n    // const altitude = parseFloat(alt);\r\n    // const inclination = parseFloat(inc);\r\n\r\n    // const coefs = coefficients[metric];\r\n    // const eqn = props.equations[system.replace(\" \", \"_\").toLowerCase()][metric];\r\n\r\n    // return eqn(coefs, altitude, inclination);\r\n    return inc;\r\n  };\r\n\r\n  return (\r\n    <Dialog\r\n      open={props.isOpen}\r\n      TransitionComponent={Transition}\r\n      onClose={() => props.onClose()}\r\n      classes={{ paper: classes.dialogDeep }}\r\n    >\r\n      <CssBaseline />\r\n      <MuiDialogTitle>\r\n        <Typography component=\"strong\" variant=\"h6\">\r\n          {\"Cart Integration Panel\"}\r\n        </Typography>\r\n        <IconButton\r\n          aria-label=\"Close\"\r\n          className={classes.dialogCloseBtn}\r\n          onClick={() => props.onClose()}\r\n        >\r\n          <CloseIcon />\r\n        </IconButton>\r\n      </MuiDialogTitle>\r\n      <DialogContent\r\n        dividers={true}\r\n        style={{ paddingRight: 0, paddingLeft: 0, overflowX: \"hidden\" }}\r\n      >\r\n        <Grid container justify=\"center\" alignItems=\"center\">\r\n          <Grid item md={12}>\r\n            {!isLoading &&\r\n              (missionType === \"orbital\" ? (\r\n                <AnalyzeRegressionSection\r\n                  equation={(x: any, y: any, m: any) => equation(x, y, m)}\r\n                  maxAltitude={maxAltitude}\r\n                  alt={INIT_PARAMS.altitude}\r\n                  inc={INIT_PARAMS.inclination}\r\n                  value={INIT_PARAMS.value}\r\n                  data={source}\r\n                  source={dataSource}\r\n                  dataType={dataType}\r\n                  selectedItem={metric}\r\n                  text={text}\r\n                  system={system}\r\n                  version={version}\r\n                  inclination={inclination}\r\n                  incs={incs}\r\n                  onInc={(value: any) => setInclination(value)}\r\n                  onSystem={(value: any) => setSystem(value)}\r\n                  onVersion={(value: any) => setVersion(value)}\r\n                  onDataType={(value: any) => setDataType(value)}\r\n                />\r\n              ) : (\r\n                <></>\r\n              ))}\r\n          </Grid>\r\n        </Grid>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n}\r\n\r\nexport default CartPanel;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport SwipeableViews from \"react-swipeable-views\";\r\n\r\nimport {\r\n  Grid,\r\n  Container,\r\n  CssBaseline,\r\n  Card,\r\n  CardHeader,\r\n  CardContent,\r\n  Typography,\r\n  Button,\r\n  Select,\r\n  MenuItem,\r\n  Tab,\r\n  Tabs,\r\n  AppBar,\r\n  Box,\r\n} from \"@material-ui/core\";\r\nimport { grey } from \"@material-ui/core/colors\";\r\nimport { useTheme } from \"@material-ui/core/styles\";\r\n\r\nimport { getItems } from \"../../API\";\r\nimport useStyles from \"../../utils/styles\";\r\nimport LineChartSection from \"./line-chart-section\";\r\nimport HistogramChartSection from \"./histogram-chart-section\";\r\nimport BoxChartSection from \"./box-chart-section\";\r\nimport TerrestrialHeatMap from \"./terrestrial-heatmap-chart\";\r\nimport CartPanel from \"../cart-panel\";\r\n\r\nconst INIT_MENUS = [\r\n  { id: \"as_needed_handoff\", name: \"Power below threshold handoff\" },\r\n  { id: \"maximum_powee_handoff\", name: \"Maximum power immediate handoff\" },\r\n];\r\n\r\nconst TabPanel = (props: any) => {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`full-width-tabpanel-${index}`}\r\n      aria-labelledby={`full-width-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && <Box p={3}>{children}</Box>}\r\n    </div>\r\n  );\r\n};\r\n\r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.any.isRequired,\r\n  value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index: any) {\r\n  return {\r\n    id: `full-width-tab-${index}`,\r\n    \"aria-controls\": `full-width-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\nfunction ChartPanel() {\r\n  const [traces, setTraces] = useState({} as any);\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [isOpenDash, setIsOpenDash] = useState(false);\r\n  const [selected, setSelected] = useState(\"none\");\r\n  const [tab, setTab] = useState(0);\r\n  const theme = useTheme();\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    if (selected !== \"none\")\r\n      getItems(selected)\r\n        .then((res) => {\r\n          Object.keys(res.data).map((el) => {\r\n            let ctype: string = res.data[el][\"type\"];\r\n            let gaps: Array<any> = [];\r\n            let durations: Array<any> = [];\r\n            let avgs: Array<any> = [];\r\n\r\n            // Detect chart type and set Traces\r\n            if (ctype === \"line\") {\r\n              res.data[el][\"data\"].map((item: Array<any>, idx: number) => {\r\n                gaps.push(idx + 1);\r\n                durations.push(item[0]);\r\n                avgs.push(item[1]);\r\n              });\r\n\r\n              setTraces((prevState: any) => ({\r\n                ...prevState,\r\n                [el]: {\r\n                  xTraces: gaps,\r\n                  yTraces: durations,\r\n                  avgTraces: avgs,\r\n                  type: ctype,\r\n                  title: res.data[el][\"title\"],\r\n                },\r\n              }));\r\n            } else if (ctype === \"histogram\") {\r\n              setTraces((prevState: any) => ({\r\n                ...prevState,\r\n                [el]: {\r\n                  xTraces: res.data[el][\"data\"],\r\n                  type: ctype,\r\n                  title: res.data[el][\"title\"],\r\n                },\r\n              }));\r\n            }\r\n          });\r\n        })\r\n        .catch(() => {\r\n          setTraces({});\r\n        });\r\n  }, [selected]);\r\n\r\n  return (\r\n    <>\r\n      <Grid container>\r\n        <Container component=\"main\" maxWidth=\"lg\">\r\n          <CssBaseline />\r\n          <Card className={classes.chartCard}>\r\n            <CardHeader\r\n              title={\r\n                <Typography component=\"h1\" variant=\"h5\" className=\"m-3\">\r\n                  {`CART Data Statistics Dashboard (Prototype)`}\r\n                </Typography>\r\n              }\r\n              action={\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  onClick={() => setIsOpen(true)}\r\n                >\r\n                  {\"Open Chart\"}\r\n                </Button>\r\n              }\r\n            />\r\n            <CardContent className=\"ml-3 mr-3\">\r\n              <AppBar position=\"static\" color=\"default\">\r\n                <Tabs\r\n                  value={tab}\r\n                  onChange={(e, val) => setTab(val)}\r\n                  indicatorColor=\"primary\"\r\n                  textColor=\"primary\"\r\n                  variant=\"fullWidth\"\r\n                  aria-label=\"full width tabs example\"\r\n                >\r\n                  <Tab label=\"Data Statistics Dashboard\" {...a11yProps(0)} />\r\n                  <Tab label=\"Heat Map\" {...a11yProps(1)} />\r\n                </Tabs>\r\n              </AppBar>\r\n              <SwipeableViews\r\n                axis={theme.direction === \"rtl\" ? \"x-reverse\" : \"x\"}\r\n                index={tab}\r\n                onChangeIndex={(index: any) => setTab(index)}\r\n              >\r\n                <TabPanel value={tab} index={0}>\r\n                  <Grid\r\n                    container\r\n                    spacing={3}\r\n                    justify=\"center\"\r\n                    alignItems=\"center\"\r\n                  >\r\n                    <Grid item md={4}>\r\n                      <Select\r\n                        name=\"\"\r\n                        value={selected}\r\n                        onChange={(e: any) => setSelected(e.target.value)}\r\n                        className={classes.searchSelect}\r\n                        style={selected === \"none\" ? { color: grey[500] } : {}}\r\n                        fullWidth\r\n                      >\r\n                        <MenuItem\r\n                          value=\"none\"\r\n                          style={{ opacity: 0.87 }}\r\n                          disabled\r\n                        >\r\n                          {\"Select Data Set…\"}\r\n                        </MenuItem>\r\n                        {INIT_MENUS.map((item) => (\r\n                          <MenuItem value={item.id} key={item.id}>\r\n                            {item.name}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </Select>\r\n                    </Grid>\r\n                    <Grid item md={8}></Grid>\r\n                    {Object.keys(traces).map((item) => (\r\n                      <Grid item md={6} key={item}>\r\n                        <Grid container spacing={3}>\r\n                          {traces[item].type === \"line\" && (\r\n                            <Grid item md={12}>\r\n                              <LineChartSection\r\n                                source={traces[item]}\r\n                                dataType={`coverage`}\r\n                              />\r\n                            </Grid>\r\n                          )}\r\n                          {traces[item].type === \"histogram\" && (\r\n                            <>\r\n                              <Grid item md={12}>\r\n                                <HistogramChartSection {...traces[item]} />\r\n                              </Grid>\r\n                              <Grid item md={12}>\r\n                                <BoxChartSection {...traces[item]} />\r\n                              </Grid>\r\n                            </>\r\n                          )}\r\n                        </Grid>\r\n                      </Grid>\r\n                    ))}\r\n                  </Grid>\r\n                </TabPanel>\r\n                <TabPanel value={tab} index={1}>\r\n                  <Grid container justify=\"center\" alignItems=\"center\">\r\n                    <Grid item md={12}>\r\n                      <TerrestrialHeatMap />\r\n                    </Grid>\r\n                  </Grid>\r\n                </TabPanel>\r\n              </SwipeableViews>\r\n            </CardContent>\r\n          </Card>\r\n        </Container>\r\n      </Grid>\r\n      <CartPanel isOpen={isOpen} onClose={() => setIsOpen(false)} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ChartPanel;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\n\r\nconst TwoViewSection: React.FC<any> = (props: any) => {\r\n  const [checked, setChecked] = useState(props.checked);\r\n  const [config, setConfig] = useState([]);\r\n  const plot_rows = props.plot_rows;\r\n  const surface_rows = props.surface_rows;\r\n\r\n  useEffect(() => {\r\n    setChecked(props.checked);\r\n  }, [props.checked]);\r\n\r\n  const unpack = (rows: Array<any>, key: any) =>\r\n    rows.map((row: any) => row[key]);\r\n  \r\n  useEffect(() => {\r\n    let configData: any = [];\r\n    const inclination = parseInt(props.inc);\r\n    const new_plot_rows = plot_rows.filter(\r\n      (row: any) => row.inclination === inclination\r\n    );\r\n    const new_surface_rows = surface_rows.filter(\r\n      (row: any) => row.inclination === inclination\r\n    );\r\n    if (checked.show_surface === true && checked.show_scatter === true) {\r\n      configData = [\r\n        {\r\n          x: unpack(new_plot_rows, \"altitude\"),\r\n          y: unpack(new_plot_rows, \"value\"),\r\n          name: \"Model data\",\r\n          mode: \"markers\",\r\n          type: \"scatter\",\r\n          color: \"rgb(23, 190, 207)\",\r\n        },\r\n        {\r\n          x: unpack(new_surface_rows, \"altitude\"),\r\n          y: unpack(new_surface_rows, \"value\"),\r\n          name: \"Model curve\",\r\n          mode: \"lines\",\r\n          line: {\r\n            color: \"rgb(252, 154, 7)\",\r\n          },\r\n        },\r\n        {\r\n          x: [props.dot.x],\r\n          y: [props.dot.y],\r\n          name: \"User\",\r\n          mode: \"markers\",\r\n          type: \"scatter\",\r\n          marker: {\r\n            color: \"red\",\r\n            size: 10,\r\n          },\r\n        },\r\n      ];\r\n    } else if (\r\n      checked.show_surface === false &&\r\n      checked.show_scatter === true\r\n    ) {\r\n      configData = [\r\n        {\r\n          x: unpack(new_plot_rows, \"altitude\"),\r\n          y: unpack(new_plot_rows, \"value\"),\r\n          name: \"Model data\",\r\n          mode: \"markers\",\r\n          type: \"scatter\",\r\n          color: \"rgb(23, 190, 207)\",\r\n        },\r\n        {\r\n          x: [],\r\n          y: [],\r\n          mode: \"markers\",\r\n          type: \"scatter\",\r\n        },\r\n        {\r\n          x: [props.dot.x],\r\n          y: [props.dot.y],\r\n          name: \"User\",\r\n          mode: \"markers\",\r\n          type: \"scatter\",\r\n          marker: {\r\n            color: \"red\",\r\n            size: 10,\r\n          },\r\n        },\r\n      ];\r\n    } else if (\r\n      checked.show_surface === true &&\r\n      checked.show_scatter === false\r\n    ) {\r\n      configData = [\r\n        {\r\n          x: unpack(new_surface_rows, \"altitude\"),\r\n          y: unpack(new_surface_rows, \"value\"),\r\n          name: \"Model curve\",\r\n          mode: \"lines\",\r\n          line: {\r\n            color: \"rgb(252, 154, 7)\",\r\n          },\r\n        },\r\n        {\r\n          x: [],\r\n          y: [],\r\n          mode: \"markers\",\r\n          type: \"scatter\",\r\n        },\r\n        {\r\n          x: [props.dot.x],\r\n          y: [props.dot.y],\r\n          name: \"User\",\r\n          mode: \"markers\",\r\n          type: \"scatter\",\r\n          marker: {\r\n            color: \"red\",\r\n            size: 10,\r\n          },\r\n        },\r\n      ];\r\n    } else if (\r\n      checked.show_surface === false &&\r\n      checked.show_scatter === false\r\n    ) {\r\n      configData = [\r\n        {\r\n          x: [],\r\n          y: [],\r\n          mode: \"lines\",\r\n        },\r\n        {\r\n          x: [],\r\n          y: [],\r\n          mode: \"markers\",\r\n          type: \"scatter\",\r\n        },\r\n        {\r\n          x: [props.dot.x],\r\n          y: [props.dot.y],\r\n          name: \"User\",\r\n          mode: \"markers\",\r\n          type: \"scatter\",\r\n          marker: {\r\n            color: \"red\",\r\n            size: 10,\r\n          },\r\n        },\r\n      ];\r\n    }\r\n\r\n    setConfig(configData);\r\n  }, [checked, plot_rows, surface_rows, props.inc]);\r\n\r\n  return (\r\n    <Plot\r\n      data={config}\r\n      layout={{\r\n        autosize: true,\r\n        showlegend: false,\r\n        hovermode: \"closest\",\r\n        width: props.isChart\r\n          ? parseFloat(props.size.width.replace(\"px\", \"\")) * 0.55\r\n          : parseFloat(props.size.width.replace(\"px\", \"\")) * 0.4,\r\n        height: props.isChart\r\n          ? parseFloat(props.size.height.replace(\"px\", \"\")) * 0.55\r\n          : parseFloat(props.size.height.replace(\"px\", \"\")) * 0.3,\r\n        margin: {\r\n          l: 60,\r\n          r: 15,\r\n          b: 35,\r\n          t: 15,\r\n        },\r\n        xaxis: {\r\n          title: `Altitude (km), Inclination=${props.inc} deg`,\r\n          type: \"linear\",\r\n          zeroline: false,\r\n        },\r\n        yaxis: {\r\n          title: props.yAxisLabel,\r\n          type: \"linear\",\r\n          zeroline: false,\r\n        },\r\n      }}\r\n      onHover={(e: any) => (e.event.target.style.cursor = \"pointer\")}\r\n      onUnhover={(e: any) => (e.event.target.style.cursor = \"crosshair\")}\r\n      onClick={(e) => props.onClick(e)}\r\n      onDoubleClick={() => props.onClick()}\r\n    />\r\n  );\r\n};\r\n\r\nexport default TwoViewSection;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\n\r\nconst ThreeViewSection: React.FC<any> = (props: any) => {\r\n  const [checked, setChecked] = useState(props.checked);\r\n  const [reset, setReset] = useState(false);\r\n  const [config, setConfig] = useState([]);\r\n  const plot_rows = props.plot_rows;\r\n  const surface_rows = props.surface_rows;\r\n\r\n  useEffect(() => {\r\n    setReset(!reset);\r\n  }, [props.reset]);\r\n\r\n  useEffect(() => {\r\n    setChecked(props.checked);\r\n  }, [props.checked]);\r\n\r\n  const unpack = (rows: Array<any>, key: any) => {\r\n    return rows.map(function (row) {\r\n      return row[key];\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    let configData: any = [];\r\n    if (checked.show_surface === true && checked.show_scatter === true) {\r\n      configData = [\r\n        {\r\n          x: unpack(plot_rows, \"altitude\"),\r\n          y: unpack(plot_rows, \"inclination\"),\r\n          z: unpack(plot_rows, \"value\"),\r\n          name: \"Model data\",\r\n          mode: \"markers\",\r\n          type: \"scatter3d\",\r\n          opacity: 1,\r\n          marker: {\r\n            color: \"rgb(23, 190, 207)\",\r\n            size: 2,\r\n          },\r\n        },\r\n        {\r\n          x: unpack(surface_rows, \"altitude\"),\r\n          y: unpack(surface_rows, \"inclination\"),\r\n          z: unpack(surface_rows, \"value\"),\r\n          name: \"Model surface\",\r\n          opacity: 0.3,\r\n          type: \"mesh3d\",\r\n          color: \"rgb(252, 154, 7)\",\r\n        },\r\n        {\r\n          x: [props.alt],\r\n          y: [props.inc],\r\n          z: [props.value],\r\n          name: \"User\",\r\n          mode: \"markers\",\r\n          type: \"scatter3d\",\r\n          opacity: 1,\r\n          marker: {\r\n            color: \"red\",\r\n            size: 5,\r\n          },\r\n        },\r\n      ];\r\n    } else if (\r\n      checked.show_surface === false &&\r\n      checked.show_scatter === true\r\n    ) {\r\n      configData = [\r\n        {\r\n          x: unpack(plot_rows, \"altitude\"),\r\n          y: unpack(plot_rows, \"inclination\"),\r\n          z: unpack(plot_rows, \"value\"),\r\n          name: \"Model data\",\r\n          mode: \"markers\",\r\n          type: \"scatter3d\",\r\n          opacity: 1,\r\n          marker: {\r\n            color: \"rgb(23, 190, 207)\",\r\n            size: 2,\r\n          },\r\n        },\r\n        {\r\n          x: [props.alt],\r\n          y: [props.inc],\r\n          z: [props.value],\r\n          name: \"User\",\r\n          mode: \"markers\",\r\n          type: \"scatter3d\",\r\n          opacity: 1,\r\n          marker: {\r\n            color: \"red\",\r\n            size: 5,\r\n          },\r\n        },\r\n      ];\r\n    } else if (\r\n      checked.show_surface === true &&\r\n      checked.show_scatter === false\r\n    ) {\r\n      configData = [\r\n        {\r\n          x: unpack(surface_rows, \"altitude\"),\r\n          y: unpack(surface_rows, \"inclination\"),\r\n          z: unpack(surface_rows, \"value\"),\r\n          name: \"Model surface\",\r\n          opacity: 0.3,\r\n          type: \"mesh3d\",\r\n          color: \"rgb(252, 154, 7)\",\r\n        },\r\n        {\r\n          x: [props.alt],\r\n          y: [props.inc],\r\n          z: [props.value],\r\n          name: \"User\",\r\n          mode: \"markers\",\r\n          type: \"scatter3d\",\r\n          opacity: 1,\r\n          marker: {\r\n            color: \"red\",\r\n            size: 5,\r\n          },\r\n        },\r\n      ];\r\n    } else if (\r\n      checked.show_surface === false &&\r\n      checked.show_scatter === false\r\n    ) {\r\n      configData = [\r\n        {\r\n          x: [],\r\n          y: [],\r\n          z: [],\r\n          type: \"mesh3d\",\r\n        },\r\n        {\r\n          x: [],\r\n          y: [],\r\n          z: [],\r\n          mode: \"markers\",\r\n          type: \"scatter3d\",\r\n        },\r\n        {\r\n          x: [parseFloat(props.alt)],\r\n          y: [parseFloat(props.inc)],\r\n          z: [parseFloat(props.value)],\r\n          name: \"User\",\r\n          mode: \"markers\",\r\n          type: \"scatter3d\",\r\n          opacity: 1,\r\n          marker: {\r\n            color: \"red\",\r\n            size: 5,\r\n          },\r\n        },\r\n      ];\r\n    }\r\n\r\n    setConfig(configData);\r\n  }, [checked, plot_rows, surface_rows, reset]);\r\n\r\n  return (\r\n    <Plot\r\n      data={config}\r\n      layout={{\r\n        autosize: true,\r\n        width: props.isChart\r\n          ? Number(props.size.width.replace(\"px\", \"\")) * 0.55\r\n          : Number(props.size.width.replace(\"px\", \"\")) * 0.4,\r\n        height: props.isChart\r\n          ? Number(props.size.height.replace(\"px\", \"\")) * 0.4\r\n          : Number(props.size.height.replace(\"px\", \"\")) * 0.3,\r\n        margin: {\r\n          l: 0,\r\n          r: 0,\r\n          b: 0,\r\n          t: 0,\r\n        },\r\n        scene: {\r\n          aspectratio: {\r\n            x: 0.6,\r\n            y: 0.6,\r\n            z: 0.6,\r\n          },\r\n          camera: {\r\n            center: {\r\n              x: 0,\r\n              y: 0,\r\n              z: 0,\r\n            },\r\n            eye: {\r\n              x: 0.9,\r\n              y: 0.9,\r\n              z: 0.9,\r\n            },\r\n            up: {\r\n              x: 0,\r\n              y: 0,\r\n              z: 1,\r\n            },\r\n          },\r\n          xaxis: {\r\n            title: \"Altitude (km)\",\r\n            type: \"linear\",\r\n            range: [Math.max(...unpack(surface_rows, \"altitude\")), 0],\r\n            zeroline: false,\r\n          },\r\n          yaxis: {\r\n            title: \"Inclination (deg)\",\r\n            type: \"linear\",\r\n            range: [90, 0],\r\n            zeroline: false,\r\n          },\r\n          zaxis: {\r\n            title: props.zAxisLabel,\r\n            type: \"linear\",\r\n            range: [\r\n              Math.min(...unpack(surface_rows, \"value\")),\r\n              Math.max(...unpack(surface_rows, \"value\")),\r\n            ],\r\n            zeroline: false,\r\n          },\r\n        },\r\n        showlegend: false,\r\n      }}\r\n      onClick={(e) => props.onClick(e)}\r\n      onDoubleClick={() => props.onClick()}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ThreeViewSection;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { CSVLink } from \"react-csv\";\r\nimport { Grid, IconButton, Typography } from \"@material-ui/core\";\r\nimport LaunchIcon from \"@material-ui/icons/Launch\";\r\nimport DehazeIcon from \"@material-ui/icons/Dehaze\";\r\nimport Selection from \"../Select\";\r\n\r\ninterface IDataSource {\r\n  xTrace: number;\r\n  yTrace?: number;\r\n  avgTrace?: number;\r\n}\r\n\r\nconst DashAddon: React.FC<any> = (props: any) => {\r\n  const [dataSource, setDataSource] = useState<IDataSource[]>([]);\r\n  const [title, setTitle] = useState<string>(\"\");\r\n\r\n  useEffect(() => {\r\n    if (props.source) {\r\n      let data: Array<any> = [];\r\n      let csvTitle: string = props.source.title.split(\" \").join(\"-\");\r\n\r\n      if (props.source.type === \"line\") {\r\n        data = props.source.xTraces.map((item: number, idx: number) => {\r\n          return {\r\n            xTrace: item,\r\n            yTrace: props.source.yTraces[idx],\r\n            avgTrace: props.source.avgTraces[idx],\r\n          };\r\n        });\r\n      } else {\r\n        data = props.source.xTraces.map((item: number) => {\r\n          return {\r\n            xTrace: item,\r\n          };\r\n        });\r\n      }\r\n      setTitle(csvTitle);\r\n      setDataSource(data);\r\n    }\r\n  }, [props.source]);\r\n\r\n  return (\r\n    <Grid item md={12}>\r\n      <Grid\r\n        container\r\n        justify=\"flex-start\"\r\n        alignItems=\"center\"\r\n        style={{ position: \"relative\" }}\r\n      >\r\n        <Grid item md={1}>\r\n          <IconButton\r\n            id={props.index}\r\n            onClick={(e) => {\r\n              props.onAnchorEl(e.currentTarget);\r\n              props.onIndex(e.currentTarget.id);\r\n            }}\r\n            style={{ padding: 0 }}\r\n          >\r\n            <DehazeIcon />\r\n          </IconButton>\r\n          <Selection\r\n            selected={props.selected}\r\n            anchorEl={props.anchorEl}\r\n            onAnchorEl={(value: any) => props.onAnchorEl(value)}\r\n            onSelected={(value: any) => props.onSelected(value)}\r\n          />\r\n        </Grid>\r\n        <Grid item md={10} />\r\n        <Grid item md={1}>\r\n          <IconButton\r\n            style={{\r\n              padding: 0,\r\n              position: \"absolute\",\r\n              right: 0,\r\n              top: 10,\r\n            }}\r\n            onClick={() => props.onSubChart(props.index)}\r\n          >\r\n            <LaunchIcon />\r\n          </IconButton>\r\n          <IconButton\r\n            style={{\r\n              padding: 0,\r\n              position: \"absolute\",\r\n              right: 50,\r\n              top: 12,\r\n            }}\r\n          >\r\n            {props.source && (\r\n              <CSVLink\r\n                data={dataSource}\r\n                filename={`${title}-${Date.now()}.csv`}\r\n                className=\"btn btn-primary\"\r\n                target=\"_blank\"\r\n              >\r\n                <Typography component=\"p\" variant=\"body2\">\r\n                  {\"csv\"}\r\n                </Typography>\r\n              </CSVLink>\r\n            )}\r\n            {!props.source && (\r\n              <Typography component=\"p\" variant=\"body2\">\r\n                {\"csv\"}\r\n              </Typography>\r\n            )}\r\n          </IconButton>\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default DashAddon;\r\n","import React from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\n\r\nconst LineChartSection: React.FC<any> = (props: any) => {\r\n  return (\r\n    <Plot\r\n      data={[\r\n        {\r\n          x: props.source.xTraces,\r\n          y: props.source.yTraces,\r\n          name: \"Gap Event Duration\",\r\n          type: \"scatter\",\r\n          mode: \"lines+markers\",\r\n          marker: { color: \"red\" },\r\n        },\r\n        {\r\n          x: props.source.xTraces,\r\n          y: props.source.avgTraces,\r\n          name: \"Running Average\",\r\n          type: \"scatter\",\r\n          marker: { color: \"blue\" },\r\n        },\r\n      ]}\r\n      layout={{\r\n        title: {\r\n          text: `<b>${props.source.title}</b>`,\r\n          font: {\r\n            family: \"Roboto\",\r\n            size: 15,\r\n          },\r\n        },\r\n        width: props.isSubChart\r\n          ? Number(props.size.width.replace(\"px\", \"\")) * 0.52\r\n          : Number(props.size.width.replace(\"px\", \"\")) * 0.38,\r\n        height: props.isSubChart\r\n          ? Number(props.size.width.replace(\"px\", \"\")) * 0.33\r\n          : Number(props.size.height.replace(\"px\", \"\")) * 0.3,\r\n        showlegend: true,\r\n        legend: {\r\n          orientation: \"h\",\r\n          xanchor: \"center\",\r\n          font: {\r\n            family: \"sans-serif\",\r\n            size: 12,\r\n            color: \"#000\",\r\n          },\r\n        },\r\n        margin: {\r\n          l: 60,\r\n          b: 0,\r\n          r: 30,\r\n          t: 30,\r\n          pad: 5,\r\n        },\r\n        xaxis: {\r\n          title:\r\n            props.dataType === \"coverage\"\r\n              ? \"Coverage Event Number\"\r\n              : \"Gap Event Number\",\r\n          titlefont: {\r\n            size: 12,\r\n            color: \"#212529\",\r\n          },\r\n          showgrid: true,\r\n          zerolinecolor: \"#969696\",\r\n          zerolinewidth: 1,\r\n        },\r\n        yaxis: {\r\n          title:\r\n            props.dataType === \"coverage\"\r\n              ? \"Coverage Duration (Sec.)\"\r\n              : \"Gap Duration (Sec.)\",\r\n          titlefont: {\r\n            size: 12,\r\n            color: \"#212529\",\r\n          },\r\n          showgrid: true,\r\n          zerolinecolor: \"#969696\",\r\n          zerolinewidth: 1,\r\n        },\r\n      }}\r\n      config={{ displayModeBar: false }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default LineChartSection;\r\n","import React from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\n\r\nconst HistogramChartSection: React.FC<any> = (props: any) => {\r\n  return (\r\n    <Plot\r\n      data={[\r\n        {\r\n          x: props.source.xTraces,\r\n          name: \"Duration\",\r\n          type: \"histogram\",\r\n        },\r\n      ]}\r\n      layout={{\r\n        title: {\r\n          text: `<b>${props.source.title.split(\"_\").join(\" \")}</b>`,\r\n          font: {\r\n            family: \"Roboto\",\r\n            size: 15,\r\n          },\r\n        },\r\n        width: props.isSubChart\r\n          ? Number(props.size.width.replace(\"px\", \"\")) * 0.56\r\n          : Number(props.size.width.replace(\"px\", \"\")) * 0.4,\r\n        height: props.isSubChart\r\n          ? Number(props.size.width.replace(\"px\", \"\")) * 0.33\r\n          : Number(props.size.height.replace(\"px\", \"\")) * 0.3,\r\n        showlegend: true,\r\n        legend: {\r\n          orientation: \"h\",\r\n          xanchor: \"center\",\r\n          font: {\r\n            family: \"sans-serif\",\r\n            size: 12,\r\n            color: \"#000\",\r\n          },\r\n        },\r\n        margin: {\r\n          l: 60,\r\n          b: 0,\r\n          r: 30,\r\n          t: 30,\r\n          pad: 5,\r\n        },\r\n        xaxis: {\r\n          title: \"Duration\",\r\n          titlefont: {\r\n            size: 12,\r\n            color: \"#212529\",\r\n          },\r\n          showgrid: true,\r\n          zerolinecolor: \"#969696\",\r\n          zerolinewidth: 1,\r\n        },\r\n        yaxis: {\r\n          title: \"Occurances\",\r\n          titlefont: {\r\n            size: 12,\r\n            color: \"#212529\",\r\n          },\r\n          showgrid: true,\r\n          zerolinecolor: \"#969696\",\r\n          zerolinewidth: 1,\r\n        },\r\n      }}\r\n      config={{ displayModeBar: false }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default HistogramChartSection;\r\n","import React from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\n\r\nconst BoxChartSection: React.FC<any> = (props: any) => {\r\n  return (\r\n    <Plot\r\n      data={[\r\n        {\r\n          y: props.source.xTraces,\r\n          boxpoints: \"all\",\r\n          name: \"\",\r\n          type: \"box\",\r\n        },\r\n      ]}\r\n      layout={{\r\n        title: {\r\n          text: `<b>${props.source.title.split(\" \")[0]} Statistics</b>`,\r\n          font: {\r\n            family: \"Roboto\",\r\n            size: 15,\r\n          },\r\n        },\r\n        width: props.isSubChart\r\n          ? Number(props.size.width.replace(\"px\", \"\")) * 0.56\r\n          : Number(props.size.width.replace(\"px\", \"\")) * 0.38,\r\n        height: props.isSubChart\r\n          ? Number(props.size.width.replace(\"px\", \"\")) * 0.33\r\n          : Number(props.size.height.replace(\"px\", \"\")) * 0.3,\r\n        margin: {\r\n          l: 60,\r\n          b: 0,\r\n          r: 30,\r\n          t: 30,\r\n          pad: 5,\r\n        },\r\n        yaxis: {\r\n          title: \"Duration\",\r\n          titlefont: {\r\n            size: 12,\r\n            color: \"#212529\",\r\n          },\r\n          showgrid: true,\r\n          zerolinecolor: \"#969696\",\r\n          zerolinewidth: 1,\r\n        },\r\n      }}\r\n      config={{ displayModeBar: false }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default BoxChartSection;\r\n","import React from \"react\";\r\nimport {\r\n  Grid,\r\n  Typography,\r\n  Table,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  TableBody,\r\n} from \"@material-ui/core\";\r\nimport LineChartSection from \"../line-chart-section\";\r\nimport HistogramChartSection from \"../histogram-chart-section\";\r\nimport BoxChartSection from \"../box-chart-section\";\r\nimport { useWindowSize } from \"../../../../../utils/util\";\r\ninterface TRowAttribute {\r\n  name: string;\r\n  value: string;\r\n}\r\n\r\nconst createData: (name: string, value: string) => TRowAttribute = (\r\n  name: string,\r\n  value: string\r\n) => {\r\n  return { name, value };\r\n};\r\n\r\nconst rows = [\r\n  createData(\"Average (sec)\", \"xx\"),\r\n  createData(\"Time-Averaged Gap\", \"xx\"),\r\n  createData(\"Median (sec)\", \"xx\"),\r\n  createData(\"Maximum (minutes)\", \"xx\"),\r\n  createData(\"Minimum (sec)\", \"xx\"),\r\n  createData(\"Average # Gaps Per Orbit\", \"xx\"),\r\n  createData(\"Average # Gaps Per Day\", \"xx\"),\r\n];\r\n\r\nconst SelectedChartSection: React.FC<any> = (props: any) => {\r\n  const size = useWindowSize();\r\n\r\n  return (\r\n    <>\r\n      {props.id === 0 && (\r\n        <Grid\r\n          container\r\n          justify=\"center\"\r\n          alignItems=\"center\"\r\n          style={{\r\n            height: size.width\r\n              ? props.isSubChart\r\n                ? \"100%\"\r\n                : size.width * 0.11\r\n              : \"100%\",\r\n            overflow: \"auto\",\r\n          }}\r\n        >\r\n          <Grid item md={10}>\r\n            <Typography variant=\"h6\" style={{ textAlign: \"center\" }}>\r\n              {`Key Metrics`}\r\n            </Typography>\r\n            <Table aria-label=\"simple table\" size=\"small\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>{`Gap Statistic`}</TableCell>\r\n                  <TableCell>{`Value`}</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {rows.map((row: any) => (\r\n                  <TableRow key={row.name}>\r\n                    <TableCell component=\"th\" scope=\"row\">\r\n                      {row.name}\r\n                    </TableCell>\r\n                    <TableCell>{row.value}</TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </Grid>\r\n        </Grid>\r\n      )}\r\n      {props.id === 1 && (\r\n        <LineChartSection\r\n          source={props.data}\r\n          dataType={props.dataType}\r\n          size={props.size}\r\n          isSubChart={props.isSubChart}\r\n        />\r\n      )}\r\n      {props.id === 2 && (\r\n        <HistogramChartSection\r\n          source={props.data}\r\n          size={props.size}\r\n          isSubChart={props.isSubChart}\r\n        />\r\n      )}\r\n      {props.id === 3 && (\r\n        <BoxChartSection\r\n          source={props.data}\r\n          size={props.size}\r\n          isSubChart={props.isSubChart}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SelectedChartSection;\r\n","import React, { useState, useEffect, Props } from \"react\";\r\nimport {\r\n  Grid,\r\n  Card,\r\n  CardContent,\r\n  Dialog,\r\n  CssBaseline,\r\n  DialogTitle as MuiDialogTitle,\r\n  Typography,\r\n  IconButton,\r\n  DialogContent,\r\n  Slide,\r\n} from \"@material-ui/core\";\r\nimport { TransitionProps } from \"@material-ui/core/transitions\";\r\nimport { Close as CloseIcon } from \"@material-ui/icons\";\r\n\r\nimport DashAddon from \"../../../../components/Button/DashAddon\";\r\nimport SelectedChartSection from \"./selected-chart-section\";\r\nimport { MENU_ITEMS } from \"../../../../constants\";\r\nimport useStyles from \"../../../../utils/styles\";\r\n\r\nconst Transition = React.forwardRef(function Transition(\r\n  props: TransitionProps & { children?: React.ReactElement<any, any> },\r\n  ref: React.Ref<Function>\r\n) {\r\n  return <Slide direction=\"left\" ref={ref} {...props} />;\r\n});\r\n\r\nconst ChartsLibsSection: React.FC<any> = (props: {\r\n  dataSet: string;\r\n  size: { width: string; height: string };\r\n  traces: any;\r\n  dataType: string;\r\n}) => {\r\n  const [selected, setSelected] = useState<number[]>([1, 2, 3]);\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n  const [subChart, setSubChart] = useState<number | null>(null);\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [index, setIndex] = useState<number>(0);\r\n  const classes = useStyles();\r\n\r\n  const handleSelected = (id: any) => {\r\n    setSelected(\r\n      selected.map((item: any, idx: any) => {\r\n        if (idx === Number(index)) item = id;\r\n        return item;\r\n      })\r\n    );\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {selected.map((item: number, idx: number) => {\r\n        let dset = MENU_ITEMS[props.dataSet][item].dataset;\r\n\r\n        return (\r\n          <Grid\r\n            item\r\n            md={6}\r\n            key={item}\r\n            style={{\r\n              paddingLeft: \"2rem\",\r\n              paddingRight: idx % 2 === 0 ? \"2rem\" : \"0.8rem\",\r\n            }}\r\n          >\r\n            <Card style={{ height: `calc(${props.size.height} * 0.4)` }}>\r\n              <CardContent>\r\n                <DashAddon\r\n                  type={1}\r\n                  selected={selected}\r\n                  anchorEl={anchorEl}\r\n                  index={idx}\r\n                  source={\r\n                    props.traces[dset] &&\r\n                    Object.keys(props.traces[dset]).length > 0\r\n                      ? props.traces[dset]\r\n                      : null\r\n                  }\r\n                  onIndex={(value: any) => setIndex(value)}\r\n                  onAnchorEl={(value: any) => setAnchorEl(value)}\r\n                  onSelected={(value: any) => handleSelected(value)}\r\n                  onSubChart={(value: any) => {\r\n                    setSubChart(value);\r\n                    setIsOpen(true);\r\n                  }}\r\n                />\r\n                <Grid item md={12}>\r\n                  {props.traces[dset] &&\r\n                    Object.keys(props.traces[dset]).length > 0 && (\r\n                      <SelectedChartSection\r\n                        id={item}\r\n                        size={props.size}\r\n                        data={props.traces[dset]}\r\n                        dataType={props.dataType}\r\n                        isSubChart={false}\r\n                      />\r\n                    )}\r\n                </Grid>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n        );\r\n      })}\r\n      {selected.length % 2 === 0 && <Grid item md={6} />}\r\n      {subChart !== null && (\r\n        <Dialog\r\n          open={isOpen}\r\n          TransitionComponent={Transition}\r\n          onClose={() => setIsOpen(false)}\r\n          PaperProps={{\r\n            style: {\r\n              height: Number(props.size.width.replace(\"px\", \"\")) * 0.42,\r\n              maxWidth: Number(props.size.width.replace(\"px\", \"\")) * 0.6,\r\n              minWidth: Number(props.size.width.replace(\"px\", \"\")) * 0.6,\r\n            },\r\n          }}\r\n        >\r\n          <CssBaseline />\r\n          <MuiDialogTitle>\r\n            <Typography component=\"strong\" variant=\"h6\">\r\n              {MENU_ITEMS[props.dataSet][subChart].name}\r\n            </Typography>\r\n            <IconButton\r\n              aria-label=\"Close\"\r\n              className={classes.dialogCloseBtn}\r\n              onClick={() => setIsOpen(false)}\r\n            >\r\n              <CloseIcon />\r\n            </IconButton>\r\n          </MuiDialogTitle>\r\n          <hr />\r\n          <DialogContent>\r\n            {props.traces[\r\n              MENU_ITEMS[props.dataSet][selected[subChart]].dataset\r\n            ] &&\r\n              Object.keys(\r\n                props.traces[\r\n                  MENU_ITEMS[props.dataSet][selected[subChart]].dataset\r\n                ]\r\n              ).length > 0 && (\r\n                <SelectedChartSection\r\n                  id={selected[subChart]}\r\n                  size={props.size}\r\n                  dataType={props.dataType}\r\n                  isSubChart={true}\r\n                  data={\r\n                    props.traces[\r\n                      MENU_ITEMS[props.dataSet][selected[subChart]].dataset\r\n                    ]\r\n                  }\r\n                />\r\n              )}\r\n          </DialogContent>\r\n        </Dialog>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ChartsLibsSection;\r\n","import React from \"react\";\r\nimport {\r\n  Grid,\r\n  Select,\r\n  FormControl,\r\n  InputLabel,\r\n  MenuItem,\r\n} from \"@material-ui/core\";\r\nimport { ToggleButton, ToggleButtonGroup } from \"@material-ui/lab\";\r\nimport { grey } from \"@material-ui/core/colors\";\r\nimport useStyles from \"../../../../utils/styles\";\r\n\r\nfunction HeaderSection(props: any) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Grid item md={12}>\r\n      <Grid\r\n        container\r\n        justify=\"flex-start\"\r\n        alignItems=\"center\"\r\n        spacing={1}\r\n        style={{ backgroundColor: grey[300], minHeight: \"6vh\" }}\r\n      >\r\n        <Grid item md={2} style={{ marginLeft: 15 }}>\r\n          <ToggleButtonGroup\r\n            value={props.dataSet}\r\n            onChange={(e) => props.onClick(e)}\r\n          >\r\n            <ToggleButton\r\n              id=\"as_needed_handoff\"\r\n              name=\"coverage\"\r\n              value=\"as_needed_handoff\"\r\n              size=\"small\"\r\n            >\r\n              {`RF Coverage (%)`}\r\n            </ToggleButton>\r\n            <ToggleButton\r\n              id=\"maximum_powee_handoff\"\r\n              name=\"gap\"\r\n              value=\"maximum_powee_handoff\"\r\n              size=\"small\"\r\n            >\r\n              {`No Coverage (%)`}\r\n            </ToggleButton>\r\n          </ToggleButtonGroup>\r\n        </Grid>\r\n        <Grid item md={2}>\r\n          <FormControl\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            className={classes.formControl}\r\n            fullWidth\r\n          >\r\n            <InputLabel id=\"demo-simple-select-outlined-label\">{`System`}</InputLabel>\r\n            <Select\r\n              labelId=\"demo-simple-select-outlined-label\"\r\n              id=\"demo-simple-select-outlined\"\r\n              value={props.system}\r\n              onChange={(e) => props.onSystem(e.target.value)}\r\n              label=\"System\"\r\n            >\r\n              <MenuItem value=\"\" disabled>\r\n                <em>{`None`}</em>\r\n              </MenuItem>\r\n              {props.systems.map((item: any) => (\r\n                <MenuItem key={item.system_name} value={item.system_id}>\r\n                  {item.system_name}\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n        <Grid item md={1}>\r\n          <FormControl\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            className={classes.formControl}\r\n            fullWidth\r\n          >\r\n            <InputLabel id=\"demo-simple-select-outlined-label\">{`Version`}</InputLabel>\r\n            <Select\r\n              labelId=\"demo-simple-select-outlined-label\"\r\n              id=\"demo-simple-select-outlined\"\r\n              value={props.version}\r\n              onChange={(e) => props.onVersion(e.target.value)}\r\n              label=\"Version\"\r\n            >\r\n              <MenuItem value=\"\" disabled>\r\n                <em>{`None`}</em>\r\n              </MenuItem>\r\n              {props.versions.map((item: any) => (\r\n                <MenuItem\r\n                  key={`version_${item.versions}`}\r\n                  value={item.versions}\r\n                >\r\n                  {item.versions}\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n        <Grid item md={2}>\r\n          <FormControl\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            className={classes.formControl}\r\n            fullWidth\r\n          >\r\n            <InputLabel id=\"database-select-label\">{`DataBase`}</InputLabel>\r\n            <Select\r\n              labelId=\"database-select-label\"\r\n              id=\"database-select-outlined\"\r\n              value={props.db}\r\n              onChange={(e) => props.onDb(e.target.value)}\r\n              label=\"DataBase\"\r\n            >\r\n              <MenuItem key=\"staging_db\" value=\"staging_db\">\r\n                {`Staging Database`}\r\n              </MenuItem>\r\n              <MenuItem key=\"product_db\" value=\"product_db\">\r\n                {`Production Database`}\r\n              </MenuItem>\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n        <Grid item md={4} />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default HeaderSection;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport {\r\n  Grid,\r\n  Typography,\r\n  Card,\r\n  CardContent,\r\n  Slide,\r\n  Dialog,\r\n  DialogContent,\r\n  CssBaseline,\r\n  DialogTitle as MuiDialogTitle,\r\n  IconButton,\r\n} from \"@material-ui/core\";\r\nimport { TransitionProps } from \"@material-ui/core/transitions\";\r\nimport { Close as CloseIcon } from \"@material-ui/icons\";\r\n\r\nimport TwoViewSection from \"./two-view-section\";\r\nimport ThreeViewSection from \"./three-view-section\";\r\nimport ChartsLibsSection from \"./charts-libs-section\";\r\nimport HeaderSection from \"./header-section\";\r\nimport OptionAddon from \"../../../components/Button/OptionAddon\";\r\nimport {\r\n  getItems,\r\n  getSystems,\r\n  getSystemVersion,\r\n  getFileId,\r\n  changeDB,\r\n} from \"../../../API\";\r\nimport useStyles from \"../../../utils/styles\";\r\n\r\ninterface IDot {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nconst INIT_FILE_ID = [{ id: 1620 }, { id: 1729 }];\r\n\r\nconst INIT_CHECK_STATUS = {\r\n  show_surface: true,\r\n  show_scatter: true,\r\n};\r\n\r\nconst viewStyle = {\r\n  paddingLeft: \"2rem\",\r\n  paddingRight: \"0.8rem\",\r\n};\r\n\r\nconst Transition = React.forwardRef(function Transition(\r\n  props: TransitionProps & { children?: React.ReactElement<any, any> },\r\n  ref: React.Ref<Function>\r\n) {\r\n  return <Slide direction=\"left\" ref={ref} {...props} />;\r\n});\r\n\r\nconst AnalyzeRegressionSection = (props: any) => {\r\n  const [viewMethod, setViewMethod] = useState<string>(\"2d_view\");\r\n  const [dataSet, setDataSet] = useState<string>(\"as_needed_handoff\");\r\n  const [systems, setSystems] = useState<string[]>([]);\r\n  const [versions, setVersions] = useState<number[]>([]);\r\n  const [db, setDb] = useState<string>(\"staging_db\");\r\n  const [dot, setDot] = useState<IDot>({ x: props.alt, y: props.value });\r\n  const [fileId, setFileId] = useState(INIT_FILE_ID);\r\n  const [checked, setChecked] = useState(INIT_CHECK_STATUS);\r\n  const [traces, setTraces] = useState<any>({});\r\n  const [reset, setReset] = useState(false);\r\n  const [count, setCount] = useState({ width: \"0px\", height: \"0px\" });\r\n  const [isChart, setIsChart] = useState(false);\r\n  const classes = useStyles();\r\n  const chartEl = useRef<any>(null);\r\n  const plot_rows = props.data.plot_value;\r\n  const surface_rows: number[] = [];\r\n  const zAxisLabel = props.data.label;\r\n\r\n  useEffect(() => {\r\n    if (fileId.length > 0)\r\n      getItems({\r\n        dataType: props.dataType,\r\n        fileId: fileId,\r\n        version: props.version,\r\n      })\r\n        .then((res) => {\r\n          Object.keys(res.data).map((el) => {\r\n            let ctype: String = res.data[el][\"type\"];\r\n            let gaps: Array<any> = [];\r\n            let durations: Array<any> = [];\r\n            let avgs: Array<any> = [];\r\n\r\n            // Detect chart type and set Traces\r\n            if (ctype === \"line\") {\r\n              res.data[el][\"data\"].map((item: Array<any>, idx: number) => {\r\n                gaps.push(idx + 1);\r\n                durations.push(item[0]);\r\n                avgs.push(item[1]);\r\n              });\r\n\r\n              setTraces((prevState: any) => ({\r\n                ...prevState,\r\n                [el]: {\r\n                  xTraces: gaps,\r\n                  yTraces: durations,\r\n                  avgTraces: avgs,\r\n                  type: ctype,\r\n                  title: res.data[el][\"title\"],\r\n                },\r\n              }));\r\n            } else if (ctype === \"histogram\") {\r\n              setTraces((prevState: any) => ({\r\n                ...prevState,\r\n                [el]: {\r\n                  xTraces: res.data[el][\"data\"],\r\n                  type: ctype,\r\n                  title: res.data[el][\"title\"],\r\n                },\r\n              }));\r\n            }\r\n          });\r\n        })\r\n        .catch(() => {\r\n          setTraces({});\r\n        });\r\n  }, [props.dataType, props.version, fileId]);\r\n\r\n  useEffect(() => {\r\n    getSystems()\r\n      .then((res: any) => setSystems(res.data))\r\n      .catch((err: any) => setSystems([]));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (props.inclination !== \"\") {\r\n      const params = {\r\n        user_altitude: dot.x,\r\n        user_inclination: props.inclination,\r\n        system: props.system,\r\n        version: props.version,\r\n      };\r\n\r\n      getFileId(params)\r\n        .then((res: any) => setFileId(res.data))\r\n        .catch((err: any) => setFileId([]));\r\n    }\r\n  }, [props.inclination]);\r\n\r\n  useEffect(() => {\r\n    changeDB({ database: db }).catch((err) => setDb(\"staging_db\"));\r\n  }, [db]);\r\n\r\n  useEffect(() => {\r\n    if (props.system !== \"\") {\r\n      getSystemVersion({ system: props.system })\r\n        .then((res: any) => setVersions(res.data))\r\n        .catch((err: any) => setVersions([]));\r\n    }\r\n  }, [props.system]);\r\n\r\n  useEffect(() => {\r\n    setDot({\r\n      x: props.data.plot_value[0].altitude,\r\n      y: props.data.plot_value[0].value,\r\n    });\r\n  }, [props.data]);\r\n\r\n  useEffect(() => {\r\n    if (chartEl) {\r\n      let size = window.getComputedStyle(chartEl.current);\r\n      setCount({ width: size.width, height: size.height });\r\n    }\r\n  }, [chartEl, traces]);\r\n\r\n  const handleCheck = (event: any) => {\r\n    const { name, checked } = event.currentTarget;\r\n    setChecked((prevState) => ({ ...prevState, [name]: checked }));\r\n  };\r\n\r\n  const handleDataSetClick = (event: any) => {\r\n    event.preventDefault();\r\n    const { id, name } = event.currentTarget;\r\n\r\n    setDataSet(id);\r\n    props.onDataType(name);\r\n  };\r\n\r\n  const handleClick = (event: any) => {\r\n    if (event) {\r\n      const params = {\r\n        user_altitude: event.points[0].x,\r\n        user_inclination: props.inc,\r\n        system: props.system,\r\n        version: props.version,\r\n      };\r\n\r\n      setDot({ x: event.points[0].x, y: event.points[0].y });\r\n      getFileId(params)\r\n        .then((res: any) => setFileId(res.data))\r\n        .catch((err: any) => setFileId([]));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <CardContent ref={chartEl} className={classes.cartCardContent}>\r\n        <Grid container justify=\"center\" alignItems=\"center\" spacing={2}>\r\n          <HeaderSection\r\n            db={db}\r\n            system={props.system}\r\n            systems={systems}\r\n            version={props.version}\r\n            versions={versions}\r\n            dataSet={dataSet}\r\n            onDb={(value: string) => setDb(value)}\r\n            onSystem={(value: any) => props.onSystem(value)}\r\n            onVersion={(value: any) => props.onVersion(value)}\r\n            onClick={handleDataSetClick}\r\n          />\r\n          <Grid item md={6} style={viewStyle}>\r\n            <Card style={{ height: `calc(${count.height} * 0.4)` }}>\r\n              <CardContent>\r\n                <Grid container justify=\"center\" spacing={2}>\r\n                  <Grid\r\n                    item\r\n                    md={12}\r\n                    style={{ textAlign: \"center\", position: \"relative\" }}\r\n                  >\r\n                    <Typography\r\n                      style={{\r\n                        fontSize: 15,\r\n                        fontWeight: \"bold\",\r\n                      }}\r\n                    >\r\n                      {dataSet === \"as_needed_handoff\"\r\n                        ? `RF Coverage (%)`\r\n                        : `No Coverage (%)`}\r\n                      {` vs. User Inclination`}\r\n                    </Typography>\r\n                    <OptionAddon\r\n                      source={props.data}\r\n                      dataSource={props.source}\r\n                      checked={checked}\r\n                      viewMethod={viewMethod}\r\n                      inc={props.inclination}\r\n                      incs={props.incs}\r\n                      isDash={true}\r\n                      onChecked={handleCheck}\r\n                      onChart={() => setIsChart(true)}\r\n                      resetPlot={() => setReset(!reset)}\r\n                      onInc={(value: any) => props.onInc(value)}\r\n                      onViewMethod={(e: any) =>\r\n                        setViewMethod(e.currentTarget.name)\r\n                      }\r\n                    />\r\n                  </Grid>\r\n                  {viewMethod === \"3d_view\" ? (\r\n                    <Grid item md={12}>\r\n                      <ThreeViewSection\r\n                        data={props.source}\r\n                        equation={props.equation}\r\n                        maxAltitude={props.maxAltitude}\r\n                        alt={props.alt}\r\n                        inc={\r\n                          props.inclination !== \"\"\r\n                            ? props.inclination\r\n                            : props.inc\r\n                        }\r\n                        value={props.value}\r\n                        reset={reset}\r\n                        isLegend={false}\r\n                        isSub={true}\r\n                        plot_rows={props.source.plot_value}\r\n                        surface_rows={surface_rows}\r\n                        zAxisLabel={zAxisLabel}\r\n                        checked={checked}\r\n                        size={count}\r\n                        isChart={false}\r\n                        onClick={handleClick}\r\n                      />\r\n                    </Grid>\r\n                  ) : (\r\n                    <Grid item md={12}>\r\n                      <TwoViewSection\r\n                        data={props.data}\r\n                        equation={props.equation}\r\n                        maxAltitude={props.maxAltitude}\r\n                        alt={props.alt}\r\n                        inc={\r\n                          props.inclination !== \"\"\r\n                            ? props.inclination\r\n                            : props.inc\r\n                        }\r\n                        value={props.value}\r\n                        isLegend={false}\r\n                        isSub={true}\r\n                        plot_rows={plot_rows}\r\n                        surface_rows={surface_rows}\r\n                        yAxisLabel={zAxisLabel}\r\n                        dot={dot}\r\n                        size={count}\r\n                        checked={checked}\r\n                        isChart={false}\r\n                        onClick={handleClick}\r\n                      />\r\n                    </Grid>\r\n                  )}\r\n                </Grid>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          {fileId.length === 0 && <Grid item md={6} />}\r\n          {Object.keys(traces).length > 0 && (\r\n            <ChartsLibsSection\r\n              traces={traces}\r\n              dataSet={dataSet}\r\n              dataType={props.dataType}\r\n              size={count}\r\n            />\r\n          )}\r\n        </Grid>\r\n      </CardContent>\r\n      {isChart && (\r\n        <Dialog\r\n          open={isChart}\r\n          TransitionComponent={Transition}\r\n          onClose={() => setIsChart(true)}\r\n          PaperProps={{\r\n            style: {\r\n              height: parseFloat(count.width.replace(\"px\", \"\")) * 0.42,\r\n              maxWidth: parseFloat(count.width.replace(\"px\", \"\")) * 0.6,\r\n              minWidth: parseFloat(count.width.replace(\"px\", \"\")) * 0.6,\r\n            },\r\n          }}\r\n        >\r\n          <CssBaseline />\r\n          <MuiDialogTitle>\r\n            <Typography component=\"strong\" variant=\"h6\">\r\n              {dataSet === \"as_needed_handoff\"\r\n                ? `RF Coverage (%)`\r\n                : `No Coverage (%)`}\r\n              {` vs. User Inclination`}\r\n            </Typography>\r\n            <IconButton\r\n              aria-label=\"Close\"\r\n              className={classes.dialogCloseBtn}\r\n              onClick={() => setIsChart(false)}\r\n            >\r\n              <CloseIcon />\r\n            </IconButton>\r\n          </MuiDialogTitle>\r\n          <hr />\r\n          <DialogContent>\r\n            {viewMethod === \"3d_view\" ? (\r\n              <Grid item md={12}>\r\n                <ThreeViewSection\r\n                  data={props.source}\r\n                  equation={props.equation}\r\n                  maxAltitude={props.maxAltitude}\r\n                  alt={props.alt}\r\n                  inc={props.inclination !== \"\" ? props.inclination : props.inc}\r\n                  value={props.value}\r\n                  reset={reset}\r\n                  isLegend={false}\r\n                  isSub={true}\r\n                  plot_rows={props.source.plot_value}\r\n                  surface_rows={surface_rows}\r\n                  zAxisLabel={zAxisLabel}\r\n                  checked={checked}\r\n                  size={count}\r\n                  isChart={true}\r\n                  onClick={handleClick}\r\n                />\r\n              </Grid>\r\n            ) : (\r\n              <Grid item md={12}>\r\n                <TwoViewSection\r\n                  data={props.data}\r\n                  equation={props.equation}\r\n                  maxAltitude={props.maxAltitude}\r\n                  alt={props.alt}\r\n                  inc={props.inclination !== \"\" ? props.inclination : props.inc}\r\n                  value={props.value}\r\n                  isLegend={false}\r\n                  isSub={true}\r\n                  plot_rows={plot_rows}\r\n                  surface_rows={surface_rows}\r\n                  yAxisLabel={zAxisLabel}\r\n                  dot={dot}\r\n                  size={count}\r\n                  checked={checked}\r\n                  isChart={true}\r\n                  onClick={handleClick}\r\n                />\r\n              </Grid>\r\n            )}\r\n          </DialogContent>\r\n        </Dialog>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AnalyzeRegressionSection;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Grid,\r\n  Container,\r\n  CssBaseline,\r\n  Card,\r\n  CardHeader,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport { getCartItems } from \"../../API\";\r\nimport useStyles from \"../../utils/styles\";\r\nimport { INIT_PARAMS } from \"../../constants\";\r\nimport AnalyzeRegressionSection from \"./analyze-regression-section\";\r\n\r\nconst CartDashPanel: React.FC = () => {\r\n  const [source, setSource] = useState({});\r\n  const [dataSource, setDataSource] = useState({} as any);\r\n  const [system, setSystem] = useState(5 as any);\r\n  const [version, setVersion] = useState(3 as any);\r\n  const [inclination, setInclination] = useState<string>(\"\");\r\n  const [incs, setIncs] = useState<Array<any>>([]);\r\n  const [dataType, setDataType] = useState<string>(\"coverage\");\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [terrestrial, setTerrestrial] = useState({});\r\n  const [maxAltitude, setMaxAltitude] = useState(0);\r\n  const [coefficients, setCoefficients] = useState({} as any);\r\n  const [text, setText] = useState(\"\");\r\n  const deepDive = \"system1/coverage\";\r\n  const metric = deepDive.split(\"/\")[1];\r\n  const missionType = \"orbital\";\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    setText(\"\");\r\n    getCartItems({\r\n      type: missionType,\r\n      system: system,\r\n      version: version,\r\n      dataType,\r\n    })\r\n      .then((res: any) => {\r\n        setTerrestrial(res.data.terrestrial);\r\n        setSource(res.data.data);\r\n        setDataSource(res.data.data);\r\n        setMaxAltitude(res.data.maxAltitude);\r\n        setCoefficients(res.data.coefficients);\r\n        setText(res.data.text);\r\n\r\n        if (Object.keys(res.data.data).includes(\"plot_value\")) {\r\n          let tmp = res.data.data.plot_value.map(\r\n            (item: any) => item[\"inclination\"]\r\n          );\r\n          let uniqueArray: Array<any> = [...new Set(tmp)];\r\n          setIncs(uniqueArray.sort());\r\n        }\r\n\r\n        // TODO: this is for \"cart system\".\r\n        // setText(\r\n        //   props.equationsTex[system.replace(\" \", \"_\").toLowerCase()][metric](\r\n        //     data[\"coefficients\"][metric]\r\n        //   )\r\n        // );\r\n      })\r\n      .then(() => {\r\n        setIsLoading(false);\r\n      });\r\n  }, [system, version, dataType]);\r\n\r\n  useEffect(() => {\r\n    if (Object.keys(dataSource).includes(\"plot_value\")) {\r\n      let data = dataSource.plot_value.filter(\r\n        (item: any) => item.inclination === inclination\r\n      );\r\n      setSource((prevState: any) => ({ ...prevState, plot_value: data }));\r\n    }\r\n  }, [inclination]);\r\n\r\n  const equation = (inc: any, alt: any, metric: string) => {\r\n    // TODO: this is for \"cart system\".\r\n    // const altitude = parseFloat(alt);\r\n    // const inclination = parseFloat(inc);\r\n    // const coefs = coefficients[metric];\r\n    // const eqn = props.equations[system.replace(\" \", \"_\").toLowerCase()][metric];\r\n    // return eqn(coefs, altitude, inclination);\r\n    return inc;\r\n  };\r\n\r\n  return (\r\n    <Grid container>\r\n      <Container component=\"main\" maxWidth=\"xl\">\r\n        <Card className={classes.cartCard}>\r\n          <CssBaseline />\r\n          <CardHeader\r\n            title={\r\n              <Typography component=\"h1\" variant=\"h5\" style={{ margin: 5 }}>\r\n                {`CART Integration Panel (Prototype)`}\r\n              </Typography>\r\n            }\r\n          />\r\n          {!isLoading &&\r\n            (missionType === \"orbital\" ? (\r\n              <AnalyzeRegressionSection\r\n                equation={(x: any, y: any, m: any) => equation(x, y, m)}\r\n                maxAltitude={maxAltitude}\r\n                alt={INIT_PARAMS.altitude}\r\n                inc={INIT_PARAMS.inclination}\r\n                value={INIT_PARAMS.value}\r\n                data={source}\r\n                source={dataSource}\r\n                dataType={dataType}\r\n                selectedItem={metric}\r\n                text={text}\r\n                system={system}\r\n                version={version}\r\n                inclination={inclination}\r\n                incs={incs}\r\n                onInc={(value: any) => setInclination(value)}\r\n                onSystem={(value: any) => setSystem(value)}\r\n                onVersion={(value: any) => setVersion(value)}\r\n                onDataType={(value: any) => setDataType(value)}\r\n              />\r\n            ) : (\r\n              <></>\r\n            ))}\r\n        </Card>\r\n      </Container>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default CartDashPanel;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport {\r\n    Container,\r\n    Card,\r\n    CardHeader,\r\n    CardContent,\r\n    Typography,\r\n    CssBaseline\r\n} from \"@material-ui/core\";\r\n\r\nimport useStyles from \"../../utils/styles\";\r\n\r\nfunction NoMatch() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"md\">\r\n            <CssBaseline />\r\n            <Card className={classes.authcard}>\r\n                <CardHeader\r\n                    title={\r\n                        <Typography component=\"h1\" variant=\"h5\">\r\n                            {`404 | Page not found :(`}\r\n                        </Typography>\r\n                    }\r\n                />\r\n                <CardContent>\r\n                    <p>{`Maybe the page you are looking for has been removed, or you typed in the wrong URL`}</p>\r\n                </CardContent>\r\n                <Link to=\"/\" className={classes.link}>{`Back To Home`}</Link>\r\n            </Card>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default NoMatch;","import React from \"react\";\r\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\r\n\r\nimport ChartPanel from \"./pages/chart-panel\";\r\nimport CartDashPanel from \"./pages/cart-dash-panel\";\r\nimport NoMatch from \"./pages/auth-panel/NoMatch\";\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <HashRouter>\r\n      <Switch>\r\n        <Route exact path=\"/\" component={CartDashPanel} />\r\n        <Route exact path=\"/home\" component={ChartPanel} />\r\n        <Route path=\"*\" component={NoMatch} />\r\n      </Switch>\r\n    </HashRouter>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}