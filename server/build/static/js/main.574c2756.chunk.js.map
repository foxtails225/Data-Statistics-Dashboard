{"version":3,"sources":["components/auth-panel/NoMatch.tsx","App.tsx","index.tsx","utils/util.ts","utils/styles.ts","components/chart-panel/index.tsx","API.ts","components/chart-panel/line-chart-section/index.tsx","components/chart-panel/histogram-chart-section/index.tsx","components/chart-panel/box-chart-section/index.tsx"],"names":["NoMatch","classes","useStyles","Container","component","maxWidth","CssBaseline","Card","className","authcard","CardHeader","title","Typography","variant","CardContent","to","link","App","exact","path","ChartPanel","ReactDOM","render","document","getElementById","useWindowSize","useState","width","undefined","height","windowSize","setWindowSize","useEffect","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","makeStyles","theme","marginTop","minWidth","padding","spacing","paddingRight","color","textDecoration","chartCard","searchSelect","textAlignLast","INIT_MENUS","id","name","traces","setTraces","selected","setSelected","getItems","then","res","data","eval","Object","keys","map","el","ctype","gaps","durations","avgs","item","idx","push","prevState","xTraces","yTraces","avgTraces","type","catch","container","alignItems","justify","md","value","onChange","e","target","style","grey","fullWidth","opacity","disabled","key","a","params","axios","get","todos","Error","LineChartSection","props","size","x","y","mode","marker","layout","toUpperCase","showlegend","legend","orientation","xanchor","font","family","margin","l","b","r","t","pad","xaxis","titlefont","showgrid","zerolinecolor","zerolinewidth","yaxis","config","displayModeBar","HistogramChartSection","split","join","BoxChartSection"],"mappings":"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","file":"static/js/main.574c2756.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport {\r\n    Container,\r\n    Card,\r\n    CardHeader,\r\n    CardContent,\r\n    Typography,\r\n    CssBaseline\r\n} from \"@material-ui/core\";\r\n\r\nimport useStyles from \"../../utils/styles\";\r\n\r\nfunction NoMatch() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"md\">\r\n            <CssBaseline />\r\n            <Card className={classes.authcard}>\r\n                <CardHeader\r\n                    title={\r\n                        <Typography component=\"h1\" variant=\"h5\">\r\n                            {`404 | Page not found :(`}\r\n                        </Typography>\r\n                    }\r\n                />\r\n                <CardContent>\r\n                    <p>{`Maybe the page you are looking for has been removed, or you typed in the wrong URL`}</p>\r\n                </CardContent>\r\n                <Link to=\"/\" className={classes.link}>{`Back To Home`}</Link>\r\n            </Card>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default NoMatch;","import React from \"react\";\r\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\r\n\r\nimport ChartPanel from './components/chart-panel';\r\nimport NoMatch from './components/auth-panel/NoMatch';\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <HashRouter>\r\n      <Switch>\r\n        <Route exact path=\"/\" component={ChartPanel} />\r\n        <Route path=\"*\" component={NoMatch} />\r\n      </Switch>\r\n    </HashRouter>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n","import { useState, useEffect } from 'react';\r\n\r\nexport function useWindowSize() {\r\n    const [windowSize, setWindowSize] = useState({\r\n      width: undefined as any,\r\n      height: undefined as any,\r\n    });\r\n  \r\n    useEffect(() => {\r\n      function handleResize() {\r\n        setWindowSize({\r\n          width: window.innerWidth,\r\n          height: window.innerHeight,\r\n        });\r\n      }\r\n      window.addEventListener(\"resize\", handleResize);\r\n      handleResize();\r\n  \r\n      return () => window.removeEventListener(\"resize\", handleResize);\r\n    }, []);\r\n  \r\n    return windowSize;\r\n  }","import { makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    authcard: {\r\n        marginTop: '10vh',\r\n        minWidth: \"30vw\",\r\n        padding: theme.spacing(3),\r\n    },\r\n    \r\n    link: {\r\n        paddingRight: theme.spacing(2),\r\n        color: \"#3385ff\",\r\n        textDecoration: 'none',\r\n    },\r\n\r\n    chartCard: {\r\n        padding: theme.spacing(3),\r\n    },\r\n    \r\n    searchSelect: {\r\n        textAlignLast: 'center',\r\n    },\r\n}));\r\n\r\nexport default useStyles;","import React, { useState, useEffect } from \"react\";\r\n\r\nimport {\r\n  Grid,\r\n  Container,\r\n  CssBaseline,\r\n  Card,\r\n  CardHeader,\r\n  CardContent,\r\n  Typography,\r\n  Select,\r\n  MenuItem,\r\n} from \"@material-ui/core\";\r\nimport { grey } from \"@material-ui/core/colors\";\r\n\r\nimport { getItems } from \"../../API\";\r\nimport useStyles from \"../../utils/styles\";\r\nimport LineChartSection from \"./line-chart-section\";\r\nimport HistogramChartSection from \"./histogram-chart-section\";\r\nimport BoxChartSection from \"./box-chart-section\";\r\n\r\nconst INIT_MENUS = [\r\n  { id: \"as_needed_handoff\", name: \"Power below threshold handoff\" },\r\n  { id: \"maximum_powee_handoff\", name: \"Maximum power immediate handoff\" },\r\n];\r\n\r\nfunction ChartPanel() {\r\n  const [traces, setTraces] = useState({} as any);\r\n  const [selected, setSelected] = useState(\"none\");\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    if (selected !== \"none\")\r\n      getItems(selected)\r\n        .then((res) => {\r\n          let data = eval(\"[\" + res.data + \"]\")[0];\r\n\r\n          Object.keys(data).map((el) => {\r\n            let ctype: String = data[el][\"type\"];\r\n            let gaps: Array<any> = [];\r\n            let durations: Array<any> = [];\r\n            let avgs: Array<any> = [];\r\n\r\n            // Detect chart type and set Traces\r\n            if (ctype === \"line\") {\r\n              data[el][\"data\"].map((item: Array<any>, idx: number) => {\r\n                gaps.push(idx + 1);\r\n                durations.push(item[3]);\r\n                avgs.push(item[4]);\r\n              });\r\n\r\n              setTraces((prevState: any) => ({\r\n                ...prevState,\r\n                [el]: {\r\n                  xTraces: gaps,\r\n                  yTraces: durations,\r\n                  avgTraces: avgs,\r\n                  type: ctype,\r\n                  title: el,\r\n                },\r\n              }));\r\n            } else if (ctype === \"histogram\") {\r\n              setTraces((prevState: any) => ({\r\n                ...prevState,\r\n                [el]: {\r\n                  xTraces: data[el][\"data\"],\r\n                  type: ctype,\r\n                  title: el,\r\n                },\r\n              }));\r\n            }\r\n          });\r\n        })\r\n        .catch(() => {\r\n          setTraces({});\r\n        });\r\n  }, [selected]);\r\n\r\n  return (\r\n    <Grid container>\r\n      <Container component=\"main\" maxWidth=\"lg\">\r\n        <CssBaseline />\r\n        <Card className={classes.chartCard}>\r\n          <CardHeader\r\n            title={\r\n              <Typography component=\"h1\" variant=\"h5\" className=\"m-3\">\r\n                {`CART Data Statistics Dashboard (Prototype)`}\r\n              </Typography>\r\n            }\r\n          />\r\n          <CardContent className=\"ml-3 mr-3\">\r\n            <Grid container alignItems=\"center\" justify=\"center\" spacing={3}>\r\n              <Grid item md={4}>\r\n                <Select\r\n                  name=\"\"\r\n                  value={selected}\r\n                  onChange={(e: any) => setSelected(e.target.value)}\r\n                  className={classes.searchSelect}\r\n                  style={selected === \"none\" ? { color: grey[500] } : {}}\r\n                  fullWidth\r\n                >\r\n                  <MenuItem value=\"none\" style={{ opacity: 0.87 }} disabled>\r\n                    {\"Select Data Set…\"}\r\n                  </MenuItem>\r\n                  {INIT_MENUS.map((item) => (\r\n                    <MenuItem value={item.id} key={item.id}>\r\n                      {item.name}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </Grid>\r\n              <Grid item md={8}></Grid>\r\n              {Object.keys(traces).map((item) => (\r\n                <Grid item md={6} key={item}>\r\n                  <Grid container spacing={3}>\r\n                    {traces[item].type === \"line\" && (\r\n                      <Grid item md={12}>\r\n                        <LineChartSection {...traces[item]} />\r\n                      </Grid>\r\n                    )}\r\n                    {traces[item].type === \"histogram\" && (\r\n                      <>\r\n                        <Grid item md={12}>\r\n                          <HistogramChartSection {...traces[item]} />\r\n                        </Grid>\r\n                        <Grid item md={12}>\r\n                          <BoxChartSection {...traces[item]} />\r\n                        </Grid>\r\n                      </>\r\n                    )}\r\n                  </Grid>\r\n                </Grid>\r\n              ))}\r\n            </Grid>\r\n          </CardContent>\r\n        </Card>\r\n      </Container>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default ChartPanel;\r\n","import axios, { AxiosResponse } from \"axios\";\r\n\r\nconst baseUrl: string = \"http://localhost:7000\";\r\n// const baseUrl: string = \"http://40.79.17.32:7000\";\r\n\r\nexport const getItems = async (selected: String) => {\r\n  const params = { selected };\r\n\r\n  try {\r\n    const todos: AxiosResponse = await axios.get(\"/get-items\", {\r\n      params,\r\n    });\r\n    return todos;\r\n  } catch (error) {\r\n    throw new Error(error);\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\n\r\nimport { useWindowSize } from \"../../../utils/util\";\r\n\r\nfunction LineChartSection(props: any) {\r\n  const size = useWindowSize();\r\n  \r\n  return (\r\n    <Plot\r\n      data={[\r\n        {\r\n          x: props.xTraces,\r\n          y: props.yTraces,\r\n          name: \"Gap Event Duration\",\r\n          type: \"scatter\",\r\n          mode: \"lines+markers\",\r\n          marker: { color: \"red\" },\r\n        },\r\n        {\r\n          x: props.xTraces,\r\n          y: props.avgTraces,\r\n          name: \"Running Average\",\r\n          type: \"scatter\",\r\n          marker: { color: \"blue\" },\r\n        },\r\n      ]}\r\n      layout={{\r\n        title: props.title.toUpperCase(),\r\n        width: size.width * 0.35,\r\n        showlegend: true,\r\n        legend: {\r\n          orientation: \"h\",\r\n          xanchor: \"center\",\r\n          font: {\r\n            family: \"sans-serif\",\r\n            size: 12,\r\n            color: \"#000\",\r\n          },\r\n        },\r\n        margin: {\r\n          l: 60,\r\n          b: 0,\r\n          r: 30,\r\n          t: 30,\r\n          pad: 5,\r\n        },\r\n        xaxis: {\r\n          title: \"Gap Event (Sequence)\",\r\n          titlefont: {\r\n            size: 12,\r\n            color: \"#212529\",\r\n          },\r\n          showgrid: true,\r\n          zerolinecolor: \"#969696\",\r\n          zerolinewidth: 1,\r\n        },\r\n        yaxis: {\r\n          title: \"Gap Duration (seconds)\",\r\n          titlefont: {\r\n            size: 12,\r\n            color: \"#212529\",\r\n          },\r\n          showgrid: true,\r\n          zerolinecolor: \"#969696\",\r\n          zerolinewidth: 1,\r\n        },\r\n      }}\r\n      config={{ displayModeBar: false }}\r\n    />\r\n  );\r\n}\r\n\r\nexport default LineChartSection;\r\n","import React from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\n\r\nimport { useWindowSize } from \"../../../utils/util\";\r\n\r\nfunction HistogramChartSection(props: any) {\r\n  const size = useWindowSize();\r\n  \r\n  return (\r\n    <Plot\r\n      data={[\r\n        {\r\n          x: props.xTraces,\r\n          name: \"Duration\",\r\n          type: \"histogram\",\r\n        },\r\n      ]}\r\n      layout={{\r\n        title: props.title.toUpperCase().split('_').join(' '),\r\n        width: size.width * 0.35,\r\n        showlegend: true,\r\n        legend: {\r\n          orientation: \"h\",\r\n          xanchor: \"center\",\r\n          font: {\r\n            family: \"sans-serif\",\r\n            size: 12,\r\n            color: \"#000\",\r\n          },\r\n        },\r\n        margin: {\r\n          l: 60,\r\n          b: 0,\r\n          r: 30,\r\n          t: 30,\r\n          pad: 5,\r\n        },\r\n        xaxis: {\r\n          title: \"Duration\",\r\n          titlefont: {\r\n            size: 12,\r\n            color: \"#212529\",\r\n          },\r\n          showgrid: true,\r\n          zerolinecolor: \"#969696\",\r\n          zerolinewidth: 1,\r\n        },\r\n        yaxis: {\r\n          title: \"Occurances\",\r\n          titlefont: {\r\n            size: 12,\r\n            color: \"#212529\",\r\n          },\r\n          showgrid: true,\r\n          zerolinecolor: \"#969696\",\r\n          zerolinewidth: 1,\r\n        },\r\n      }}\r\n      config={{ displayModeBar: false }}\r\n    />\r\n  );\r\n}\r\n\r\nexport default HistogramChartSection;\r\n","import React from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\n\r\nimport { useWindowSize } from \"../../../utils/util\";\r\n\r\nfunction BoxChartSection(props: any) {\r\n  const size = useWindowSize();\r\n  \r\n  return (\r\n    <Plot\r\n      data={[\r\n        {\r\n          y: props.xTraces,\r\n          name: \"Duration\",\r\n          type: \"box\",\r\n        },\r\n      ]}\r\n      layout={{\r\n        title: `${props.title.toUpperCase().split('_')[0]} BOX`,\r\n        width: size.width * 0.35,\r\n        showlegend: true,\r\n        legend: {\r\n          orientation: \"h\",\r\n          xanchor: \"center\",\r\n          font: {\r\n            family: \"sans-serif\",\r\n            size: 12,\r\n            color: \"#000\",\r\n          },\r\n        },\r\n        margin: {\r\n          l: 60,\r\n          b: 0,\r\n          r: 30,\r\n          t: 30,\r\n          pad: 5,\r\n        },\r\n        xaxis: {\r\n          title: \"Occurances\",\r\n          titlefont: {\r\n            size: 12,\r\n            color: \"#212529\",\r\n          },\r\n          showgrid: true,\r\n          zerolinecolor: \"#969696\",\r\n          zerolinewidth: 1,\r\n        },\r\n        yaxis: {\r\n          title: \"Duration\",\r\n          titlefont: {\r\n            size: 12,\r\n            color: \"#212529\",\r\n          },\r\n          showgrid: true,\r\n          zerolinecolor: \"#969696\",\r\n          zerolinewidth: 1,\r\n        },\r\n      }}\r\n      config={{ displayModeBar: false }}\r\n    />\r\n  );\r\n}\r\n\r\nexport default BoxChartSection;\r\n"],"sourceRoot":""}