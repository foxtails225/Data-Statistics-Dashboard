{"version":3,"sources":["API.ts","utils/styles.ts","utils/util.ts","pages/chart-panel/line-chart-section/index.tsx","pages/chart-panel/histogram-chart-section/index.tsx","pages/chart-panel/box-chart-section/index.tsx","pages/chart-panel/terrestrial-heatmap-chart/index.tsx","pages/cart-dashboard-panel/analyze-regression-section/two-view-section/index.tsx","pages/cart-dashboard-panel/analyze-regression-section/three-view-section/index.tsx","constants/index.ts","components/Select/index.tsx","components/Button/DashAddon.tsx","pages/cart-dashboard-panel/analyze-regression-section/charts-libs-section/line-chart-section/index.tsx","pages/cart-dashboard-panel/analyze-regression-section/charts-libs-section/histogram-chart-section/index.tsx","pages/cart-dashboard-panel/analyze-regression-section/charts-libs-section/box-chart-section/index.tsx","pages/cart-dashboard-panel/analyze-regression-section/charts-libs-section/selected-chart-section/index.tsx","pages/cart-dashboard-panel/analyze-regression-section/charts-libs-section/index.tsx","pages/cart-dashboard-panel/analyze-regression-section/header-section/index.tsx","components/Button/OptionAddon.tsx","pages/cart-dashboard-panel/analyze-regression-section/index.tsx","pages/cart-dashboard-panel/index.tsx","pages/cart-panel/analyze-regression-section/two-view-section/index.tsx","pages/cart-panel/analyze-regression-section/three-view-section/index.tsx","components/Button/MinusAddon.tsx","components/Button/PlusAddon.tsx","pages/cart-panel/analyze-regression-section/charts-libs-section/selected-chart-section/index.tsx","pages/cart-panel/analyze-regression-section/charts-libs-section/index.tsx","pages/cart-panel/analyze-regression-section/index.tsx","pages/cart-panel/index.tsx","pages/chart-panel/index.tsx","pages/auth-panel/NoMatch.tsx","App.tsx","index.tsx"],"names":["getItems","params","a","axios","get","res","Error","getPlotItems","getCartItems","getSystems","getSystemVersion","getFileId","useStyles","makeStyles","theme","authcard","marginTop","minWidth","padding","spacing","link","paddingRight","color","textDecoration","chartCard","searchSelect","textAlignLast","tooltip","maxWidth","dialogDeep","height","backgroundColor","palette","grey","dashDialogDeep","dialogCloseBtn","position","right","top","zIndex","contentSection","maxHeight","overflow","label","fontSize","formControl","margin","useWindowSize","useState","width","undefined","windowSize","setWindowSize","useEffect","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","LineChartSection","props","size","data","x","source","xTraces","y","yTraces","name","type","mode","marker","avgTraces","layout","title","showlegend","legend","orientation","xanchor","font","family","l","b","r","t","pad","xaxis","dataType","titlefont","showgrid","zerolinecolor","zerolinewidth","yaxis","config","displayModeBar","HistogramChartSection","split","join","BoxChartSection","boxpoints","INIT_SOURCE","heatmap","intrpl","TerrestrialHeatMap","setMode","setSource","then","catch","Grid","container","justify","alignItems","item","md","z","zeroline","range","tickmode","tick0","dtick","lat","lon","mapbox","center","style","zoom","mapboxAccessToken","hoverinfo","Box","borderColor","border","borderRadius","Button","variant","onClick","e","currentTarget","marginRight","TwoViewSection","checked","setChecked","setConfig","plot_rows","surface_rows","unpack","rows","key","map","row","configData","inclination","parseInt","inc","new_plot_rows","filter","new_surface_rows","show_surface","show_scatter","line","dot","autosize","hovermode","isChart","Number","replace","yAxisLabel","onHover","event","target","cursor","onUnhover","onDoubleClick","ThreeViewSection","reset","setReset","opacity","alt","value","parseFloat","scene","aspectratio","camera","eye","up","Math","max","zaxis","zAxisLabel","min","MENU_ITEMS","as_needed_handoff","id","dataset","maximum_powee_handoff","Selection","Menu","anchorEl","keepMounted","open","Boolean","onClose","onAnchorEl","Constants","el","MenuItem","onSelected","selected","includes","DashAddon","IconButton","index","onIndex","onSubChart","text","isSubChart","createData","SelectedChartSection","Typography","textAlign","Table","aria-label","TableHead","TableRow","TableCell","TableBody","component","scope","Transition","React","forwardRef","ref","Slide","direction","ChartsLibsSection","setSelected","setAnchorEl","subChart","setSubChart","isOpen","setIsOpen","setIndex","classes","idx","dset","dataSet","paddingLeft","Card","CardContent","traces","Object","keys","length","Dialog","TransitionComponent","PaperProps","CssBaseline","className","Close","DialogContent","HeaderSection","minHeight","marginLeft","ToggleButtonGroup","onChange","ToggleButton","FormControl","fullWidth","InputLabel","Select","labelId","system","onSystem","disabled","systems","system_name","system_id","version","onVersion","versions","OptionAddon","left","isDash","onChart","viewMethod","onViewMethod","Divider","flexItem","onInc","incs","Tooltip","gutterBottom","dangerouslySetInnerHTML","__html","placement","resetPlot","INIT_FILE_ID","INIT_CHECK_STATUS","viewStyle","AnalyzeRegressionSection","setViewMethod","setDataSet","setSystems","setVersions","setDot","fileId","setFileId","setTraces","count","setCount","setIsChart","chartEl","useRef","plot_value","ctype","gaps","durations","avgs","push","prevState","err","user_altitude","user_inclination","altitude","getComputedStyle","current","handleClick","points","dividers","overflowX","preventDefault","onDataType","fontWeight","dataSource","onChecked","equation","maxAltitude","isLegend","isSub","INIT_PARAMS","CartPanel","setDataSource","setSystem","setVersion","setInclination","setIncs","setDataType","isLoading","setIsLoading","setTerrestrial","setMaxAltitude","setCoefficients","setText","metric","terrestrial","coefficients","tmp","uniqueArray","Set","sort","paper","m","selectedItem","MinusAddon","PlusAddon","handleSelected","Fragment","INIT_MENUS","TabPanel","children","other","role","hidden","aria-labelledby","p","a11yProps","ChartPanel","isOpenDash","setIsOpenDash","tab","setTab","useTheme","Container","CardHeader","action","AppBar","Tabs","val","indicatorColor","textColor","Tab","axis","onChangeIndex","NoMatch","to","App","exact","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3d319fa2.chunk.js","sourcesContent":["import axios, { AxiosResponse } from \"axios\";\r\n\r\n// const baseUrl: string = \"http://127.0.0.1:7000\";\r\n\r\nexport const getItems = async (params: any) => {\r\n  try {\r\n    const res: AxiosResponse = await axios.get(\"/get-items\", {\r\n      params,\r\n    });\r\n    return res;\r\n  } catch (error) {\r\n    throw new Error(error);\r\n  }\r\n};\r\n\r\nexport const getPlotItems = async () => {\r\n  try {\r\n    const res: AxiosResponse = await axios.get(\"/get-plot\");\r\n    return res;\r\n  } catch (error) {\r\n    throw new Error(error);\r\n  }\r\n};\r\n\r\nexport const getCartItems = async (params: Object) => {\r\n  try {\r\n    const res: AxiosResponse = await axios.get(\"/get-cart\", {\r\n      params,\r\n    });\r\n    return res;\r\n  } catch (error) {\r\n    throw new Error(error);\r\n  }\r\n};\r\n\r\nexport const getSystems = async () => {\r\n  try {\r\n    const res: AxiosResponse = await axios.get(\"/get-systems\");\r\n    return res;\r\n  } catch (error) {\r\n    throw new Error(error);\r\n  }\r\n};\r\n\r\nexport const getSystemVersion = async (params: Object) => {\r\n  try {\r\n    const res: AxiosResponse = await axios.get(\r\n      \"/get-system-version\",\r\n      { params }\r\n    );\r\n    return res;\r\n  } catch (error) {\r\n    throw new Error(error);\r\n  }\r\n};\r\n\r\nexport const getFileId = async (params: Object) => {\r\n  try {\r\n    const res: AxiosResponse = await axios.get(\"/get-file-id\", {\r\n      params,\r\n    });\r\n    return res;\r\n  } catch (error) {\r\n    throw new Error(error);\r\n  }\r\n};\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\nimport { grey } from \"@material-ui/core/colors\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  authcard: {\r\n    marginTop: \"10vh\",\r\n    minWidth: \"30vw\",\r\n    padding: theme.spacing(3),\r\n  },\r\n\r\n  link: {\r\n    paddingRight: theme.spacing(2),\r\n    color: \"#3385ff\",\r\n    textDecoration: \"none\",\r\n  },\r\n\r\n  chartCard: {\r\n    padding: theme.spacing(3),\r\n  },\r\n\r\n  searchSelect: {\r\n    textAlignLast: \"center\",\r\n  },\r\n\r\n  tooltip: {\r\n    maxWidth: \"500px\",\r\n  },\r\n\r\n  dialogDeep: {\r\n    minWidth: \"43vw !important\",\r\n    height: \"90vh !important\",\r\n    maxWidth: \"40vw !important\",\r\n    backgroundColor: theme.palette.grey[100],\r\n  },\r\n\r\n  dashDialogDeep: {\r\n    height: \"93vh !important\",\r\n    minWidth: \"80vw !important\",\r\n    maxWidth: \"80vw !important\",\r\n    backgroundColor: theme.palette.grey[100],\r\n  },\r\n\r\n  dialogCloseBtn: {\r\n    position: \"absolute\",\r\n    right: theme.spacing(1),\r\n    top: theme.spacing(1),\r\n    color: theme.palette.grey[500],\r\n    zIndex: 100,\r\n  },\r\n\r\n  contentSection: {\r\n    backgroundColor: grey[500],\r\n    height: \"100%\",\r\n    maxHeight: \"55vh\",\r\n    overflow: \"auto\",\r\n  },\r\n\r\n  label: {\r\n    fontSize: 14,\r\n  },\r\n\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nexport default useStyles;\r\n","import { useState, useEffect } from \"react\";\r\n\r\nexport function useWindowSize() {\r\n  const [windowSize, setWindowSize] = useState({\r\n    width: undefined as any,\r\n    height: undefined as any,\r\n  });\r\n\r\n  useEffect(() => {\r\n    function handleResize() {\r\n      setWindowSize({\r\n        width: window.innerWidth,\r\n        height: window.innerHeight,\r\n      });\r\n    }\r\n    window.addEventListener(\"resize\", handleResize);\r\n    handleResize();\r\n\r\n    return () => window.removeEventListener(\"resize\", handleResize);\r\n  }, []);\r\n\r\n  return windowSize;\r\n}\r\n","import React from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\n\r\nimport { useWindowSize } from \"../../../utils/util\";\r\n\r\nfunction LineChartSection(props: any) {\r\n  const size = useWindowSize();\r\n\r\n  return (\r\n    <Plot\r\n      data={[\r\n        {\r\n          x: props.source.xTraces,\r\n          y: props.source.yTraces,\r\n          name: \"Gap Event Duration\",\r\n          type: \"scatter\",\r\n          mode: \"lines+markers\",\r\n          marker: { color: \"red\" },\r\n        },\r\n        {\r\n          x: props.source.xTraces,\r\n          y: props.source.avgTraces,\r\n          name: \"Running Average\",\r\n          type: \"scatter\",\r\n          marker: { color: \"blue\" },\r\n        },\r\n      ]}\r\n      layout={{\r\n        title: `<b>${props.source.title}</b>`,\r\n        width: size.width * 0.37,\r\n        showlegend: true,\r\n        legend: {\r\n          orientation: \"h\",\r\n          xanchor: \"center\",\r\n          font: {\r\n            family: \"sans-serif\",\r\n            size: 12,\r\n            color: \"#000\",\r\n          },\r\n        },\r\n        margin: {\r\n          l: 60,\r\n          b: 0,\r\n          r: 30,\r\n          t: 30,\r\n          pad: 5,\r\n        },\r\n        xaxis: {\r\n          title:\r\n            props.dataType === \"coverage\"\r\n              ? \"Coverage Event Number\"\r\n              : \"Gap Event Number\",\r\n          titlefont: {\r\n            size: 12,\r\n            color: \"#212529\",\r\n          },\r\n          showgrid: true,\r\n          zerolinecolor: \"#969696\",\r\n          zerolinewidth: 1,\r\n        },\r\n        yaxis: {\r\n          title:\r\n            props.dataType === \"coverage\"\r\n              ? \"Coverage Duration (Sec.)\"\r\n              : \"Gap Duration (Sec.)\",\r\n          titlefont: {\r\n            size: 12,\r\n            color: \"#212529\",\r\n          },\r\n          showgrid: true,\r\n          zerolinecolor: \"#969696\",\r\n          zerolinewidth: 1,\r\n        },\r\n      }}\r\n      config={{ displayModeBar: false }}\r\n    />\r\n  );\r\n}\r\n\r\nexport default LineChartSection;\r\n","import React from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\n\r\nimport { useWindowSize } from \"../../../utils/util\";\r\n\r\nfunction HistogramChartSection(props: any) {\r\n  const size = useWindowSize();\r\n  \r\n  return (\r\n    <Plot\r\n      data={[\r\n        {\r\n          x: props.xTraces,\r\n          name: \"Duration\",\r\n          type: \"histogram\",\r\n        },\r\n      ]}\r\n      layout={{\r\n        title: `<b>${props.title.split('_').join(' ')}</b>`,\r\n        width: size.width * 0.37,\r\n        showlegend: true,\r\n        legend: {\r\n          orientation: \"h\",\r\n          xanchor: \"center\",\r\n          font: {\r\n            family: \"sans-serif\",\r\n            size: 12,\r\n            color: \"#000\",\r\n          },\r\n        },\r\n        margin: {\r\n          l: 60,\r\n          b: 0,\r\n          r: 30,\r\n          t: 30,\r\n          pad: 5,\r\n        },\r\n        xaxis: {\r\n          title: \"Duration\",\r\n          titlefont: {\r\n            size: 12,\r\n            color: \"#212529\",\r\n          },\r\n          showgrid: true,\r\n          zerolinecolor: \"#969696\",\r\n          zerolinewidth: 1,\r\n        },\r\n        yaxis: {\r\n          title: \"Occurances\",\r\n          titlefont: {\r\n            size: 12,\r\n            color: \"#212529\",\r\n          },\r\n          showgrid: true,\r\n          zerolinecolor: \"#969696\",\r\n          zerolinewidth: 1,\r\n        },\r\n      }}\r\n      config={{ displayModeBar: false }}\r\n    />\r\n  );\r\n}\r\n\r\nexport default HistogramChartSection;\r\n","import React from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\n\r\nimport { useWindowSize } from \"../../../utils/util\";\r\n\r\nfunction BoxChartSection(props: any) {\r\n  const size = useWindowSize();\r\n\r\n  return (\r\n    <Plot\r\n      data={[\r\n        {\r\n          y: props.xTraces,\r\n          boxpoints: 'all',\r\n          name: \"\",\r\n          type: \"box\",\r\n        },\r\n      ]}\r\n      layout={{\r\n        title: `<b>${props.title.split(\" \")[0]} Statistics</b>`,\r\n        width: size.width * 0.37,\r\n        margin: {\r\n          l: 60,\r\n          b: 0,\r\n          r: 30,\r\n          t: 30,\r\n          pad: 5,\r\n        },\r\n        yaxis: {\r\n          title: \"Duration\",\r\n          titlefont: {\r\n            size: 12,\r\n            color: \"#212529\",\r\n          },\r\n          showgrid: true,\r\n          zerolinecolor: \"#969696\",\r\n          zerolinewidth: 1,\r\n        },\r\n      }}\r\n      config={{ displayModeBar: false }}\r\n    />\r\n  );\r\n}\r\n\r\nexport default BoxChartSection;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\nimport { Grid, Button, Box } from \"@material-ui/core\";\r\n\r\nimport { getPlotItems } from \"../../../API\";\r\n\r\nconst INIT_SOURCE = {\r\n  heatmap: {},\r\n  intrpl: {},\r\n};\r\n\r\nfunction TerrestrialHeatMap() {\r\n  const [mode, setMode] = useState(\"heatmap\");\r\n  const [source, setSource] = useState(INIT_SOURCE as any);\r\n\r\n  useEffect(() => {\r\n    getPlotItems()\r\n      .then((res: any) => {\r\n        setSource(res.data);\r\n      })\r\n      .catch(() => setSource(INIT_SOURCE));\r\n  }, []);\r\n  return (\r\n    <>\r\n      <Grid container justify=\"center\" alignItems=\"center\">\r\n        {mode === \"heatmap\" ? (\r\n          <>\r\n            <Grid item md={6}>\r\n              <Plot\r\n                data={[\r\n                  {\r\n                    x: source.heatmap.x,\r\n                    y: source.heatmap.y,\r\n                    z: source.heatmap.z,\r\n                    type: \"heatmap\",\r\n                  },\r\n                ]}\r\n                layout={{\r\n                  width: 500,\r\n                  height: 500,\r\n                  title: \"\",\r\n                  xaxis: {\r\n                    title: \"Longitude (deg)\",\r\n                    zeroline: false,\r\n                    range: [-180, 180],\r\n                    tickmode: \"linear\",\r\n                    tick0: -180,\r\n                    dtick: 40,\r\n                  },\r\n                  yaxis: {\r\n                    title: \"Latitude (deg)\",\r\n                    zeroline: false,\r\n                    range: [-90, 90],\r\n                    tickmode: \"linear\",\r\n                    tick0: -90,\r\n                    dtick: 30,\r\n                  },\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid item md={6}>\r\n              <Plot\r\n                data={[\r\n                  {\r\n                    lat: source.heatmap.x,\r\n                    lon: source.heatmap.y,\r\n                    z: source.heatmap.z,\r\n                    type: \"densitymapbox\",\r\n                  },\r\n                ]}\r\n                layout={{\r\n                  width: 500,\r\n                  height: 500,\r\n                  title: \"\",\r\n                  mapbox: {\r\n                    center: { lon: 60, lat: 30 },\r\n                    style: \"outdoors\",\r\n                    zoom: 2,\r\n                  },\r\n                }}\r\n                config={{\r\n                  mapboxAccessToken:\r\n                    \"pk.eyJ1IjoicmxhZm9udGFpbmUiLCJhIjoiY2tpMG82ZjNiMHZ3NjJxcDV1cjAzaTJ4eCJ9.VJSnQNJxiJK-jixU6KaFYQ\",\r\n                }}\r\n              />\r\n            </Grid>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <Grid item md={6}>\r\n              <Plot\r\n                data={[\r\n                  {\r\n                    x: source.intrpl.x,\r\n                    y: source.intrpl.y,\r\n                    z: source.intrpl.z,\r\n                    type: \"heatmap\",\r\n                  },\r\n                ]}\r\n                layout={{\r\n                  width: 500,\r\n                  height: 500,\r\n                  title: \"\",\r\n                  xaxis: {\r\n                    title: \"Longitude (deg)\",\r\n                    zeroline: false,\r\n                    range: [-180, 180],\r\n                    tickmode: \"linear\",\r\n                    tick0: -180,\r\n                    dtick: 40,\r\n                  },\r\n                  yaxis: {\r\n                    title: \"Latitude (deg)\",\r\n                    zeroline: false,\r\n                    range: [-90, 90],\r\n                    tickmode: \"linear\",\r\n                    tick0: -90,\r\n                    dtick: 30,\r\n                  },\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid item md={6}>\r\n              <Plot\r\n                data={[\r\n                  {\r\n                    lat: source.intrpl.x,\r\n                    lon: source.intrpl.x,\r\n                    z: source.intrpl.z,\r\n                    type: \"densitymapbox\",\r\n                    hoverinfo: \"skip\",\r\n                  },\r\n                ]}\r\n                layout={{\r\n                  width: 500,\r\n                  height: 500,\r\n                  title: \"\",\r\n                  mapbox: {\r\n                    center: { lon: 60, lat: 30 },\r\n                    style: \"outdoors\",\r\n                    zoom: 2,\r\n                  },\r\n                }}\r\n                config={{\r\n                  mapboxAccessToken:\r\n                    \"pk.eyJ1IjoicmxhZm9udGFpbmUiLCJhIjoiY2tpMG82ZjNiMHZ3NjJxcDV1cjAzaTJ4eCJ9.VJSnQNJxiJK-jixU6KaFYQ\",\r\n                }}\r\n              />\r\n            </Grid>\r\n          </>\r\n        )}\r\n      </Grid>\r\n      <Grid item md={6}>\r\n        <Box\r\n          borderColor=\"primary.main\"\r\n          border={2}\r\n          borderRadius={5}\r\n          padding={2}\r\n          style={{ zIndex: 1000 }}\r\n        >\r\n          <Button\r\n            name=\"heatmap\"\r\n            variant=\"contained\"\r\n            size=\"small\"\r\n            color=\"primary\"\r\n            onClick={(e) => setMode(e.currentTarget.name)}\r\n            style={{ width: \"48%\", marginRight: \"4%\" }}\r\n          >\r\n            {\"Non-Interpolated\"}\r\n          </Button>\r\n          <Button\r\n            name=\"intrpl\"\r\n            variant=\"contained\"\r\n            size=\"small\"\r\n            color=\"primary\"\r\n            onClick={(e) => setMode(e.currentTarget.name)}\r\n            style={{ width: \"48%\" }}\r\n          >\r\n            {\"Interpolated\"}\r\n          </Button>\r\n        </Box>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TerrestrialHeatMap;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\n\r\nfunction TwoViewSection(props: any) {\r\n  const [checked, setChecked] = useState(props.checked);\r\n  const [config, setConfig] = useState([]);\r\n  const plot_rows = props.plot_rows;\r\n  const surface_rows = props.surface_rows;\r\n\r\n  useEffect(() => {\r\n    setChecked(props.checked);\r\n  }, [props.checked]);\r\n\r\n  const unpack = (rows: Array<any>, key: any) => {\r\n    return rows.map(function (row: any) {\r\n      return row[key];\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    let configData: any = [];\r\n    const inclination = parseInt(props.inc);\r\n    const new_plot_rows = plot_rows.filter(\r\n      (row: any) => row.inclination === inclination\r\n    );\r\n    const new_surface_rows = surface_rows.filter(\r\n      (row: any) => row.inclination === inclination\r\n    );\r\n    if (checked.show_surface === true && checked.show_scatter === true) {\r\n      configData = [\r\n        {\r\n          x: unpack(new_plot_rows, \"altitude\"),\r\n          y: unpack(new_plot_rows, \"value\"),\r\n          name: \"Model data\",\r\n          mode: \"markers\",\r\n          type: \"scatter\",\r\n          color: \"rgb(23, 190, 207)\",\r\n        },\r\n        {\r\n          x: unpack(new_surface_rows, \"altitude\"),\r\n          y: unpack(new_surface_rows, \"value\"),\r\n          name: \"Model curve\",\r\n          mode: \"lines\",\r\n          line: {\r\n            color: \"rgb(252, 154, 7)\",\r\n          },\r\n        },\r\n        {\r\n          x: [props.dot.x],\r\n          y: [props.dot.y],\r\n          name: \"User\",\r\n          mode: \"markers\",\r\n          type: \"scatter\",\r\n          marker: {\r\n            color: \"red\",\r\n            size: 10,\r\n          },\r\n        },\r\n      ];\r\n    } else if (\r\n      checked.show_surface === false &&\r\n      checked.show_scatter === true\r\n    ) {\r\n      configData = [\r\n        {\r\n          x: unpack(new_plot_rows, \"altitude\"),\r\n          y: unpack(new_plot_rows, \"value\"),\r\n          name: \"Model data\",\r\n          mode: \"markers\",\r\n          type: \"scatter\",\r\n          color: \"rgb(23, 190, 207)\",\r\n        },\r\n        {\r\n          x: [],\r\n          y: [],\r\n          mode: \"markers\",\r\n          type: \"scatter\",\r\n        },\r\n        {\r\n          x: [props.dot.x],\r\n          y: [props.dot.y],\r\n          name: \"User\",\r\n          mode: \"markers\",\r\n          type: \"scatter\",\r\n          marker: {\r\n            color: \"red\",\r\n            size: 10,\r\n          },\r\n        },\r\n      ];\r\n    } else if (\r\n      checked.show_surface === true &&\r\n      checked.show_scatter === false\r\n    ) {\r\n      configData = [\r\n        {\r\n          x: unpack(new_surface_rows, \"altitude\"),\r\n          y: unpack(new_surface_rows, \"value\"),\r\n          name: \"Model curve\",\r\n          mode: \"lines\",\r\n          line: {\r\n            color: \"rgb(252, 154, 7)\",\r\n          },\r\n        },\r\n        {\r\n          x: [],\r\n          y: [],\r\n          mode: \"markers\",\r\n          type: \"scatter\",\r\n        },\r\n        {\r\n          x: [props.dot.x],\r\n          y: [props.dot.y],\r\n          name: \"User\",\r\n          mode: \"markers\",\r\n          type: \"scatter\",\r\n          marker: {\r\n            color: \"red\",\r\n            size: 10,\r\n          },\r\n        },\r\n      ];\r\n    } else if (\r\n      checked.show_surface === false &&\r\n      checked.show_scatter === false\r\n    ) {\r\n      configData = [\r\n        {\r\n          x: [],\r\n          y: [],\r\n          mode: \"lines\",\r\n        },\r\n        {\r\n          x: [],\r\n          y: [],\r\n          mode: \"markers\",\r\n          type: \"scatter\",\r\n        },\r\n        {\r\n          x: [props.dot.x],\r\n          y: [props.dot.y],\r\n          name: \"User\",\r\n          mode: \"markers\",\r\n          type: \"scatter\",\r\n          marker: {\r\n            color: \"red\",\r\n            size: 10,\r\n          },\r\n        },\r\n      ];\r\n    }\r\n\r\n    setConfig(configData);\r\n  }, [checked, plot_rows, surface_rows, props.inc]);\r\n\r\n  return (\r\n    <Plot\r\n      data={config}\r\n      layout={{\r\n        autosize: true,\r\n        showlegend: false,\r\n        hovermode: \"closest\",\r\n        width: props.isChart\r\n          ? Number(props.size.width.replace(\"px\", \"\")) * 0.55\r\n          : Number(props.size.width.replace(\"px\", \"\")) * 0.4,\r\n        height: props.isChart\r\n          ? Number(props.size.height.replace(\"px\", \"\")) * 0.55\r\n          : Number(props.size.height.replace(\"px\", \"\")) * 0.3,\r\n        margin: {\r\n          l: 60,\r\n          r: 15,\r\n          b: 35,\r\n          t: 15,\r\n        },\r\n        xaxis: {\r\n          title: `Altitude (km), Inclination=${props.inc} deg`,\r\n          type: \"linear\",\r\n          zeroline: false,\r\n        },\r\n        yaxis: {\r\n          title: props.yAxisLabel,\r\n          type: \"linear\",\r\n          zeroline: false,\r\n        },\r\n      }}\r\n      onHover={(e: any) => (e.event.target.style.cursor = \"pointer\")}\r\n      onUnhover={(e: any) => (e.event.target.style.cursor = \"crosshair\")}\r\n      onClick={(e) => props.onClick(e)}\r\n      onDoubleClick={() => props.onClick()}\r\n    />\r\n  );\r\n}\r\n\r\nexport default TwoViewSection;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\nimport { useWindowSize } from \"../../../../utils/util\";\r\n\r\nfunction ThreeViewSection(props: any) {\r\n  const [checked, setChecked] = useState(props.checked);\r\n  const [reset, setReset] = useState(false);\r\n  const [config, setConfig] = useState([]);\r\n  const size = useWindowSize();\r\n  const plot_rows = props.plot_rows;\r\n  const surface_rows = props.surface_rows;\r\n\r\n  useEffect(() => {\r\n    setReset(!reset);\r\n  }, [props.reset]);\r\n\r\n  useEffect(() => {\r\n    setChecked(props.checked);\r\n  }, [props.checked]);\r\n\r\n  const unpack = (rows: Array<any>, key: any) => {\r\n    return rows.map(function (row) {\r\n      return row[key];\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    let configData: any = [];\r\n    if (checked.show_surface === true && checked.show_scatter === true) {\r\n      configData = [\r\n        {\r\n          x: unpack(plot_rows, \"altitude\"),\r\n          y: unpack(plot_rows, \"inclination\"),\r\n          z: unpack(plot_rows, \"value\"),\r\n          name: \"Model data\",\r\n          mode: \"markers\",\r\n          type: \"scatter3d\",\r\n          opacity: 1,\r\n          marker: {\r\n            color: \"rgb(23, 190, 207)\",\r\n            size: 2,\r\n          },\r\n        },\r\n        {\r\n          x: unpack(surface_rows, \"altitude\"),\r\n          y: unpack(surface_rows, \"inclination\"),\r\n          z: unpack(surface_rows, \"value\"),\r\n          name: \"Model surface\",\r\n          opacity: 0.3,\r\n          type: \"mesh3d\",\r\n          color: \"rgb(252, 154, 7)\",\r\n        },\r\n        {\r\n          x: [props.alt],\r\n          y: [props.inc],\r\n          z: [props.value],\r\n          name: \"User\",\r\n          mode: \"markers\",\r\n          type: \"scatter3d\",\r\n          opacity: 1,\r\n          marker: {\r\n            color: \"red\",\r\n            size: 5,\r\n          },\r\n        },\r\n      ];\r\n    } else if (\r\n      checked.show_surface === false &&\r\n      checked.show_scatter === true\r\n    ) {\r\n      configData = [\r\n        {\r\n          x: unpack(plot_rows, \"altitude\"),\r\n          y: unpack(plot_rows, \"inclination\"),\r\n          z: unpack(plot_rows, \"value\"),\r\n          name: \"Model data\",\r\n          mode: \"markers\",\r\n          type: \"scatter3d\",\r\n          opacity: 1,\r\n          marker: {\r\n            color: \"rgb(23, 190, 207)\",\r\n            size: 2,\r\n          },\r\n        },\r\n        {\r\n          x: [props.alt],\r\n          y: [props.inc],\r\n          z: [props.value],\r\n          name: \"User\",\r\n          mode: \"markers\",\r\n          type: \"scatter3d\",\r\n          opacity: 1,\r\n          marker: {\r\n            color: \"red\",\r\n            size: 5,\r\n          },\r\n        },\r\n      ];\r\n    } else if (\r\n      checked.show_surface === true &&\r\n      checked.show_scatter === false\r\n    ) {\r\n      configData = [\r\n        {\r\n          x: unpack(surface_rows, \"altitude\"),\r\n          y: unpack(surface_rows, \"inclination\"),\r\n          z: unpack(surface_rows, \"value\"),\r\n          name: \"Model surface\",\r\n          opacity: 0.3,\r\n          type: \"mesh3d\",\r\n          color: \"rgb(252, 154, 7)\",\r\n        },\r\n        {\r\n          x: [props.alt],\r\n          y: [props.inc],\r\n          z: [props.value],\r\n          name: \"User\",\r\n          mode: \"markers\",\r\n          type: \"scatter3d\",\r\n          opacity: 1,\r\n          marker: {\r\n            color: \"red\",\r\n            size: 5,\r\n          },\r\n        },\r\n      ];\r\n    } else if (\r\n      checked.show_surface === false &&\r\n      checked.show_scatter === false\r\n    ) {\r\n      configData = [\r\n        {\r\n          x: [],\r\n          y: [],\r\n          z: [],\r\n          type: \"mesh3d\",\r\n        },\r\n        {\r\n          x: [],\r\n          y: [],\r\n          z: [],\r\n          mode: \"markers\",\r\n          type: \"scatter3d\",\r\n        },\r\n        {\r\n          x: [parseFloat(props.alt)],\r\n          y: [parseFloat(props.inc)],\r\n          z: [parseFloat(props.value)],\r\n          name: \"User\",\r\n          mode: \"markers\",\r\n          type: \"scatter3d\",\r\n          opacity: 1,\r\n          marker: {\r\n            color: \"red\",\r\n            size: 5,\r\n          },\r\n        },\r\n      ];\r\n    }\r\n\r\n    setConfig(configData);\r\n  }, [checked, plot_rows, surface_rows, reset]);\r\n\r\n  return (\r\n    <Plot\r\n      data={config}\r\n      layout={{\r\n        autosize: true,\r\n        width: props.isChart\r\n          ? Number(props.size.width.replace(\"px\", \"\")) * 0.55\r\n          : Number(props.size.width.replace(\"px\", \"\")) * 0.4,\r\n        height: props.isChart\r\n          ? Number(props.size.height.replace(\"px\", \"\")) * 0.4\r\n          : Number(props.size.height.replace(\"px\", \"\")) * 0.3,\r\n        margin: {\r\n          l: 0,\r\n          r: 0,\r\n          b: 0,\r\n          t: 0,\r\n        },\r\n        scene: {\r\n          aspectratio: {\r\n            x: 0.6,\r\n            y: 0.6,\r\n            z: 0.6,\r\n          },\r\n          camera: {\r\n            center: {\r\n              x: 0,\r\n              y: 0,\r\n              z: 0,\r\n            },\r\n            eye: {\r\n              x: 0.9,\r\n              y: 0.9,\r\n              z: 0.9,\r\n            },\r\n            up: {\r\n              x: 0,\r\n              y: 0,\r\n              z: 1,\r\n            },\r\n          },\r\n          xaxis: {\r\n            title: \"Altitude (km)\",\r\n            type: \"linear\",\r\n            range: [Math.max(...unpack(surface_rows, \"altitude\")), 0],\r\n            zeroline: false,\r\n          },\r\n          yaxis: {\r\n            title: \"Inclination (deg)\",\r\n            type: \"linear\",\r\n            range: [90, 0],\r\n            zeroline: false,\r\n          },\r\n          zaxis: {\r\n            title: props.zAxisLabel,\r\n            type: \"linear\",\r\n            range: [\r\n              Math.min(...unpack(surface_rows, \"value\")),\r\n              Math.max(...unpack(surface_rows, \"value\")),\r\n            ],\r\n            zeroline: false,\r\n          },\r\n        },\r\n        showlegend: false,\r\n      }}\r\n      onClick={(e) => props.onClick(e)}\r\n      onDoubleClick={() => props.onClick()}\r\n    />\r\n  );\r\n}\r\n\r\nexport default ThreeViewSection;\r\n","export const MENU_ITEMS: any = {\r\n  as_needed_handoff: [\r\n    { id: 0, dataset: \"coverage\", name: \"Key Metrics\" },\r\n    { id: 1, dataset: \"coverage\", name: \"Running Average\" },\r\n    { id: 2, dataset: \"coverage_histogram\", name: \"Distribution\" },\r\n    { id: 3, dataset: \"coverage_histogram\", name: \"Statistics Chart\" },\r\n  ],\r\n  maximum_powee_handoff: [\r\n    { id: 0, dataset: \"gap\", name: \"Key Metrics\" },\r\n    { id: 1, dataset: \"gap\", name: \"Running Average\" },\r\n    { id: 2, dataset: \"gap_histogram\", name: \"Distribution\" },\r\n    { id: 3, dataset: \"gap_histogram\", name: \"Statistics Chart\" },\r\n  ],\r\n};\r\n","import React from \"react\";\r\nimport { Menu, MenuItem } from \"@material-ui/core\";\r\nimport * as Constants from \"../../constants\";\r\nimport { grey } from \"@material-ui/core/colors\";\r\n\r\nfunction Selection(props: any) {\r\n  return (\r\n    <Menu\r\n      anchorEl={props.anchorEl}\r\n      keepMounted\r\n      open={Boolean(props.anchorEl)}\r\n      onClose={() => props.onAnchorEl(null)}\r\n    >\r\n      {Constants.MENU_ITEMS[\"as_needed_handoff\"].map((el: any) => (\r\n        <MenuItem\r\n          id={el.id}\r\n          key={el.id}\r\n          onClick={() => props.onSelected(el.id)}\r\n          style={{ backgroundColor: props.selected.includes(el.id) ? grey[300] : \"\" }}\r\n        >\r\n          {el.name}\r\n        </MenuItem>\r\n      ))}\r\n    </Menu>\r\n  );\r\n}\r\n\r\nexport default Selection;\r\n","import React from \"react\";\r\nimport { Grid, IconButton } from \"@material-ui/core\";\r\nimport LaunchIcon from \"@material-ui/icons/Launch\";\r\nimport DehazeIcon from \"@material-ui/icons/Dehaze\";\r\nimport Selection from \"../Select\";\r\n\r\nfunction DashAddon(props: any) {\r\n  return (\r\n    <Grid item md={12}>\r\n      <Grid\r\n        container\r\n        justify=\"flex-start\"\r\n        alignItems=\"center\"\r\n        style={{ position: \"relative\" }}\r\n      >\r\n        <Grid item md={1}>\r\n          <IconButton\r\n            id={props.index}\r\n            onClick={(e) => {\r\n              props.onAnchorEl(e.currentTarget);\r\n              props.onIndex(e.currentTarget.id);\r\n            }}\r\n            style={{ padding: 0 }}\r\n          >\r\n            <DehazeIcon />\r\n          </IconButton>\r\n          <Selection\r\n            selected={props.selected}\r\n            anchorEl={props.anchorEl}\r\n            onAnchorEl={(value: any) => props.onAnchorEl(value)}\r\n            onSelected={(value: any) => props.onSelected(value)}\r\n          />\r\n        </Grid>\r\n        <Grid item md={10} />\r\n        <Grid item md={1}>\r\n          <IconButton\r\n            style={{\r\n              padding: 0,\r\n              position: \"absolute\",\r\n              right: 0,\r\n              top: 10,\r\n            }}\r\n            onClick={() => props.onSubChart(props.index)}\r\n          >\r\n            <LaunchIcon />\r\n          </IconButton>\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default DashAddon;\r\n","import React from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\n\r\nimport { useWindowSize } from \"../../../../../utils/util\";\r\n\r\nfunction LineChartSection(props: any) {\r\n  const size = useWindowSize();\r\n\r\n  return (\r\n    <Plot\r\n      data={[\r\n        {\r\n          x: props.source.xTraces,\r\n          y: props.source.yTraces,\r\n          name: \"Gap Event Duration\",\r\n          type: \"scatter\",\r\n          mode: \"lines+markers\",\r\n          marker: { color: \"red\" },\r\n        },\r\n        {\r\n          x: props.source.xTraces,\r\n          y: props.source.avgTraces,\r\n          name: \"Running Average\",\r\n          type: \"scatter\",\r\n          marker: { color: \"blue\" },\r\n        },\r\n      ]}\r\n      layout={{\r\n        title: {\r\n          text: `<b>${props.source.title}</b>`,\r\n          font: {\r\n            family: \"Roboto\",\r\n            size: 15,\r\n          },\r\n        },\r\n        width: props.isSubChart\r\n          ? Number(props.size.width.replace(\"px\", \"\")) * 0.52\r\n          : Number(props.size.width.replace(\"px\", \"\")) * 0.38,\r\n        height: props.isSubChart\r\n          ? Number(props.size.width.replace(\"px\", \"\")) * 0.33\r\n          : Number(props.size.height.replace(\"px\", \"\")) * 0.3,\r\n        showlegend: true,\r\n        legend: {\r\n          orientation: \"h\",\r\n          xanchor: \"center\",\r\n          font: {\r\n            family: \"sans-serif\",\r\n            size: 12,\r\n            color: \"#000\",\r\n          },\r\n        },\r\n        margin: {\r\n          l: 60,\r\n          b: 0,\r\n          r: 30,\r\n          t: 30,\r\n          pad: 5,\r\n        },\r\n        xaxis: {\r\n          title:\r\n            props.dataType === \"coverage\"\r\n              ? \"Coverage Event Number\"\r\n              : \"Gap Event Number\",\r\n          titlefont: {\r\n            size: 12,\r\n            color: \"#212529\",\r\n          },\r\n          showgrid: true,\r\n          zerolinecolor: \"#969696\",\r\n          zerolinewidth: 1,\r\n        },\r\n        yaxis: {\r\n          title:\r\n            props.dataType === \"coverage\"\r\n              ? \"Coverage Duration (Sec.)\"\r\n              : \"Gap Duration (Sec.)\",\r\n          titlefont: {\r\n            size: 12,\r\n            color: \"#212529\",\r\n          },\r\n          showgrid: true,\r\n          zerolinecolor: \"#969696\",\r\n          zerolinewidth: 1,\r\n        },\r\n      }}\r\n      config={{ displayModeBar: false }}\r\n    />\r\n  );\r\n}\r\n\r\nexport default LineChartSection;\r\n","import React from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\n\r\nimport { useWindowSize } from \"../../../../../utils/util\";\r\n\r\nfunction HistogramChartSection(props: any) {\r\n  return (\r\n    <Plot\r\n      data={[\r\n        {\r\n          x: props.source.xTraces,\r\n          name: \"Duration\",\r\n          type: \"histogram\",\r\n        },\r\n      ]}\r\n      layout={{\r\n        title: {\r\n          text: `<b>${props.source.title.split('_').join(' ')}</b>`,\r\n          font: {\r\n            family: \"Roboto\",\r\n            size: 15,\r\n          },\r\n        },\r\n        width: props.isSubChart\r\n          ? Number(props.size.width.replace(\"px\", \"\")) * 0.56\r\n          : Number(props.size.width.replace('px', '')) * 0.4,\r\n        height: props.isSubChart\r\n          ? Number(props.size.width.replace(\"px\", \"\")) * 0.33\r\n          : Number(props.size.height.replace('px', '')) * 0.3,\r\n        showlegend: true,\r\n        legend: {\r\n          orientation: \"h\",\r\n          xanchor: \"center\",\r\n          font: {\r\n            family: \"sans-serif\",\r\n            size: 12,\r\n            color: \"#000\",\r\n          },\r\n        },\r\n        margin: {\r\n          l: 60,\r\n          b: 0,\r\n          r: 30,\r\n          t: 30,\r\n          pad: 5,\r\n        },\r\n        xaxis: {\r\n          title: \"Duration\",\r\n          titlefont: {\r\n            size: 12,\r\n            color: \"#212529\",\r\n          },\r\n          showgrid: true,\r\n          zerolinecolor: \"#969696\",\r\n          zerolinewidth: 1,\r\n        },\r\n        yaxis: {\r\n          title: \"Occurances\",\r\n          titlefont: {\r\n            size: 12,\r\n            color: \"#212529\",\r\n          },\r\n          showgrid: true,\r\n          zerolinecolor: \"#969696\",\r\n          zerolinewidth: 1,\r\n        },\r\n      }}\r\n      config={{ displayModeBar: false }}\r\n    />\r\n  );\r\n}\r\n\r\nexport default HistogramChartSection;\r\n","import React from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\n\r\nimport { useWindowSize } from \"../../../../../utils/util\";\r\n\r\nfunction BoxChartSection(props: any) {\r\n  return (\r\n    <Plot\r\n      data={[\r\n        {\r\n          y: props.source.xTraces,\r\n          boxpoints: \"all\",\r\n          name: \"\",\r\n          type: \"box\",\r\n        },\r\n      ]}\r\n      layout={{\r\n        title: {\r\n          text: `<b>${props.source.title.split(\" \")[0]} Statistics</b>`,\r\n          font: {\r\n            family: \"Roboto\",\r\n            size: 15,\r\n          },\r\n        },\r\n        width: props.isSubChart\r\n          ? Number(props.size.width.replace(\"px\", \"\")) * 0.56\r\n          : Number(props.size.width.replace(\"px\", \"\")) * 0.38,\r\n        height: props.isSubChart\r\n          ? Number(props.size.width.replace(\"px\", \"\")) * 0.33\r\n          : Number(props.size.height.replace(\"px\", \"\")) * 0.3,\r\n        margin: {\r\n          l: 60,\r\n          b: 0,\r\n          r: 30,\r\n          t: 30,\r\n          pad: 5,\r\n        },\r\n        yaxis: {\r\n          title: \"Duration\",\r\n          titlefont: {\r\n            size: 12,\r\n            color: \"#212529\",\r\n          },\r\n          showgrid: true,\r\n          zerolinecolor: \"#969696\",\r\n          zerolinewidth: 1,\r\n        },\r\n      }}\r\n      config={{ displayModeBar: false }}\r\n    />\r\n  );\r\n}\r\n\r\nexport default BoxChartSection;\r\n","import React from \"react\";\r\nimport {\r\n  Grid,\r\n  Typography,\r\n  Table,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  TableBody,\r\n} from \"@material-ui/core\";\r\n\r\nimport LineChartSection from \"../line-chart-section\";\r\nimport HistogramChartSection from \"../histogram-chart-section\";\r\nimport BoxChartSection from \"../box-chart-section\";\r\nimport { useWindowSize } from \"../../../../../utils/util\";\r\n\r\nfunction createData(name: String, value: String) {\r\n  return { name, value };\r\n}\r\n\r\nconst rows = [\r\n  createData(\"Average (sec)\", \"xx\"),\r\n  createData(\"Time-Averaged Gap\", \"xx\"),\r\n  createData(\"Median (sec)\", \"xx\"),\r\n  createData(\"Maximum (minutes)\", \"xx\"),\r\n  createData(\"Minimum (sec)\", \"xx\"),\r\n  createData(\"Average # Gaps Per Orbit\", \"xx\"),\r\n  createData(\"Average # Gaps Per Day\", \"xx\"),\r\n];\r\n\r\nfunction SelectedChartSection(props: any) {\r\n  const size = useWindowSize();\r\n\r\n  return (\r\n    <>\r\n      {props.id === 0 && (\r\n        <Grid\r\n          container\r\n          justify=\"center\"\r\n          alignItems=\"center\"\r\n          style={{\r\n            height: size.width\r\n              ? props.isSubChart\r\n                ? \"100%\"\r\n                : size.width * 0.11\r\n              : \"100%\",\r\n            overflow: \"auto\",\r\n          }}\r\n        >\r\n          <Grid item md={10}>\r\n            <Typography variant=\"h6\" style={{ textAlign: \"center\" }}>\r\n              {`Key Metrics`}\r\n            </Typography>\r\n            <Table aria-label=\"simple table\" size=\"small\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>{`Gap Statistic`}</TableCell>\r\n                  <TableCell>{`Value`}</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {rows.map((row: any) => (\r\n                  <TableRow key={row.name}>\r\n                    <TableCell component=\"th\" scope=\"row\">\r\n                      {row.name}\r\n                    </TableCell>\r\n                    <TableCell>{row.value}</TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </Grid>\r\n        </Grid>\r\n      )}\r\n      {props.id === 1 && (\r\n        <LineChartSection\r\n          source={props.data}\r\n          dataType={props.dataType}\r\n          size={props.size}\r\n          isSubChart={props.isSubChart}\r\n        />\r\n      )}\r\n      {props.id === 2 && (\r\n        <HistogramChartSection\r\n          source={props.data}\r\n          size={props.size}\r\n          isSubChart={props.isSubChart}\r\n        />\r\n      )}\r\n      {props.id === 3 && (\r\n        <BoxChartSection\r\n          source={props.data}\r\n          size={props.size}\r\n          isSubChart={props.isSubChart}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SelectedChartSection;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Grid,\r\n  Card,\r\n  CardContent,\r\n  Dialog,\r\n  CssBaseline,\r\n  DialogTitle as MuiDialogTitle,\r\n  Typography,\r\n  IconButton,\r\n  DialogContent,\r\n  Slide,\r\n} from \"@material-ui/core\";\r\nimport { TransitionProps } from \"@material-ui/core/transitions\";\r\nimport { Close as CloseIcon } from \"@material-ui/icons\";\r\n\r\nimport DashAddon from \"../../../../components/Button/DashAddon\";\r\nimport SelectedChartSection from \"./selected-chart-section\";\r\nimport * as Constants from \"../../../../constants\";\r\nimport useStyles from \"../../../../utils/styles\";\r\n\r\nconst Transition = React.forwardRef(function Transition(\r\n  props: TransitionProps & { children?: React.ReactElement<any, any> },\r\n  ref: React.Ref<Function>\r\n) {\r\n  return <Slide direction=\"left\" ref={ref} {...props} />;\r\n});\r\n\r\nfunction ChartsLibsSection(props: any) {\r\n  const [selected, setSelected] = useState([1, 2, 3] as any);\r\n  const [anchorEl, setAnchorEl] = useState(null as any);\r\n  const [subChart, setSubChart] = useState(null as any);\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [index, setIndex] = useState(0);\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {}, [subChart]);\r\n\r\n  const handleSelected = (id: any) => {\r\n    setSelected(\r\n      selected.map((item: any, idx: any) => {\r\n        if (idx === Number(index)) item = id;\r\n        return item;\r\n      })\r\n    );\r\n    setAnchorEl(null);\r\n  };\r\n  \r\n  return (\r\n    <>\r\n      {selected.map((item: any, idx: number) => {\r\n        let dset = Constants.MENU_ITEMS[props.dataSet][item].dataset;\r\n        return (\r\n          <Grid\r\n            item\r\n            md={6}\r\n            key={item}\r\n            style={{\r\n              paddingLeft: \"2rem\",\r\n              paddingRight: idx % 2 === 0 ? \"2rem\" : \"0.8rem\",\r\n            }}\r\n          >\r\n            <Card style={{ height: `calc(${props.size.height} * 0.4)` }}>\r\n              <CardContent>\r\n                <DashAddon\r\n                  type={1}\r\n                  selected={selected}\r\n                  anchorEl={anchorEl}\r\n                  index={idx}\r\n                  onIndex={(value: any) => setIndex(value)}\r\n                  onAnchorEl={(value: any) => setAnchorEl(value)}\r\n                  onSelected={(value: any) => handleSelected(value)}\r\n                  onSubChart={(value: any) => {\r\n                    setSubChart(value);\r\n                    setIsOpen(true);\r\n                  }}\r\n                />\r\n                <Grid item md={12}>\r\n                  {props.traces[dset] &&\r\n                    Object.keys(props.traces[dset]).length > 0 && (\r\n                      <SelectedChartSection\r\n                        id={item}\r\n                        size={props.size}\r\n                        data={props.traces[dset]}\r\n                        dataType={props.dataType}\r\n                        isSubChart={false}\r\n                      />\r\n                    )}\r\n                </Grid>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n        );\r\n      })}\r\n      {selected.length % 2 === 0 && <Grid item md={6} />}\r\n      {subChart !== null && (\r\n        <Dialog\r\n          open={isOpen}\r\n          TransitionComponent={Transition}\r\n          onClose={() => setIsOpen(false)}\r\n          PaperProps={{\r\n            style: {\r\n              height: Number(props.size.width.replace(\"px\", \"\")) * 0.42,\r\n              maxWidth: Number(props.size.width.replace(\"px\", \"\")) * 0.6,\r\n              minWidth: Number(props.size.width.replace(\"px\", \"\")) * 0.6,\r\n            },\r\n          }}\r\n        >\r\n          <CssBaseline />\r\n          <MuiDialogTitle>\r\n            <Typography component=\"strong\" variant=\"h6\">\r\n              {Constants.MENU_ITEMS[props.dataSet][subChart].name}\r\n            </Typography>\r\n            <IconButton\r\n              aria-label=\"Close\"\r\n              className={classes.dialogCloseBtn}\r\n              onClick={() => setIsOpen(false)}\r\n            >\r\n              <CloseIcon />\r\n            </IconButton>\r\n          </MuiDialogTitle>\r\n          <hr />\r\n          <DialogContent>\r\n            {props.traces[\r\n              Constants.MENU_ITEMS[props.dataSet][selected[subChart]].dataset\r\n            ] &&\r\n              Object.keys(\r\n                props.traces[\r\n                  Constants.MENU_ITEMS[props.dataSet][selected[subChart]]\r\n                    .dataset\r\n                ]\r\n              ).length > 0 && (\r\n                <SelectedChartSection\r\n                  id={selected[subChart]}\r\n                  size={props.size}\r\n                  dataType={props.dataType}\r\n                  isSubChart={true}\r\n                  data={\r\n                    props.traces[\r\n                      Constants.MENU_ITEMS[props.dataSet][selected[subChart]]\r\n                        .dataset\r\n                    ]\r\n                  }\r\n                />\r\n              )}\r\n          </DialogContent>\r\n        </Dialog>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ChartsLibsSection;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Grid,\r\n  Button,\r\n  Select,\r\n  FormControl,\r\n  InputLabel,\r\n  MenuItem,\r\n} from \"@material-ui/core\";\r\nimport { ToggleButton, ToggleButtonGroup } from \"@material-ui/lab\";\r\nimport { grey } from \"@material-ui/core/colors\";\r\nimport useStyles from \"../../../../utils/styles\";\r\n\r\nfunction HeaderSection(props: any) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Grid item md={12}>\r\n      <Grid\r\n        container\r\n        justify=\"flex-start\"\r\n        alignItems=\"center\"\r\n        spacing={1}\r\n        style={{ backgroundColor: grey[300], minHeight: '6vh' }}\r\n      >\r\n        <Grid item md={3} style={{ marginLeft: 15 }}>\r\n          <ToggleButtonGroup\r\n            value={props.dataSet}\r\n            onChange={(e) => props.onClick(e)}\r\n          >\r\n            <ToggleButton\r\n              id=\"as_needed_handoff\"\r\n              name=\"coverage\"\r\n              value=\"as_needed_handoff\"\r\n              size=\"small\"\r\n            >\r\n              {`RF Coverage (%)`}\r\n            </ToggleButton>\r\n            <ToggleButton\r\n              id=\"maximum_powee_handoff\"\r\n              name=\"gap\"\r\n              value=\"maximum_powee_handoff\"\r\n              size=\"small\"\r\n            >\r\n              {`No Coverage (%)`}\r\n            </ToggleButton>\r\n          </ToggleButtonGroup>\r\n        </Grid>\r\n        <Grid item md={2}>\r\n          <FormControl\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            className={classes.formControl}\r\n            fullWidth\r\n          >\r\n            <InputLabel id=\"demo-simple-select-outlined-label\">{`System`}</InputLabel>\r\n            <Select\r\n              labelId=\"demo-simple-select-outlined-label\"\r\n              id=\"demo-simple-select-outlined\"\r\n              value={props.system}\r\n              onChange={(e) => props.onSystem(e.target.value)}\r\n              label=\"System\"\r\n            >\r\n              <MenuItem value=\"\" disabled>\r\n                <em>{`None`}</em>\r\n              </MenuItem>\r\n              {props.systems.map((item: any) => (\r\n                <MenuItem key={item.system_name} value={item.system_id}>\r\n                  {item.system_name}\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n        <Grid item md={2}>\r\n          <FormControl\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            className={classes.formControl}\r\n            fullWidth\r\n          >\r\n            <InputLabel id=\"demo-simple-select-outlined-label\">{`Version`}</InputLabel>\r\n            <Select\r\n              labelId=\"demo-simple-select-outlined-label\"\r\n              id=\"demo-simple-select-outlined\"\r\n              value={props.version}\r\n              onChange={(e) => props.onVersion(e.target.value)}\r\n              label=\"Version\"\r\n            >\r\n              <MenuItem value=\"\" disabled>\r\n                <em>{`None`}</em>\r\n              </MenuItem>\r\n              {props.versions.map((item: any) => (\r\n                <MenuItem\r\n                  key={`version_${item.versions}`}\r\n                  value={item.versions}\r\n                >\r\n                  {item.versions}\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n        <Grid item md={5} />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default HeaderSection;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Grid,\r\n  Button,\r\n  Box,\r\n  Typography,\r\n  Tooltip,\r\n  IconButton,\r\n  Divider,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n} from \"@material-ui/core\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport ExpandLessIcon from \"@material-ui/icons/ExpandLess\";\r\nimport LaunchIcon from \"@material-ui/icons/Launch\";\r\n\r\nimport useStyles from \"../../utils/styles\";\r\nimport { grey } from \"@material-ui/core/colors\";\r\n\r\nfunction OptionAddon(props: any) {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Grid container justify=\"center\" alignItems=\"center\" spacing={2}>\r\n      <Grid item md={4}>\r\n        <Typography\r\n          component=\"p\"\r\n          style={{\r\n            textAlign: \"end\",\r\n            position: \"absolute\",\r\n            left: 10,\r\n            top: 10,\r\n          }}\r\n        >\r\n          <IconButton\r\n            size=\"small\"\r\n            onClick={() => setIsOpen(!isOpen)}\r\n            className=\"mt-2 mb-2\"\r\n            style={{ fontSize: 11 }}\r\n          >\r\n            {`Graph Options`}\r\n            {isOpen ? <ExpandLessIcon /> : <ExpandMoreIcon />}\r\n          </IconButton>\r\n        </Typography>\r\n      </Grid>\r\n      <Grid item md={7} />\r\n      {props.isDash && (\r\n        <Grid item md={1}>\r\n          <IconButton\r\n            style={{\r\n              padding: 0,\r\n              position: \"absolute\",\r\n              right: 10,\r\n              top: 10,\r\n            }}\r\n            onClick={() => props.onChart()}\r\n          >\r\n            <LaunchIcon />\r\n          </IconButton>\r\n        </Grid>\r\n      )}\r\n      {isOpen && (\r\n        <Grid item md={11}>\r\n          <Box\r\n            borderColor=\"primary.main\"\r\n            border={2}\r\n            borderRadius={5}\r\n            padding={2}\r\n          >\r\n            <Grid container justify=\"center\" alignItems=\"center\" spacing={2}>\r\n              <Grid item md={3}>\r\n                <Grid\r\n                  container\r\n                  justify=\"flex-start\"\r\n                  alignItems=\"center\"\r\n                  spacing={2}\r\n                >\r\n                  <Grid item md={5}>\r\n                    <Button\r\n                      id={props.type}\r\n                      name=\"2d_view\"\r\n                      variant=\"outlined\"\r\n                      size=\"small\"\r\n                      style={{\r\n                        backgroundColor:\r\n                          props.viewMethod !== \"3d_view\"\r\n                            ? grey[300]\r\n                            : \"inherit\",\r\n                      }}\r\n                      onClick={(e) => props.onViewMethod(e)}\r\n                      fullWidth\r\n                    >\r\n                      {\"2D\"}\r\n                    </Button>\r\n                  </Grid>\r\n                  <Grid item md={7} />\r\n                  <Grid item md={5}>\r\n                    <Button\r\n                      name=\"3d_view\"\r\n                      variant=\"outlined\"\r\n                      size=\"small\"\r\n                      style={{\r\n                        backgroundColor:\r\n                          props.viewMethod === \"3d_view\"\r\n                            ? grey[300]\r\n                            : \"inherit\",\r\n                      }}\r\n                      onClick={(e) => props.onViewMethod(e)}\r\n                      fullWidth\r\n                    >\r\n                      {\"3D\"}\r\n                    </Button>\r\n                  </Grid>\r\n                  <Grid item md={7} />\r\n                </Grid>\r\n              </Grid>\r\n              <Divider orientation=\"vertical\" flexItem />\r\n              <Grid item md={5} style={{ marginRight: 15 }}>\r\n                <FormControl\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                  className={classes.formControl}\r\n                  fullWidth\r\n                >\r\n                  <InputLabel id=\"demo-simple-select-outlined-label\">{`Inclination`}</InputLabel>\r\n                  <Select\r\n                    labelId=\"inclination-label\"\r\n                    id=\"inclination-label\"\r\n                    value={props.inc}\r\n                    onChange={(e) => props.onInc(e.target.value)}\r\n                    label=\"Inclination\"\r\n                    disabled={props.viewMethod === \"3d_view\"}\r\n                  >\r\n                    <MenuItem value=\"\" disabled>\r\n                      <em>{`None`}</em>\r\n                    </MenuItem>\r\n                    {props.incs.map((item: number) => (\r\n                      <MenuItem key={`inclination-${item}`} value={item}>\r\n                        {item}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              <Divider orientation=\"vertical\" flexItem />\r\n              <Grid item md={3}>\r\n                <Tooltip\r\n                  title={\r\n                    <Typography\r\n                      gutterBottom\r\n                      component=\"p\"\r\n                      variant=\"body1\"\r\n                      dangerouslySetInnerHTML={{\r\n                        __html: \"Reset 3D plot\",\r\n                      }}\r\n                    />\r\n                  }\r\n                  placement=\"top-start\"\r\n                  classes={{ tooltip: classes.tooltip }}\r\n                >\r\n                  <span>\r\n                    <Button\r\n                      id={props.type}\r\n                      name=\"Reset\"\r\n                      variant=\"outlined\"\r\n                      size=\"small\"\r\n                      disabled={props.viewMethod === \"2d_view\" ? true : false}\r\n                      onClick={() => props.resetPlot()}\r\n                      fullWidth\r\n                    >\r\n                      {\"Reset\"}\r\n                    </Button>\r\n                  </span>\r\n                </Tooltip>\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n        </Grid>\r\n      )}\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default OptionAddon;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport {\r\n  Grid,\r\n  Typography,\r\n  Card,\r\n  CardContent,\r\n  Slide,\r\n  Dialog,\r\n  DialogContent,\r\n  CssBaseline,\r\n  DialogTitle as MuiDialogTitle,\r\n  IconButton,\r\n} from \"@material-ui/core\";\r\nimport { TransitionProps } from \"@material-ui/core/transitions\";\r\nimport { Close as CloseIcon } from \"@material-ui/icons\";\r\n\r\nimport TwoViewSection from \"./two-view-section\";\r\nimport ThreeViewSection from \"./three-view-section\";\r\nimport ChartsLibsSection from \"./charts-libs-section\";\r\nimport HeaderSection from \"./header-section\";\r\nimport OptionAddon from \"../../../components/Button/OptionAddon\";\r\nimport {\r\n  getItems,\r\n  getSystems,\r\n  getSystemVersion,\r\n  getFileId,\r\n} from \"../../../API\";\r\nimport useStyles from \"../../../utils/styles\";\r\n\r\nconst INIT_FILE_ID = [{ id: 1620 }, { id: 1729 }];\r\n\r\nconst INIT_CHECK_STATUS = {\r\n  show_surface: true,\r\n  show_scatter: true,\r\n};\r\n\r\nconst viewStyle = {\r\n  paddingLeft: \"2rem\",\r\n  paddingRight: \"0.8rem\",\r\n};\r\n\r\nconst Transition = React.forwardRef(function Transition(\r\n  props: TransitionProps & { children?: React.ReactElement<any, any> },\r\n  ref: React.Ref<Function>\r\n) {\r\n  return <Slide direction=\"left\" ref={ref} {...props} />;\r\n});\r\n\r\nfunction AnalyzeRegressionSection(props: any) {\r\n  const [viewMethod, setViewMethod] = useState(\"2d_view\");\r\n  const [dataSet, setDataSet] = useState(\"as_needed_handoff\" as any);\r\n  const [systems, setSystems] = useState([] as any);\r\n  const [versions, setVersions] = useState([] as any);\r\n  const [dot, setDot] = useState({ x: props.alt, y: props.value } as any);\r\n  const [fileId, setFileId] = useState(INIT_FILE_ID);\r\n  const [checked, setChecked] = useState(INIT_CHECK_STATUS);\r\n  const [traces, setTraces] = useState({} as any);\r\n  const [reset, setReset] = useState(false);\r\n  const [count, setCount] = useState({ width: \"0px\", height: \"0px\" });\r\n  const [isChart, setIsChart] = useState(false);\r\n  const classes = useStyles();\r\n  const chartEl: any = useRef();\r\n  const plot_rows = props.data.plot_value;\r\n  const surface_rows: Array<any> = [];\r\n  const zAxisLabel = props.data.label;\r\n\r\n  useEffect(() => {\r\n    if (fileId.length > 0)\r\n      getItems({\r\n        dataType: props.dataType,\r\n        fileId: fileId,\r\n        version: props.version,\r\n      })\r\n        .then((res) => {\r\n          Object.keys(res.data).map((el) => {\r\n            let ctype: String = res.data[el][\"type\"];\r\n            let gaps: Array<any> = [];\r\n            let durations: Array<any> = [];\r\n            let avgs: Array<any> = [];\r\n\r\n            // Detect chart type and set Traces\r\n            if (ctype === \"line\") {\r\n              res.data[el][\"data\"].map((item: Array<any>, idx: number) => {\r\n                gaps.push(idx + 1);\r\n                durations.push(item[0]);\r\n                avgs.push(item[1]);\r\n              });\r\n\r\n              setTraces((prevState: any) => ({\r\n                ...prevState,\r\n                [el]: {\r\n                  xTraces: gaps,\r\n                  yTraces: durations,\r\n                  avgTraces: avgs,\r\n                  type: ctype,\r\n                  title: res.data[el][\"title\"],\r\n                },\r\n              }));\r\n            } else if (ctype === \"histogram\") {\r\n              setTraces((prevState: any) => ({\r\n                ...prevState,\r\n                [el]: {\r\n                  xTraces: res.data[el][\"data\"],\r\n                  type: ctype,\r\n                  title: res.data[el][\"title\"],\r\n                },\r\n              }));\r\n            }\r\n          });\r\n        })\r\n        .catch(() => {\r\n          setTraces({});\r\n        });\r\n  }, [props.dataType, props.version, fileId]);\r\n\r\n  useEffect(() => {\r\n    getSystems()\r\n      .then((res: any) => setSystems(res.data))\r\n      .catch((err: any) => setSystems([]));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (props.inclination !== \"\") {\r\n      const params = {\r\n        user_altitude: dot.x,\r\n        user_inclination: props.inclination,\r\n        system: props.system,\r\n        version: props.version,\r\n      };\r\n\r\n      getFileId(params)\r\n        .then((res: any) => setFileId(res.data))\r\n        .catch((err: any) => setFileId([]));\r\n    }\r\n  }, [props.inclination]);\r\n\r\n  useEffect(() => {\r\n    if (props.system !== \"\") {\r\n      getSystemVersion({ system: props.system })\r\n        .then((res: any) => setVersions(res.data))\r\n        .catch((err: any) => setVersions([]));\r\n    }\r\n  }, [props.system]);\r\n\r\n  useEffect(() => {\r\n    setDot({\r\n      x: props.data.plot_value[0].altitude,\r\n      y: props.data.plot_value[0].value,\r\n    });\r\n  }, [props.data]);\r\n\r\n  useEffect(() => {\r\n    if (chartEl) {\r\n      let size = window.getComputedStyle(chartEl.current);\r\n      setCount({ width: size.width, height: size.height });\r\n    }\r\n  }, [chartEl, traces]);\r\n\r\n  const handleCheck = (event: any) => {\r\n    const { name, checked } = event.currentTarget;\r\n    setChecked((prevState) => ({ ...prevState, [name]: checked }));\r\n  };\r\n\r\n  const handleDataSetClick = (event: any) => {\r\n    event.preventDefault();\r\n    const { id, name } = event.currentTarget;\r\n\r\n    setDataSet(id);\r\n    props.onDataType(name);\r\n  };\r\n\r\n  const handleClick = (event: any) => {\r\n    if (event) {\r\n      const params = {\r\n        user_altitude: event.points[0].x,\r\n        user_inclination: props.inc,\r\n        system: props.system,\r\n        version: props.version,\r\n      };\r\n\r\n      setDot({ x: event.points[0].x, y: event.points[0].y });\r\n      getFileId(params)\r\n        .then((res: any) => setFileId(res.data))\r\n        .catch((err: any) => setFileId([]));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <DialogContent\r\n        dividers={true}\r\n        ref={chartEl}\r\n        style={{ paddingRight: 0, paddingLeft: 0, overflowX: \"hidden\" }}\r\n      >\r\n        <Grid container justify=\"center\" alignItems=\"center\" spacing={2}>\r\n          <HeaderSection\r\n            system={props.system}\r\n            systems={systems}\r\n            version={props.version}\r\n            versions={versions}\r\n            dataSet={dataSet}\r\n            onSystem={(value: any) => props.onSystem(value)}\r\n            onVersion={(value: any) => props.onVersion(value)}\r\n            onClick={handleDataSetClick}\r\n          />\r\n          <Grid item md={6} style={viewStyle}>\r\n            <Card style={{ height: `calc(${count.height} * 0.4)` }}>\r\n              <CardContent>\r\n                <Grid container justify=\"center\" spacing={2}>\r\n                  <Grid\r\n                    item\r\n                    md={12}\r\n                    style={{ textAlign: \"center\", position: \"relative\" }}\r\n                  >\r\n                    <Typography\r\n                      style={{\r\n                        fontSize: 15,\r\n                        fontWeight: \"bold\",\r\n                      }}\r\n                    >\r\n                      {dataSet === \"as_needed_handoff\"\r\n                        ? `RF Coverage (%)`\r\n                        : `No Coverage (%)`}\r\n                      {` vs. User Inclination`}\r\n                    </Typography>\r\n                    <OptionAddon\r\n                      source={props.data}\r\n                      dataSource={props.source}\r\n                      checked={checked}\r\n                      viewMethod={viewMethod}\r\n                      inc={props.inclination}\r\n                      incs={props.incs}\r\n                      isDash={true}\r\n                      onChecked={handleCheck}\r\n                      onChart={() => setIsChart(true)}\r\n                      resetPlot={() => setReset(!reset)}\r\n                      onInc={(value: any) => props.onInc(value)}\r\n                      onViewMethod={(e: any) =>\r\n                        setViewMethod(e.currentTarget.name)\r\n                      }\r\n                    />\r\n                  </Grid>\r\n                  {viewMethod === \"3d_view\" ? (\r\n                    <Grid item md={12}>\r\n                      <ThreeViewSection\r\n                        data={props.source}\r\n                        equation={props.equation}\r\n                        maxAltitude={props.maxAltitude}\r\n                        alt={props.alt}\r\n                        inc={\r\n                          props.inclination !== \"\"\r\n                            ? props.inclination\r\n                            : props.inc\r\n                        }\r\n                        value={props.value}\r\n                        reset={reset}\r\n                        isLegend={false}\r\n                        isSub={true}\r\n                        plot_rows={props.source.plot_value}\r\n                        surface_rows={surface_rows}\r\n                        zAxisLabel={zAxisLabel}\r\n                        checked={checked}\r\n                        size={count}\r\n                        isChart={false}\r\n                        onClick={handleClick}\r\n                      />\r\n                    </Grid>\r\n                  ) : (\r\n                    <Grid item md={12}>\r\n                      <TwoViewSection\r\n                        data={props.data}\r\n                        equation={props.equation}\r\n                        maxAltitude={props.maxAltitude}\r\n                        alt={props.alt}\r\n                        inc={\r\n                          props.inclination !== \"\"\r\n                            ? props.inclination\r\n                            : props.inc\r\n                        }\r\n                        value={props.value}\r\n                        isLegend={false}\r\n                        isSub={true}\r\n                        plot_rows={plot_rows}\r\n                        surface_rows={surface_rows}\r\n                        yAxisLabel={zAxisLabel}\r\n                        dot={dot}\r\n                        size={count}\r\n                        checked={checked}\r\n                        isChart={false}\r\n                        onClick={handleClick}\r\n                      />\r\n                    </Grid>\r\n                  )}\r\n                </Grid>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          {fileId.length === 0 && <Grid item md={6} />}\r\n          {Object.keys(traces).length > 0 && (\r\n            <ChartsLibsSection\r\n              traces={traces}\r\n              dataSet={dataSet}\r\n              dataType={props.dataType}\r\n              size={count}\r\n            />\r\n          )}\r\n        </Grid>\r\n      </DialogContent>\r\n      {isChart && (\r\n        <Dialog\r\n          open={isChart}\r\n          TransitionComponent={Transition}\r\n          onClose={() => setIsChart(true)}\r\n          PaperProps={{\r\n            style: {\r\n              height: Number(count.width.replace(\"px\", \"\")) * 0.42,\r\n              maxWidth: Number(count.width.replace(\"px\", \"\")) * 0.6,\r\n              minWidth: Number(count.width.replace(\"px\", \"\")) * 0.6,\r\n            },\r\n          }}\r\n        >\r\n          <CssBaseline />\r\n          <MuiDialogTitle>\r\n            <Typography component=\"strong\" variant=\"h6\">\r\n              {dataSet === \"as_needed_handoff\"\r\n                ? `RF Coverage (%)`\r\n                : `No Coverage (%)`}\r\n              {` vs. User Inclination`}\r\n            </Typography>\r\n            <IconButton\r\n              aria-label=\"Close\"\r\n              className={classes.dialogCloseBtn}\r\n              onClick={() => setIsChart(false)}\r\n            >\r\n              <CloseIcon />\r\n            </IconButton>\r\n          </MuiDialogTitle>\r\n          <hr />\r\n          <DialogContent>\r\n            {viewMethod === \"3d_view\" ? (\r\n              <Grid item md={12}>\r\n                <ThreeViewSection\r\n                  data={props.source}\r\n                  equation={props.equation}\r\n                  maxAltitude={props.maxAltitude}\r\n                  alt={props.alt}\r\n                  inc={props.inclination !== \"\" ? props.inclination : props.inc}\r\n                  value={props.value}\r\n                  reset={reset}\r\n                  isLegend={false}\r\n                  isSub={true}\r\n                  plot_rows={props.source.plot_value}\r\n                  surface_rows={surface_rows}\r\n                  zAxisLabel={zAxisLabel}\r\n                  checked={checked}\r\n                  size={count}\r\n                  isChart={true}\r\n                  onClick={handleClick}\r\n                />\r\n              </Grid>\r\n            ) : (\r\n              <Grid item md={12}>\r\n                <TwoViewSection\r\n                  data={props.data}\r\n                  equation={props.equation}\r\n                  maxAltitude={props.maxAltitude}\r\n                  alt={props.alt}\r\n                  inc={props.inclination !== \"\" ? props.inclination : props.inc}\r\n                  value={props.value}\r\n                  isLegend={false}\r\n                  isSub={true}\r\n                  plot_rows={plot_rows}\r\n                  surface_rows={surface_rows}\r\n                  yAxisLabel={zAxisLabel}\r\n                  dot={dot}\r\n                  size={count}\r\n                  checked={checked}\r\n                  isChart={true}\r\n                  onClick={handleClick}\r\n                />\r\n              </Grid>\r\n            )}\r\n          </DialogContent>\r\n        </Dialog>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default AnalyzeRegressionSection;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport {\r\n  CssBaseline,\r\n  Slide,\r\n  Typography,\r\n  IconButton,\r\n  Dialog,\r\n  DialogTitle as MuiDialogTitle,\r\n} from \"@material-ui/core\";\r\nimport { TransitionProps } from \"@material-ui/core/transitions\";\r\nimport { Close as CloseIcon } from \"@material-ui/icons\";\r\n\r\nimport { getCartItems } from \"../../API\";\r\nimport useStyles from \"../../utils/styles\";\r\nimport AnalyzeRegressionSection from \"./analyze-regression-section\";\r\n\r\nconst INIT_PARAMS = {\r\n  altitude: 300,\r\n  availabilityThreshold: 0.999,\r\n  dataVolumeNeed: 0.1,\r\n  gapThreshold: 6,\r\n  inclination: 0,\r\n  latitude: 30,\r\n  launchYear: 2030,\r\n  longitude: 30,\r\n  navAccuracyNeed: 20,\r\n  powerAmplifier: 1,\r\n  value: 100,\r\n};\r\n\r\nconst Transition = React.forwardRef(function Transition(\r\n  props: TransitionProps & { children?: React.ReactElement<any, any> },\r\n  ref: React.Ref<Function>\r\n) {\r\n  return <Slide direction=\"left\" ref={ref} {...props} />;\r\n});\r\n\r\nfunction CartPanel(props: any) {\r\n  const [source, setSource] = useState({} as any);\r\n  const [dataSource, setDataSource] = useState({} as any);\r\n  const [system, setSystem] = useState(5 as any);\r\n  const [version, setVersion] = useState(3 as any);\r\n  const [inclination, setInclination] = useState(\"\");\r\n  const [incs, setIncs] = useState([] as any);\r\n  const [dataType, setDataType] = useState(\"coverage\" as any);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [terrestrial, setTerrestrial] = useState({});\r\n  const [maxAltitude, setMaxAltitude] = useState(0);\r\n  const [coefficients, setCoefficients] = useState({} as any);\r\n  const [text, setText] = useState(\"\");\r\n  const deepDive = \"system1/coverage\";\r\n  const metric = deepDive.split(\"/\")[1];\r\n  const missionType = \"orbital\";\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    setText(\"\");\r\n    getCartItems({\r\n      type: missionType,\r\n      system: system,\r\n      version: version,\r\n      dataType,\r\n    })\r\n      .then((res: any) => {\r\n        setTerrestrial(res.data.terrestrial);\r\n        setSource(res.data.data.data);\r\n        setDataSource(res.data.data.data);\r\n        setMaxAltitude(res.data.data.maxAltitude);\r\n        setCoefficients(res.data.data.coefficients);\r\n        setText(res.data.data.text);\r\n\r\n        if (Object.keys(res.data.data.data).includes(\"plot_value\")) {\r\n          let tmp = res.data.data.data.plot_value.map(\r\n            (item: any) => item[\"inclination\"]\r\n          );\r\n          let uniqueArray: Array<any> = [...new Set(tmp)];\r\n          setIncs(uniqueArray.sort());\r\n        }\r\n\r\n        // FIXME: there is no real data for it.\r\n        //\r\n        // setText(\r\n        //   props.equationsTex[system.replace(\" \", \"_\").toLowerCase()][metric](\r\n        //     data[\"coefficients\"][metric]\r\n        //   )\r\n        // );\r\n      })\r\n      .then(() => {\r\n        setIsLoading(false);\r\n      });\r\n  }, [system, version, dataType]);\r\n\r\n  useEffect(() => {\r\n    if (Object.keys(dataSource).includes(\"plot_value\")) {\r\n      let data = dataSource.plot_value.filter(\r\n        (item: any) => item.inclination === inclination\r\n      );\r\n      setSource((prevState: any) => ({ ...prevState, plot_value: data }));\r\n    }\r\n  }, [inclination]);\r\n\r\n  const equation = (inc: any, alt: any, metric: string) => {\r\n    // FIXME: activate in integration of cart.\r\n    //\r\n    // const altitude = parseFloat(alt);\r\n    // const inclination = parseFloat(inc);\r\n\r\n    // const coefs = coefficients[metric];\r\n    // const eqn = props.equations[system.replace(\" \", \"_\").toLowerCase()][metric];\r\n\r\n    // return eqn(coefs, altitude, inclination);\r\n    return inc;\r\n  };\r\n\r\n  return (\r\n    <Dialog\r\n      open={props.isOpen}\r\n      TransitionComponent={Transition}\r\n      onClose={() => props.onClose()}\r\n      classes={{ paper: classes.dashDialogDeep }}\r\n    >\r\n      <CssBaseline />\r\n      <MuiDialogTitle>\r\n        <Typography component=\"strong\" variant=\"h6\">\r\n          {\"Cart Integration Panel\"}\r\n        </Typography>\r\n        <IconButton\r\n          aria-label=\"Close\"\r\n          className={classes.dialogCloseBtn}\r\n          onClick={() => props.onClose()}\r\n        >\r\n          <CloseIcon />\r\n        </IconButton>\r\n      </MuiDialogTitle>\r\n      {!isLoading &&\r\n        (missionType === \"orbital\" ? (\r\n          <AnalyzeRegressionSection\r\n            equation={(x: any, y: any, m: any) => equation(x, y, m)}\r\n            maxAltitude={maxAltitude}\r\n            alt={INIT_PARAMS.altitude}\r\n            inc={INIT_PARAMS.inclination}\r\n            value={INIT_PARAMS.value}\r\n            data={source}\r\n            source={dataSource}\r\n            dataType={dataType}\r\n            selectedItem={metric}\r\n            text={text}\r\n            system={system}\r\n            version={version}\r\n            inclination={inclination}\r\n            incs={incs}\r\n            onInc={(value: any) => setInclination(value)}\r\n            onSystem={(value: any) => setSystem(value)}\r\n            onVersion={(value: any) => setVersion(value)}\r\n            onDataType={(value: any) => setDataType(value)}\r\n          />\r\n        ) : (\r\n          <></>\r\n        ))}\r\n    </Dialog>\r\n  );\r\n}\r\n\r\nexport default CartPanel;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\nimport { useWindowSize } from \"../../../../utils/util\";\r\n\r\nfunction TwoViewSection(props: any) {\r\n  const [checked, setChecked] = useState(props.checked);\r\n  const [config, setConfig] = useState([]);\r\n  const size: any = useWindowSize();\r\n  const plot_rows = props.plot_rows;\r\n  const surface_rows = props.surface_rows;\r\n\r\n  useEffect(() => {\r\n    setChecked(props.checked);\r\n  }, [props.checked]);\r\n\r\n  const unpack = (rows: Array<any>, key: any) => {\r\n    return rows.map(function (row: any) {\r\n      return row[key];\r\n    });\r\n  };\r\n  \r\n  useEffect(() => {\r\n    let configData: any = [];\r\n    const inclination = parseInt(props.inc);\r\n    const new_plot_rows = plot_rows.filter(\r\n      (row: any) => row.inclination === inclination\r\n    );\r\n    const new_surface_rows = surface_rows.filter(\r\n      (row: any) => row.inclination === inclination\r\n    );\r\n    if (checked.show_surface === true && checked.show_scatter === true) {\r\n      configData = [\r\n        {\r\n          x: unpack(new_plot_rows, \"altitude\"),\r\n          y: unpack(new_plot_rows, \"value\"),\r\n          name: \"Model data\",\r\n          mode: \"markers\",\r\n          type: \"scatter\",\r\n          color: \"rgb(23, 190, 207)\",\r\n        },\r\n        {\r\n          x: unpack(new_surface_rows, \"altitude\"),\r\n          y: unpack(new_surface_rows, \"value\"),\r\n          name: \"Model curve\",\r\n          mode: \"lines\",\r\n          line: {\r\n            color: \"rgb(252, 154, 7)\",\r\n          },\r\n        },\r\n        {\r\n          x: [props.dot.x],\r\n          y: [props.dot.y],\r\n          name: \"User\",\r\n          mode: \"markers\",\r\n          type: \"scatter\",\r\n          marker: {\r\n            color: \"red\",\r\n            size: 10,\r\n          },\r\n        },\r\n      ];\r\n    } else if (\r\n      checked.show_surface === false &&\r\n      checked.show_scatter === true\r\n    ) {\r\n      configData = [\r\n        {\r\n          x: unpack(new_plot_rows, \"altitude\"),\r\n          y: unpack(new_plot_rows, \"value\"),\r\n          name: \"Model data\",\r\n          mode: \"markers\",\r\n          type: \"scatter\",\r\n          color: \"rgb(23, 190, 207)\",\r\n        },\r\n        {\r\n          x: [],\r\n          y: [],\r\n          mode: \"markers\",\r\n          type: \"scatter\",\r\n        },\r\n        {\r\n          x: [props.dot.x],\r\n          y: [props.dot.y],\r\n          name: \"User\",\r\n          mode: \"markers\",\r\n          type: \"scatter\",\r\n          marker: {\r\n            color: \"red\",\r\n            size: 10,\r\n          },\r\n        },\r\n      ];\r\n    } else if (\r\n      checked.show_surface === true &&\r\n      checked.show_scatter === false\r\n    ) {\r\n      configData = [\r\n        {\r\n          x: unpack(new_surface_rows, \"altitude\"),\r\n          y: unpack(new_surface_rows, \"value\"),\r\n          name: \"Model curve\",\r\n          mode: \"lines\",\r\n          line: {\r\n            color: \"rgb(252, 154, 7)\",\r\n          },\r\n        },\r\n        {\r\n          x: [],\r\n          y: [],\r\n          mode: \"markers\",\r\n          type: \"scatter\",\r\n        },\r\n        {\r\n          x: [props.dot.x],\r\n          y: [props.dot.y],\r\n          name: \"User\",\r\n          mode: \"markers\",\r\n          type: \"scatter\",\r\n          marker: {\r\n            color: \"red\",\r\n            size: 10,\r\n          },\r\n        },\r\n      ];\r\n    } else if (\r\n      checked.show_surface === false &&\r\n      checked.show_scatter === false\r\n    ) {\r\n      configData = [\r\n        {\r\n          x: [],\r\n          y: [],\r\n          mode: \"lines\",\r\n        },\r\n        {\r\n          x: [],\r\n          y: [],\r\n          mode: \"markers\",\r\n          type: \"scatter\",\r\n        },\r\n        {\r\n          x: [props.dot.x],\r\n          y: [props.dot.y],\r\n          name: \"User\",\r\n          mode: \"markers\",\r\n          type: \"scatter\",\r\n          marker: {\r\n            color: \"red\",\r\n            size: 10,\r\n          },\r\n        },\r\n      ];\r\n    }\r\n\r\n    setConfig(configData);\r\n  }, [checked, plot_rows, surface_rows, props.inc]);\r\n\r\n  return (\r\n    <Plot\r\n      data={config}\r\n      layout={{\r\n        autosize: true,\r\n        showlegend: false,\r\n        hovermode: \"closest\",\r\n        width: size * 0.37,\r\n        height: size * 0.37,\r\n        margin: {\r\n          l: 60,\r\n          r: 15,\r\n          b: 35,\r\n          t: 15,\r\n        },\r\n        xaxis: {\r\n          title: `Altitude (km), Inclination=${props.inc} deg`,\r\n          type: \"linear\",\r\n          zeroline: false,\r\n        },\r\n        yaxis: {\r\n          title: props.yAxisLabel,\r\n          type: \"linear\",\r\n          zeroline: false,\r\n        },\r\n      }}\r\n      onHover={(e: any) => (e.event.target.style.cursor = \"pointer\")}\r\n      onUnhover={(e: any) => (e.event.target.style.cursor = \"crosshair\")}\r\n      onClick={(e) => props.onClick(e)}\r\n      onDoubleClick={() => props.onClick()}\r\n    />\r\n  );\r\n}\r\n\r\nexport default TwoViewSection;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Plot from \"react-plotly.js\";\r\nimport { useWindowSize } from \"../../../../utils/util\";\r\n\r\nfunction ThreeViewSection(props: any) {\r\n  const [checked, setChecked] = useState(props.checked);\r\n  const [reset, setReset] = useState(false);\r\n  const [config, setConfig] = useState([]);\r\n  const size: any = useWindowSize();\r\n  const plot_rows = props.plot_rows;\r\n  const surface_rows = props.surface_rows;\r\n\r\n  useEffect(() => {\r\n    setReset(!reset);\r\n  }, [props.reset]);\r\n\r\n  useEffect(() => {\r\n    setChecked(props.checked);\r\n  }, [props.checked]);\r\n\r\n  const unpack = (rows: Array<any>, key: any) => {\r\n    return rows.map(function (row) {\r\n      return row[key];\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    let configData: any = [];\r\n    if (checked.show_surface === true && checked.show_scatter === true) {\r\n      configData = [\r\n        {\r\n          x: unpack(plot_rows, \"altitude\"),\r\n          y: unpack(plot_rows, \"inclination\"),\r\n          z: unpack(plot_rows, \"value\"),\r\n          name: \"Model data\",\r\n          mode: \"markers\",\r\n          type: \"scatter3d\",\r\n          opacity: 1,\r\n          marker: {\r\n            color: \"rgb(23, 190, 207)\",\r\n            size: 2,\r\n          },\r\n        },\r\n        {\r\n          x: unpack(surface_rows, \"altitude\"),\r\n          y: unpack(surface_rows, \"inclination\"),\r\n          z: unpack(surface_rows, \"value\"),\r\n          name: \"Model surface\",\r\n          opacity: 0.3,\r\n          type: \"mesh3d\",\r\n          color: \"rgb(252, 154, 7)\",\r\n        },\r\n        {\r\n          x: [props.alt],\r\n          y: [props.inc],\r\n          z: [props.value],\r\n          name: \"User\",\r\n          mode: \"markers\",\r\n          type: \"scatter3d\",\r\n          opacity: 1,\r\n          marker: {\r\n            color: \"red\",\r\n            size: 5,\r\n          },\r\n        },\r\n      ];\r\n    } else if (\r\n      checked.show_surface === false &&\r\n      checked.show_scatter === true\r\n    ) {\r\n      configData = [\r\n        {\r\n          x: unpack(plot_rows, \"altitude\"),\r\n          y: unpack(plot_rows, \"inclination\"),\r\n          z: unpack(plot_rows, \"value\"),\r\n          name: \"Model data\",\r\n          mode: \"markers\",\r\n          type: \"scatter3d\",\r\n          opacity: 1,\r\n          marker: {\r\n            color: \"rgb(23, 190, 207)\",\r\n            size: 2,\r\n          },\r\n        },\r\n        {\r\n          x: [props.alt],\r\n          y: [props.inc],\r\n          z: [props.value],\r\n          name: \"User\",\r\n          mode: \"markers\",\r\n          type: \"scatter3d\",\r\n          opacity: 1,\r\n          marker: {\r\n            color: \"red\",\r\n            size: 5,\r\n          },\r\n        },\r\n      ];\r\n    } else if (\r\n      checked.show_surface === true &&\r\n      checked.show_scatter === false\r\n    ) {\r\n      configData = [\r\n        {\r\n          x: unpack(surface_rows, \"altitude\"),\r\n          y: unpack(surface_rows, \"inclination\"),\r\n          z: unpack(surface_rows, \"value\"),\r\n          name: \"Model surface\",\r\n          opacity: 0.3,\r\n          type: \"mesh3d\",\r\n          color: \"rgb(252, 154, 7)\",\r\n        },\r\n        {\r\n          x: [props.alt],\r\n          y: [props.inc],\r\n          z: [props.value],\r\n          name: \"User\",\r\n          mode: \"markers\",\r\n          type: \"scatter3d\",\r\n          opacity: 1,\r\n          marker: {\r\n            color: \"red\",\r\n            size: 5,\r\n          },\r\n        },\r\n      ];\r\n    } else if (\r\n      checked.show_surface === false &&\r\n      checked.show_scatter === false\r\n    ) {\r\n      configData = [\r\n        {\r\n          x: [],\r\n          y: [],\r\n          z: [],\r\n          type: \"mesh3d\",\r\n        },\r\n        {\r\n          x: [],\r\n          y: [],\r\n          z: [],\r\n          mode: \"markers\",\r\n          type: \"scatter3d\",\r\n        },\r\n        {\r\n          x: [parseFloat(props.alt)],\r\n          y: [parseFloat(props.inc)],\r\n          z: [parseFloat(props.value)],\r\n          name: \"User\",\r\n          mode: \"markers\",\r\n          type: \"scatter3d\",\r\n          opacity: 1,\r\n          marker: {\r\n            color: \"red\",\r\n            size: 5,\r\n          },\r\n        },\r\n      ];\r\n    }\r\n\r\n    setConfig(configData);\r\n  }, [checked, plot_rows, surface_rows, reset]);\r\n\r\n  return (\r\n    <Plot\r\n      data={config}\r\n      layout={{\r\n        autosize: true,\r\n        width: size * 0.37,\r\n        height: size * 0.37,\r\n        margin: {\r\n          l: 0,\r\n          r: 0,\r\n          b: 0,\r\n          t: 0,\r\n        },\r\n        scene: {\r\n          aspectratio: {\r\n            x: 0.6,\r\n            y: 0.6,\r\n            z: 0.6,\r\n          },\r\n          camera: {\r\n            center: {\r\n              x: 0,\r\n              y: 0,\r\n              z: 0,\r\n            },\r\n            eye: {\r\n              x: 0.9,\r\n              y: 0.9,\r\n              z: 0.9,\r\n            },\r\n            up: {\r\n              x: 0,\r\n              y: 0,\r\n              z: 1,\r\n            },\r\n          },\r\n          xaxis: {\r\n            title: \"Altitude (km)\",\r\n            type: \"linear\",\r\n            range: [Math.max(...unpack(surface_rows, \"altitude\")), 0],\r\n            zeroline: false,\r\n          },\r\n          yaxis: {\r\n            title: \"Inclination (deg)\",\r\n            type: \"linear\",\r\n            range: [90, 0],\r\n            zeroline: false,\r\n          },\r\n          zaxis: {\r\n            title: props.zAxisLabel,\r\n            type: \"linear\",\r\n            range: [\r\n              Math.min(...unpack(surface_rows, \"value\")),\r\n              Math.max(...unpack(surface_rows, \"value\")),\r\n            ],\r\n            zeroline: false,\r\n          },\r\n        },\r\n        showlegend: false,\r\n      }}\r\n      onClick={(e) => props.onClick(e)}\r\n      onDoubleClick={() => props.onClick()}\r\n    />\r\n  );\r\n}\r\n\r\nexport default ThreeViewSection;\r\n","import React from \"react\";\r\nimport {\r\n  Grid,\r\n  IconButton,\r\n  Divider,\r\n} from \"@material-ui/core\";\r\nimport RemoveCircleOutlineIcon from \"@material-ui/icons/RemoveCircleOutline\";\r\n\r\nfunction MinusAddon(props: any) {\r\n  return (\r\n    <Grid item md={12}>\r\n      <Grid container justify=\"center\" alignItems=\"center\">\r\n        <Grid item style={{ width: \"4%\" }}>\r\n          <IconButton onClick={() => props.onSelected(props.id)}>\r\n            <RemoveCircleOutlineIcon />\r\n          </IconButton>\r\n        </Grid>\r\n        <Grid item md={11} style={{ width: \"96%\" }}>\r\n          <Divider />\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default MinusAddon;\r\n","import React from \"react\";\r\nimport { Grid, IconButton, Divider } from \"@material-ui/core\";\r\nimport AddCircleOutlineIcon from \"@material-ui/icons/AddCircleOutline\";\r\nimport Selection from \"../Select\";\r\n\r\nfunction PlusAddon(props: any) {\r\n  return (\r\n    <Grid item md={12}>\r\n      <Grid container justify=\"center\" alignItems=\"center\">\r\n        <Grid item style={{ width: \"4%\" }}>\r\n          <IconButton onClick={(e) => props.onAnchorEl(e.currentTarget)}>\r\n            <AddCircleOutlineIcon />\r\n          </IconButton>\r\n          <Selection\r\n            selected={props.selected}\r\n            anchorEl={props.anchorEl}\r\n            onAnchorEl={(value: any) => props.onAnchorEl(value)}\r\n            onSelected={(value: any) => props.onSelected(value)}\r\n          />\r\n        </Grid>\r\n        <Grid item md={11} style={{ width: \"96%\" }}>\r\n          <Divider />\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default PlusAddon;\r\n","import React from \"react\";\r\nimport {\r\n  Grid,\r\n  Typography,\r\n  Table,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  TableBody,\r\n} from \"@material-ui/core\";\r\n\r\nimport LineChartSection from \"../../../../chart-panel/line-chart-section\";\r\nimport HistogramChartSection from \"../../../../chart-panel/histogram-chart-section\";\r\nimport BoxChartSection from \"../../../../chart-panel/box-chart-section\";\r\n\r\nfunction createData(name: String, value: String) {\r\n  return { name, value };\r\n}\r\n\r\nconst rows = [\r\n  createData(\"Average (sec)\", \"xx\"),\r\n  createData(\"Time-Averaged Gap\", \"xx\"),\r\n  createData(\"Median (sec)\", \"xx\"),\r\n  createData(\"Maximum (minutes)\", \"xx\"),\r\n  createData(\"Minimum (sec)\", \"xx\"),\r\n  createData(\"Average # Gaps Per Orbit\", \"xx\"),\r\n  createData(\"Average # Gaps Per Day\", \"xx\"),\r\n];\r\n\r\nfunction SelectedChartSection(props: any) {\r\n  return (\r\n    <>\r\n      {props.id === 0 && (\r\n        <Grid container justify=\"center\" alignItems=\"center\">\r\n          <Grid item md={10} style={{ textAlign: \"center\" }}>\r\n            <Typography variant=\"h6\">{`Key Metrics`}</Typography>\r\n          </Grid>\r\n          <Grid item md={10}>\r\n            <Table aria-label=\"simple table\" size=\"small\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>{`Gap Statistic`}</TableCell>\r\n                  <TableCell>{`Value`}</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {rows.map((row: any) => (\r\n                  <TableRow key={row.name}>\r\n                    <TableCell component=\"th\" scope=\"row\">\r\n                      {row.name}\r\n                    </TableCell>\r\n                    <TableCell>{row.value}</TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </Grid>\r\n        </Grid>\r\n      )}\r\n      {props.id === 1 && (\r\n        <LineChartSection source={props.data} dataType={props.dataType} />\r\n      )}\r\n      {props.id === 2 && <HistogramChartSection {...props.data} />}\r\n      {props.id === 3 && <BoxChartSection {...props.data} />}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SelectedChartSection;\r\n","import React, { useState } from \"react\";\r\nimport { Grid, Card, CardContent } from \"@material-ui/core\";\r\n\r\nimport MinusAddon from \"../../../../components/Button/MinusAddon\";\r\nimport PlusAddon from \"../../../../components/Button/PlusAddon\";\r\nimport SelectedChartSection from \"./selected-chart-section\";\r\nimport * as Constants from \"../../../../constants\";\r\n\r\nfunction ChartsLibsSection(props: any) {\r\n  const [selected, setSelected] = useState([1, 2, 3] as any);\r\n  const [anchorEl, setAnchorEl] = useState(null as any);\r\n\r\n  const handleSelected = (id: any, type: string) => {\r\n    if (!selected.includes(id) && type === \"add\") {\r\n      setSelected((prevState: any) => [...prevState, id]);\r\n    } else if (type === \"remove\") {\r\n      setSelected(selected.filter((item: any) => item !== id));\r\n    }\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {selected.length === 0 && (\r\n        <PlusAddon\r\n          type={0}\r\n          selected={selected}\r\n          anchorEl={anchorEl}\r\n          onAnchorEl={(value: any) => setAnchorEl(value)}\r\n          onSelected={(value: any) => handleSelected(value, \"add\")}\r\n        />\r\n      )}\r\n      {selected.map((item: any, idx: number) => {\r\n        let dset = Constants.MENU_ITEMS[props.dataSet][item].dataset;\r\n        return (\r\n          <React.Fragment key={item}>\r\n            <MinusAddon\r\n              id={item}\r\n              type={0}\r\n              selected={selected}\r\n              anchorEl={anchorEl}\r\n              onAnchorEl={(value: any) => setAnchorEl(value)}\r\n              onSelected={(value: any) => handleSelected(value, \"remove\")}\r\n            />\r\n            <Grid item md={12}>\r\n              <Card style={{ marginLeft: \"2.5rem\", marginRight: \"2.5rem\" }}>\r\n                <CardContent>\r\n                  {props.traces[dset] &&\r\n                    Object.keys(props.traces[dset]).length > 0 && (\r\n                      <SelectedChartSection\r\n                        id={item}\r\n                        data={props.traces[dset]}\r\n                        dataType={props.dataType}\r\n                      />\r\n                    )}\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n            {idx === selected.length - 1 && (\r\n              <PlusAddon\r\n                type={0}\r\n                selected={selected}\r\n                anchorEl={anchorEl}\r\n                onAnchorEl={(value: any) => setAnchorEl(value)}\r\n                onSelected={(value: any) => handleSelected(value, \"add\")}\r\n              />\r\n            )}\r\n          </React.Fragment>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ChartsLibsSection;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport {\r\n  Grid,\r\n  Typography,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Card,\r\n  CardContent,\r\n} from \"@material-ui/core\";\r\nimport { grey } from \"@material-ui/core/colors\";\r\nimport { ToggleButton, ToggleButtonGroup } from \"@material-ui/lab\";\r\n\r\nimport TwoViewSection from \"./two-view-section\";\r\nimport ThreeViewSection from \"./three-view-section\";\r\nimport ChartsLibsSection from \"./charts-libs-section\";\r\nimport OptionAddon from \"../../../components/Button/OptionAddon\";\r\nimport {\r\n  getItems,\r\n  getSystems,\r\n  getSystemVersion,\r\n  getFileId,\r\n} from \"../../../API\";\r\nimport useStyles from \"../../../utils/styles\";\r\n\r\nconst INIT_CHECK_STATUS = {\r\n  show_surface: true,\r\n  show_scatter: true,\r\n};\r\n\r\nconst INIT_FILE_ID = [{ id: 1620 }, { id: 1729 }];\r\n\r\nfunction AnalyzeRegressionSection(props: any) {\r\n  const [viewMethod, setViewMethod] = useState(\"2d_view\");\r\n  const [dataSet, setDataSet] = useState(\"as_needed_handoff\" as any);\r\n  const [systems, setSystems] = useState([] as any);\r\n  const [versions, setVersions] = useState([] as any);\r\n  const [dot, setDot] = useState({ x: props.alt, y: props.value } as any);\r\n  const [fileId, setFileId] = useState(INIT_FILE_ID);\r\n  const [checked, setChecked] = useState(INIT_CHECK_STATUS);\r\n  const [traces, setTraces] = useState({} as any);\r\n  const [reset, setReset] = useState(false);\r\n  const [selected, setSelected] = useState(false);\r\n  const classes = useStyles();\r\n  const plot_rows = props.data.plot_value;\r\n  const surface_rows: Array<any> = [];\r\n  const zAxisLabel = props.data.label;\r\n\r\n  useEffect(() => {\r\n    if (fileId.length > 0)\r\n      getItems({\r\n        dataType: props.dataType,\r\n        fileId: fileId,\r\n        version: props.version,\r\n      })\r\n        .then((res) => {\r\n          Object.keys(res.data).map((el) => {\r\n            let ctype: String = res.data[el][\"type\"];\r\n            let gaps: Array<any> = [];\r\n            let durations: Array<any> = [];\r\n            let avgs: Array<any> = [];\r\n\r\n            // Detect chart type and set Traces\r\n            if (ctype === \"line\") {\r\n              res.data[el][\"data\"].map((item: Array<any>, idx: number) => {\r\n                gaps.push(idx + 1);\r\n                durations.push(item[0]);\r\n                avgs.push(item[1]);\r\n              });\r\n\r\n              setTraces((prevState: any) => ({\r\n                ...prevState,\r\n                [el]: {\r\n                  xTraces: gaps,\r\n                  yTraces: durations,\r\n                  avgTraces: avgs,\r\n                  type: ctype,\r\n                  title: res.data[el][\"title\"],\r\n                },\r\n              }));\r\n            } else if (ctype === \"histogram\") {\r\n              setTraces((prevState: any) => ({\r\n                ...prevState,\r\n                [el]: {\r\n                  xTraces: res.data[el][\"data\"],\r\n                  type: ctype,\r\n                  title: res.data[el][\"title\"],\r\n                },\r\n              }));\r\n            }\r\n          });\r\n        })\r\n        .catch(() => {\r\n          setTraces({});\r\n        });\r\n  }, [props.dataType, props.version, fileId]);\r\n\r\n  useEffect(() => {\r\n    getSystems()\r\n      .then((res: any) => setSystems(res.data))\r\n      .catch((err: any) => setSystems([]));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (props.inclination !== \"\") {\r\n      const params = {\r\n        user_altitude: dot.x,\r\n        user_inclination: props.inclination,\r\n        system: props.system,\r\n        version: props.version,\r\n      };\r\n\r\n      getFileId(params)\r\n        .then((res: any) => setFileId(res.data))\r\n        .catch((err: any) => setFileId([]));\r\n    }\r\n  }, [props.inclination]);\r\n\r\n  useEffect(() => {\r\n    setDot({\r\n      x: props.data.plot_value[0].altitude,\r\n      y: props.data.plot_value[0].value,\r\n    });\r\n  }, [props.data]);\r\n\r\n  useEffect(() => {\r\n    if (props.system !== \"\") {\r\n      getSystemVersion({ system: props.system })\r\n        .then((res: any) => setVersions(res.data))\r\n        .catch((err: any) => setVersions([]));\r\n    }\r\n  }, [props.system]);\r\n\r\n  const handleCheck = (event: any) => {\r\n    const { name, checked } = event.currentTarget;\r\n    setChecked((prevState) => ({ ...prevState, [name]: checked }));\r\n  };\r\n\r\n  const handleDataSetClick = (event: any) => {\r\n    event.preventDefault();\r\n    const { id, name } = event.currentTarget;\r\n\r\n    setDataSet(id);\r\n    props.onDataType(name);\r\n  };\r\n\r\n  const handleClick = (event: any) => {\r\n    if (event) {\r\n      const params = {\r\n        user_altitude: event.points[0].x,\r\n        user_inclination: props.inc,\r\n        system: props.system,\r\n        version: props.version,\r\n      };\r\n\r\n      setDot({ x: event.points[0].x, y: event.points[0].y });\r\n      getFileId(params)\r\n        .then((res: any) => setFileId(res.data))\r\n        .catch((err: any) => setFileId([]));\r\n    }\r\n    setSelected(true);\r\n  };\r\n\r\n  return (\r\n    <Grid container justify=\"center\" alignItems=\"center\" spacing={2}>\r\n      <Grid item md={12}>\r\n        <Grid\r\n          container\r\n          justify=\"flex-start\"\r\n          alignItems=\"center\"\r\n          spacing={2}\r\n          style={{\r\n            backgroundColor: grey[300],\r\n            minHeight: \"10vh\",\r\n          }}\r\n        >\r\n          <Grid item md={5} style={{ marginLeft: 15 }}>\r\n            <ToggleButtonGroup value={dataSet} onChange={handleDataSetClick}>\r\n              <ToggleButton\r\n                id=\"as_needed_handoff\"\r\n                name=\"coverage\"\r\n                value=\"as_needed_handoff\"\r\n                size=\"small\"\r\n              >\r\n                {`RF Coverage (%)`}\r\n              </ToggleButton>\r\n              <ToggleButton\r\n                id=\"maximum_powee_handoff\"\r\n                name=\"gap\"\r\n                value=\"maximum_powee_handoff\"\r\n                size=\"small\"\r\n              >\r\n                {`No Coverage (%)`}\r\n              </ToggleButton>\r\n            </ToggleButtonGroup>\r\n          </Grid>\r\n          <Grid item md={3} style={{ marginLeft: \"15px\" }}>\r\n            <FormControl\r\n              variant=\"outlined\"\r\n              size=\"small\"\r\n              className={classes.formControl}\r\n              fullWidth\r\n              disabled={viewMethod === \"3d_view\"}\r\n            >\r\n              <InputLabel id=\"demo-simple-select-outlined-label\">{`System`}</InputLabel>\r\n              <Select\r\n                labelId=\"demo-simple-select-outlined-label\"\r\n                id=\"demo-simple-select-outlined\"\r\n                value={props.system}\r\n                onChange={(e) => props.onSystem(e.target.value)}\r\n                label=\"System\"\r\n              >\r\n                <MenuItem value=\"\" disabled>\r\n                  <em>{`None`}</em>\r\n                </MenuItem>\r\n                {systems.map((item: any) => (\r\n                  <MenuItem key={item.system_name} value={item.system_id}>\r\n                    {item.system_name}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid item md={3}>\r\n            <FormControl\r\n              variant=\"outlined\"\r\n              size=\"small\"\r\n              className={classes.formControl}\r\n              fullWidth\r\n            >\r\n              <InputLabel id=\"demo-simple-select-outlined-label\">{`Version`}</InputLabel>\r\n              <Select\r\n                labelId=\"demo-simple-select-outlined-label\"\r\n                id=\"demo-simple-select-outlined\"\r\n                value={props.version}\r\n                onChange={(e) => props.onVersion(e.target.value)}\r\n                label=\"Version\"\r\n              >\r\n                <MenuItem value=\"\" disabled>\r\n                  <em>{`None`}</em>\r\n                </MenuItem>\r\n                {versions.map((item: any) => (\r\n                  <MenuItem\r\n                    key={`version_${item.versions}`}\r\n                    value={item.versions}\r\n                  >\r\n                    {item.versions}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid item md={12} style={{ textAlign: \"center\", position: \"relative\" }}>\r\n        <Typography variant=\"h6\">\r\n          {dataSet === \"as_needed_handoff\"\r\n            ? `RF Coverage (%) vs. User Inclination`\r\n            : `No Coverage (%) vs. User Inclination`}\r\n        </Typography>\r\n        <OptionAddon\r\n          source={props.data}\r\n          checked={checked}\r\n          viewMethod={viewMethod}\r\n          inc={props.inclination}\r\n          incs={props.incs}\r\n          isDash={false}\r\n          onInc={(value: any) => props.onInc(value)}\r\n          onChecked={handleCheck}\r\n          resetPlot={() => setReset(!reset)}\r\n          onViewMethod={(e: any) => setViewMethod(e.currentTarget.name)}\r\n        />\r\n      </Grid>\r\n\r\n      {/* FIXME: check at the process of cart integration.\r\n      <Grid item md={12} style={{ zIndex: 1000 }}>\r\n        <MathJax.Provider>\r\n          <MathJax.Node formula={props.text} />\r\n        </MathJax.Provider>\r\n      </Grid> */}\r\n\r\n      <Grid item md={12}>\r\n        <Card style={{ marginLeft: \"2.5rem\", marginRight: \"2.5rem\" }}>\r\n          <CardContent>\r\n            {viewMethod === \"3d_view\" ? (\r\n              <Grid item md={12}>\r\n                <ThreeViewSection\r\n                  data={props.source}\r\n                  equation={props.equation}\r\n                  maxAltitude={props.maxAltitude}\r\n                  alt={props.alt}\r\n                  inc={props.inclination !== \"\" ? props.inclination : props.inc}\r\n                  value={props.value}\r\n                  reset={reset}\r\n                  isLegend={false}\r\n                  isSub={true}\r\n                  plot_rows={props.source.plot_value}\r\n                  surface_rows={surface_rows}\r\n                  zAxisLabel={zAxisLabel}\r\n                  checked={checked}\r\n                  onClick={handleClick}\r\n                />\r\n              </Grid>\r\n            ) : (\r\n              <Grid item md={12}>\r\n                <TwoViewSection\r\n                  data={props.data}\r\n                  equation={props.equation}\r\n                  maxAltitude={props.maxAltitude}\r\n                  alt={props.alt}\r\n                  inc={props.inclination !== \"\" ? props.inclination : props.inc}\r\n                  value={props.value}\r\n                  isLegend={false}\r\n                  isSub={true}\r\n                  plot_rows={plot_rows}\r\n                  surface_rows={surface_rows}\r\n                  yAxisLabel={zAxisLabel}\r\n                  dot={dot}\r\n                  checked={checked}\r\n                  onClick={handleClick}\r\n                />\r\n              </Grid>\r\n            )}\r\n          </CardContent>\r\n        </Card>\r\n      </Grid>\r\n      {selected && <></>}\r\n      {Object.keys(traces).length > 0 && (\r\n        <ChartsLibsSection\r\n          traces={traces}\r\n          dataSet={dataSet}\r\n          dataType={props.dataType}\r\n        />\r\n      )}\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default AnalyzeRegressionSection;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport {\r\n  Grid,\r\n  CssBaseline,\r\n  Slide,\r\n  Typography,\r\n  IconButton,\r\n  Dialog,\r\n  DialogTitle as MuiDialogTitle,\r\n  DialogContent,\r\n} from \"@material-ui/core\";\r\nimport { TransitionProps } from \"@material-ui/core/transitions\";\r\nimport { Close as CloseIcon } from \"@material-ui/icons\";\r\n\r\nimport { getCartItems } from \"../../API\";\r\nimport useStyles from \"../../utils/styles\";\r\nimport AnalyzeRegressionSection from \"./analyze-regression-section\";\r\n\r\nconst INIT_PARAMS = {\r\n  altitude: 300,\r\n  availabilityThreshold: 0.999,\r\n  dataVolumeNeed: 0.1,\r\n  gapThreshold: 6,\r\n  inclination: 0,\r\n  latitude: 30,\r\n  launchYear: 2030,\r\n  longitude: 30,\r\n  navAccuracyNeed: 20,\r\n  powerAmplifier: 1,\r\n  value: 100,\r\n};\r\n\r\nconst Transition = React.forwardRef(function Transition(\r\n  props: TransitionProps & { children?: React.ReactElement<any, any> },\r\n  ref: React.Ref<Function>\r\n) {\r\n  return <Slide direction=\"left\" ref={ref} {...props} />;\r\n});\r\n\r\nfunction CartPanel(props: any) {\r\n  const [source, setSource] = useState({} as any);\r\n  const [dataSource, setDataSource] = useState({} as any);\r\n  const [system, setSystem] = useState(5 as any);\r\n  const [version, setVersion] = useState(3 as any);\r\n  const [inclination, setInclination] = useState(\"\");\r\n  const [incs, setIncs] = useState([] as any);\r\n  const [dataType, setDataType] = useState(\"coverage\" as any);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [terrestrial, setTerrestrial] = useState({});\r\n  const [maxAltitude, setMaxAltitude] = useState(0);\r\n  const [coefficients, setCoefficients] = useState({} as any);\r\n  const [text, setText] = useState(\"\");\r\n  const deepDive = \"system1/coverage\";\r\n  const metric = deepDive.split(\"/\")[1];\r\n  const missionType = \"orbital\";\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    setText(\"\");\r\n    getCartItems({\r\n      type: missionType,\r\n      system: system,\r\n      version: version,\r\n      dataType,\r\n    })\r\n      .then((res: any) => {\r\n        setTerrestrial(res.data.terrestrial);\r\n        setSource(res.data.data.data);\r\n        setDataSource(res.data.data.data);\r\n        setMaxAltitude(res.data.data.maxAltitude);\r\n        setCoefficients(res.data.data.coefficients);\r\n        setText(res.data.data.text);\r\n\r\n        if (Object.keys(res.data.data.data).includes(\"plot_value\")) {\r\n          let tmp = res.data.data.data.plot_value.map(\r\n            (item: any) => item[\"inclination\"]\r\n          );\r\n          let uniqueArray: Array<any> = [...new Set(tmp)];\r\n          setIncs(uniqueArray.sort());\r\n        }\r\n\r\n        // FIXME: there is no real data for it.\r\n        //\r\n        // setText(\r\n        //   props.equationsTex[system.replace(\" \", \"_\").toLowerCase()][metric](\r\n        //     data[\"coefficients\"][metric]\r\n        //   )\r\n        // );\r\n      })\r\n      .then(() => {\r\n        setIsLoading(false);\r\n      });\r\n  }, [system, version, dataType]);\r\n\r\n  useEffect(() => {\r\n    if (Object.keys(dataSource).includes(\"plot_value\")) {\r\n      let data = dataSource.plot_value.filter(\r\n        (item: any) => item.inclination === inclination\r\n      );\r\n      setSource((prevState: any) => ({ ...prevState, plot_value: data }));\r\n    }\r\n  }, [inclination]);\r\n\r\n  const equation = (inc: any, alt: any, metric: string) => {\r\n    // FIXME: activate in integration of cart.\r\n    //\r\n    // const altitude = parseFloat(alt);\r\n    // const inclination = parseFloat(inc);\r\n\r\n    // const coefs = coefficients[metric];\r\n    // const eqn = props.equations[system.replace(\" \", \"_\").toLowerCase()][metric];\r\n\r\n    // return eqn(coefs, altitude, inclination);\r\n    return inc;\r\n  };\r\n\r\n  return (\r\n    <Dialog\r\n      open={props.isOpen}\r\n      TransitionComponent={Transition}\r\n      onClose={() => props.onClose()}\r\n      classes={{ paper: classes.dialogDeep }}\r\n    >\r\n      <CssBaseline />\r\n      <MuiDialogTitle>\r\n        <Typography component=\"strong\" variant=\"h6\">\r\n          {\"Cart Integration Panel\"}\r\n        </Typography>\r\n        <IconButton\r\n          aria-label=\"Close\"\r\n          className={classes.dialogCloseBtn}\r\n          onClick={() => props.onClose()}\r\n        >\r\n          <CloseIcon />\r\n        </IconButton>\r\n      </MuiDialogTitle>\r\n      <DialogContent\r\n        dividers={true}\r\n        style={{ paddingRight: 0, paddingLeft: 0, overflowX: \"hidden\" }}\r\n      >\r\n        <Grid container justify=\"center\" alignItems=\"center\">\r\n          <Grid item md={12}>\r\n            {!isLoading &&\r\n              (missionType === \"orbital\" ? (\r\n                <AnalyzeRegressionSection\r\n                  equation={(x: any, y: any, m: any) => equation(x, y, m)}\r\n                  maxAltitude={maxAltitude}\r\n                  alt={INIT_PARAMS.altitude}\r\n                  inc={INIT_PARAMS.inclination}\r\n                  value={INIT_PARAMS.value}\r\n                  data={source}\r\n                  source={dataSource}\r\n                  dataType={dataType}\r\n                  selectedItem={metric}\r\n                  text={text}\r\n                  system={system}\r\n                  version={version}\r\n                  inclination={inclination}\r\n                  incs={incs}\r\n                  onInc={(value: any) => setInclination(value)}\r\n                  onSystem={(value: any) => setSystem(value)}\r\n                  onVersion={(value: any) => setVersion(value)}\r\n                  onDataType={(value: any) => setDataType(value)}\r\n                />\r\n              ) : (\r\n                <></>\r\n              ))}\r\n          </Grid>\r\n        </Grid>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n}\r\n\r\nexport default CartPanel;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport SwipeableViews from \"react-swipeable-views\";\r\n\r\nimport {\r\n  Grid,\r\n  Container,\r\n  CssBaseline,\r\n  Card,\r\n  CardHeader,\r\n  CardContent,\r\n  Typography,\r\n  Button,\r\n  Select,\r\n  MenuItem,\r\n  Tab,\r\n  Tabs,\r\n  AppBar,\r\n  Box,\r\n} from \"@material-ui/core\";\r\nimport { grey } from \"@material-ui/core/colors\";\r\nimport { useTheme } from \"@material-ui/core/styles\";\r\n\r\nimport { getItems } from \"../../API\";\r\nimport useStyles from \"../../utils/styles\";\r\nimport LineChartSection from \"./line-chart-section\";\r\nimport HistogramChartSection from \"./histogram-chart-section\";\r\nimport BoxChartSection from \"./box-chart-section\";\r\nimport TerrestrialHeatMap from \"./terrestrial-heatmap-chart\";\r\nimport CartDashBoardPanel from \"../cart-dashboard-panel\";\r\nimport CartPanel from \"../cart-panel\";\r\n\r\nconst INIT_MENUS = [\r\n  { id: \"as_needed_handoff\", name: \"Power below threshold handoff\" },\r\n  { id: \"maximum_powee_handoff\", name: \"Maximum power immediate handoff\" },\r\n];\r\n\r\nconst TabPanel = (props: any) => {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`full-width-tabpanel-${index}`}\r\n      aria-labelledby={`full-width-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && <Box p={3}>{children}</Box>}\r\n    </div>\r\n  );\r\n};\r\n\r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.any.isRequired,\r\n  value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index: any) {\r\n  return {\r\n    id: `full-width-tab-${index}`,\r\n    \"aria-controls\": `full-width-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\nfunction ChartPanel() {\r\n  const [traces, setTraces] = useState({} as any);\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [isOpenDash, setIsOpenDash] = useState(false);\r\n  const [selected, setSelected] = useState(\"none\");\r\n  const [tab, setTab] = useState(0);\r\n  const theme = useTheme();\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    if (selected !== \"none\")\r\n      getItems(selected)\r\n        .then((res) => {\r\n          Object.keys(res.data).map((el) => {\r\n            let ctype: String = res.data[el][\"type\"];\r\n            let gaps: Array<any> = [];\r\n            let durations: Array<any> = [];\r\n            let avgs: Array<any> = [];\r\n\r\n            // Detect chart type and set Traces\r\n            if (ctype === \"line\") {\r\n              res.data[el][\"data\"].map((item: Array<any>, idx: number) => {\r\n                gaps.push(idx + 1);\r\n                durations.push(item[0]);\r\n                avgs.push(item[1]);\r\n              });\r\n\r\n              setTraces((prevState: any) => ({\r\n                ...prevState,\r\n                [el]: {\r\n                  xTraces: gaps,\r\n                  yTraces: durations,\r\n                  avgTraces: avgs,\r\n                  type: ctype,\r\n                  title: res.data[el][\"title\"],\r\n                },\r\n              }));\r\n            } else if (ctype === \"histogram\") {\r\n              setTraces((prevState: any) => ({\r\n                ...prevState,\r\n                [el]: {\r\n                  xTraces: res.data[el][\"data\"],\r\n                  type: ctype,\r\n                  title: res.data[el][\"title\"],\r\n                },\r\n              }));\r\n            }\r\n          });\r\n        })\r\n        .catch(() => {\r\n          setTraces({});\r\n        });\r\n  }, [selected]);\r\n\r\n  return (\r\n    <>\r\n      <Grid container>\r\n        <Container component=\"main\" maxWidth=\"lg\">\r\n          <CssBaseline />\r\n          <Card className={classes.chartCard}>\r\n            <CardHeader\r\n              title={\r\n                <Typography component=\"h1\" variant=\"h5\" className=\"m-3\">\r\n                  {`CART Data Statistics Dashboard (Prototype)`}\r\n                </Typography>\r\n              }\r\n              action={\r\n                <>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={() => setIsOpenDash(true)}\r\n                    style={{ marginRight: 10 }}\r\n                  >\r\n                    {\"Open Dashboard\"}\r\n                  </Button>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={() => setIsOpen(true)}\r\n                  >\r\n                    {\"Open Chart\"}\r\n                  </Button>\r\n                </>\r\n              }\r\n            />\r\n            <CardContent className=\"ml-3 mr-3\">\r\n              <AppBar position=\"static\" color=\"default\">\r\n                <Tabs\r\n                  value={tab}\r\n                  onChange={(e, val) => setTab(val)}\r\n                  indicatorColor=\"primary\"\r\n                  textColor=\"primary\"\r\n                  variant=\"fullWidth\"\r\n                  aria-label=\"full width tabs example\"\r\n                >\r\n                  <Tab label=\"Data Statistics Dashboard\" {...a11yProps(0)} />\r\n                  <Tab label=\"Heat Map\" {...a11yProps(1)} />\r\n                </Tabs>\r\n              </AppBar>\r\n              <SwipeableViews\r\n                axis={theme.direction === \"rtl\" ? \"x-reverse\" : \"x\"}\r\n                index={tab}\r\n                onChangeIndex={(index: any) => setTab(index)}\r\n              >\r\n                <TabPanel value={tab} index={0}>\r\n                  <Grid\r\n                    container\r\n                    spacing={3}\r\n                    justify=\"center\"\r\n                    alignItems=\"center\"\r\n                  >\r\n                    <Grid item md={4}>\r\n                      <Select\r\n                        name=\"\"\r\n                        value={selected}\r\n                        onChange={(e: any) => setSelected(e.target.value)}\r\n                        className={classes.searchSelect}\r\n                        style={selected === \"none\" ? { color: grey[500] } : {}}\r\n                        fullWidth\r\n                      >\r\n                        <MenuItem\r\n                          value=\"none\"\r\n                          style={{ opacity: 0.87 }}\r\n                          disabled\r\n                        >\r\n                          {\"Select Data Set…\"}\r\n                        </MenuItem>\r\n                        {INIT_MENUS.map((item) => (\r\n                          <MenuItem value={item.id} key={item.id}>\r\n                            {item.name}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </Select>\r\n                    </Grid>\r\n                    <Grid item md={8}></Grid>\r\n                    {Object.keys(traces).map((item) => (\r\n                      <Grid item md={6} key={item}>\r\n                        <Grid container spacing={3}>\r\n                          {traces[item].type === \"line\" && (\r\n                            <Grid item md={12}>\r\n                              <LineChartSection source={traces[item]} dataType={`coverage`} />\r\n                            </Grid>\r\n                          )}\r\n                          {traces[item].type === \"histogram\" && (\r\n                            <>\r\n                              <Grid item md={12}>\r\n                                <HistogramChartSection {...traces[item]} />\r\n                              </Grid>\r\n                              <Grid item md={12}>\r\n                                <BoxChartSection {...traces[item]} />\r\n                              </Grid>\r\n                            </>\r\n                          )}\r\n                        </Grid>\r\n                      </Grid>\r\n                    ))}\r\n                  </Grid>\r\n                </TabPanel>\r\n                <TabPanel value={tab} index={1}>\r\n                  <Grid container justify=\"center\" alignItems=\"center\">\r\n                    <Grid item md={12}>\r\n                      <TerrestrialHeatMap />\r\n                    </Grid>\r\n                  </Grid>\r\n                </TabPanel>\r\n              </SwipeableViews>\r\n            </CardContent>\r\n          </Card>\r\n        </Container>\r\n      </Grid>\r\n      <CartPanel isOpen={isOpen} onClose={() => setIsOpen(false)} />\r\n      <CartDashBoardPanel\r\n        isOpen={isOpenDash}\r\n        onClose={() => setIsOpenDash(false)}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ChartPanel;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport {\r\n    Container,\r\n    Card,\r\n    CardHeader,\r\n    CardContent,\r\n    Typography,\r\n    CssBaseline\r\n} from \"@material-ui/core\";\r\n\r\nimport useStyles from \"../../utils/styles\";\r\n\r\nfunction NoMatch() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"md\">\r\n            <CssBaseline />\r\n            <Card className={classes.authcard}>\r\n                <CardHeader\r\n                    title={\r\n                        <Typography component=\"h1\" variant=\"h5\">\r\n                            {`404 | Page not found :(`}\r\n                        </Typography>\r\n                    }\r\n                />\r\n                <CardContent>\r\n                    <p>{`Maybe the page you are looking for has been removed, or you typed in the wrong URL`}</p>\r\n                </CardContent>\r\n                <Link to=\"/\" className={classes.link}>{`Back To Home`}</Link>\r\n            </Card>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default NoMatch;","import React from \"react\";\r\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\r\n\r\nimport ChartPanel from \"./pages/chart-panel\";\r\nimport NoMatch from \"./pages/auth-panel/NoMatch\";\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <HashRouter>\r\n      <Switch>\r\n        <Route exact path=\"/\" component={ChartPanel} />\r\n        <Route path=\"*\" component={NoMatch} />\r\n      </Switch>\r\n    </HashRouter>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}